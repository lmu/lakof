(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[2],{

/***/ "./.plone/++plone++static/components/jquery-form/src/jquery.form.js":
/*!**************************************************************************!*\
  !*** ./.plone/++plone++static/components/jquery-form/src/jquery.form.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery Form Plugin\n * version: 4.2.2\n * Requires jQuery v1.7.2 or later\n * Project repository: https://github.com/jquery-form/form\n\n * Copyright 2017 Kevin Morris\n * Copyright 2006 M. Alsup\n\n * Dual licensed under the LGPL-2.1+ or MIT licenses\n * https://github.com/jquery-form/form#license\n\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n */\n/* global ActiveXObject */\n\n/* eslint-disable */\n(function (factory) {\n\tif (true) {\n\t\t// AMD. Register as an anonymous module.\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n\n}(function ($) {\n/* eslint-enable */\n\t'use strict';\n\n\t/*\n\t\tUsage Note:\n\t\t-----------\n\t\tDo not use both ajaxSubmit and ajaxForm on the same form. These\n\t\tfunctions are mutually exclusive. Use ajaxSubmit if you want\n\t\tto bind your own submit handler to the form. For example,\n\n\t\t$(document).ready(function() {\n\t\t\t$('#myForm').on('submit', function(e) {\n\t\t\t\te.preventDefault(); // <-- important\n\t\t\t\t$(this).ajaxSubmit({\n\t\t\t\t\ttarget: '#output'\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tUse ajaxForm when you want the plugin to manage all the event binding\n\t\tfor you. For example,\n\n\t\t$(document).ready(function() {\n\t\t\t$('#myForm').ajaxForm({\n\t\t\t\ttarget: '#output'\n\t\t\t});\n\t\t});\n\n\t\tYou can also use ajaxForm with delegation (requires jQuery v1.7+), so the\n\t\tform does not have to exist when you invoke ajaxForm:\n\n\t\t$('#myForm').ajaxForm({\n\t\t\tdelegation: true,\n\t\t\ttarget: '#output'\n\t\t});\n\n\t\tWhen using ajaxForm, the ajaxSubmit function will be invoked for you\n\t\tat the appropriate time.\n\t*/\n\n\tvar rCRLF = /\\r?\\n/g;\n\n\t/**\n\t * Feature detection\n\t */\n\tvar feature = {};\n\n\tfeature.fileapi = $('<input type=\"file\">').get(0).files !== undefined;\n\tfeature.formdata = (typeof window.FormData !== 'undefined');\n\n\tvar hasProp = !!$.fn.prop;\n\n\t// attr2 uses prop when it can but checks the return type for\n\t// an expected string. This accounts for the case where a form\n\t// contains inputs with names like \"action\" or \"method\"; in those\n\t// cases \"prop\" returns the element\n\t$.fn.attr2 = function() {\n\t\tif (!hasProp) {\n\t\t\treturn this.attr.apply(this, arguments);\n\t\t}\n\n\t\tvar val = this.prop.apply(this, arguments);\n\n\t\tif ((val && val.jquery) || typeof val === 'string') {\n\t\t\treturn val;\n\t\t}\n\n\t\treturn this.attr.apply(this, arguments);\n\t};\n\n\t/**\n\t * ajaxSubmit() provides a mechanism for immediately submitting\n\t * an HTML form using AJAX.\n\t *\n\t * @param\t{object|string}\toptions\t\tjquery.form.js parameters or custom url for submission\n\t * @param\t{object}\t\tdata\t\textraData\n\t * @param\t{string}\t\tdataType\tajax dataType\n\t * @param\t{function}\t\tonSuccess\tajax success callback function\n\t */\n\t$.fn.ajaxSubmit = function(options, data, dataType, onSuccess) {\n\t\t// fast fail if nothing selected (http://dev.jquery.com/ticket/2752)\n\t\tif (!this.length) {\n\t\t\tlog('ajaxSubmit: skipping submit process - no element selected');\n\n\t\t\treturn this;\n\t\t}\n\n\t\t/* eslint consistent-this: [\"error\", \"$form\"] */\n\t\tvar method, action, url, $form = this;\n\n\t\tif (typeof options === 'function') {\n\t\t\toptions = {success: options};\n\n\t\t} else if (typeof options === 'string' || (options === false && arguments.length > 0)) {\n\t\t\toptions = {\n\t\t\t\t'url'      : options,\n\t\t\t\t'data'     : data,\n\t\t\t\t'dataType' : dataType\n\t\t\t};\n\n\t\t\tif (typeof onSuccess === 'function') {\n\t\t\t\toptions.success = onSuccess;\n\t\t\t}\n\n\t\t} else if (typeof options === 'undefined') {\n\t\t\toptions = {};\n\t\t}\n\n\t\tmethod = options.method || options.type || this.attr2('method');\n\t\taction = options.url || this.attr2('action');\n\n\t\turl = (typeof action === 'string') ? $.trim(action) : '';\n\t\turl = url || window.location.href || '';\n\t\tif (url) {\n\t\t\t// clean url (don't include hash vaue)\n\t\t\turl = (url.match(/^([^#]+)/) || [])[1];\n\t\t}\n\n\t\toptions = $.extend(true, {\n\t\t\turl       : url,\n\t\t\tsuccess   : $.ajaxSettings.success,\n\t\t\ttype      : method || $.ajaxSettings.type,\n\t\t\tiframeSrc : /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank'\t\t// eslint-disable-line no-script-url\n\t\t}, options);\n\n\t\t// hook for manipulating the form data before it is extracted;\n\t\t// convenient for use with rich editors like tinyMCE or FCKEditor\n\t\tvar veto = {};\n\n\t\tthis.trigger('form-pre-serialize', [this, options, veto]);\n\n\t\tif (veto.veto) {\n\t\t\tlog('ajaxSubmit: submit vetoed via form-pre-serialize trigger');\n\n\t\t\treturn this;\n\t\t}\n\n\t\t// provide opportunity to alter form data before it is serialized\n\t\tif (options.beforeSerialize && options.beforeSerialize(this, options) === false) {\n\t\t\tlog('ajaxSubmit: submit aborted via beforeSerialize callback');\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvar traditional = options.traditional;\n\n\t\tif (typeof traditional === 'undefined') {\n\t\t\ttraditional = $.ajaxSettings.traditional;\n\t\t}\n\n\t\tvar elements = [];\n\t\tvar qx, a = this.formToArray(options.semantic, elements, options.filtering);\n\n\t\tif (options.data) {\n\t\t\tvar optionsData = $.isFunction(options.data) ? options.data(a) : options.data;\n\n\t\t\toptions.extraData = optionsData;\n\t\t\tqx = $.param(optionsData, traditional);\n\t\t}\n\n\t\t// give pre-submit callback an opportunity to abort the submit\n\t\tif (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) {\n\t\t\tlog('ajaxSubmit: submit aborted via beforeSubmit callback');\n\n\t\t\treturn this;\n\t\t}\n\n\t\t// fire vetoable 'validate' event\n\t\tthis.trigger('form-submit-validate', [a, this, options, veto]);\n\t\tif (veto.veto) {\n\t\t\tlog('ajaxSubmit: submit vetoed via form-submit-validate trigger');\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvar q = $.param(a, traditional);\n\n\t\tif (qx) {\n\t\t\tq = (q ? (q + '&' + qx) : qx);\n\t\t}\n\n\t\tif (options.type.toUpperCase() === 'GET') {\n\t\t\toptions.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q;\n\t\t\toptions.data = null;\t// data is null for 'get'\n\t\t} else {\n\t\t\toptions.data = q;\t\t// data is the query string for 'post'\n\t\t}\n\n\t\tvar callbacks = [];\n\n\t\tif (options.resetForm) {\n\t\t\tcallbacks.push(function() {\n\t\t\t\t$form.resetForm();\n\t\t\t});\n\t\t}\n\n\t\tif (options.clearForm) {\n\t\t\tcallbacks.push(function() {\n\t\t\t\t$form.clearForm(options.includeHidden);\n\t\t\t});\n\t\t}\n\n\t\t// perform a load on the target only if dataType is not provided\n\t\tif (!options.dataType && options.target) {\n\t\t\tvar oldSuccess = options.success || function(){};\n\n\t\t\tcallbacks.push(function(data, textStatus, jqXHR) {\n\t\t\t\tvar successArguments = arguments,\n\t\t\t\t\tfn = options.replaceTarget ? 'replaceWith' : 'html';\n\n\t\t\t\t$(options.target)[fn](data).each(function(){\n\t\t\t\t\toldSuccess.apply(this, successArguments);\n\t\t\t\t});\n\t\t\t});\n\n\t\t} else if (options.success) {\n\t\t\tif ($.isArray(options.success)) {\n\t\t\t\t$.merge(callbacks, options.success);\n\t\t\t} else {\n\t\t\t\tcallbacks.push(options.success);\n\t\t\t}\n\t\t}\n\n\t\toptions.success = function(data, status, xhr) { // jQuery 1.4+ passes xhr as 3rd arg\n\t\t\tvar context = options.context || this;\t\t// jQuery 1.4+ supports scope context\n\n\t\t\tfor (var i = 0, max = callbacks.length; i < max; i++) {\n\t\t\t\tcallbacks[i].apply(context, [data, status, xhr || $form, $form]);\n\t\t\t}\n\t\t};\n\n\t\tif (options.error) {\n\t\t\tvar oldError = options.error;\n\n\t\t\toptions.error = function(xhr, status, error) {\n\t\t\t\tvar context = options.context || this;\n\n\t\t\t\toldError.apply(context, [xhr, status, error, $form]);\n\t\t\t};\n\t\t}\n\n\t\tif (options.complete) {\n\t\t\tvar oldComplete = options.complete;\n\n\t\t\toptions.complete = function(xhr, status) {\n\t\t\t\tvar context = options.context || this;\n\n\t\t\t\toldComplete.apply(context, [xhr, status, $form]);\n\t\t\t};\n\t\t}\n\n\t\t// are there files to upload?\n\n\t\t// [value] (issue #113), also see comment:\n\t\t// https://github.com/malsup/form/commit/588306aedba1de01388032d5f42a60159eea9228#commitcomment-2180219\n\t\tvar fileInputs = $('input[type=file]:enabled', this).filter(function() {\n\t\t\treturn $(this).val() !== '';\n\t\t});\n\t\tvar hasFileInputs = fileInputs.length > 0;\n\t\tvar mp = 'multipart/form-data';\n\t\tvar multipart = ($form.attr('enctype') === mp || $form.attr('encoding') === mp);\n\t\tvar fileAPI = feature.fileapi && feature.formdata;\n\n\t\tlog('fileAPI :' + fileAPI);\n\n\t\tvar shouldUseFrame = (hasFileInputs || multipart) && !fileAPI;\n\t\tvar jqxhr;\n\n\t\t// options.iframe allows user to force iframe mode\n\t\t// 06-NOV-09: now defaulting to iframe mode if file input is detected\n\t\tif (options.iframe !== false && (options.iframe || shouldUseFrame)) {\n\t\t\t// hack to fix Safari hang (thanks to Tim Molendijk for this)\n\t\t\t// see: http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d\n\t\t\tif (options.closeKeepAlive) {\n\t\t\t\t$.get(options.closeKeepAlive, function() {\n\t\t\t\t\tjqxhr = fileUploadIframe(a);\n\t\t\t\t});\n\n\t\t\t} else {\n\t\t\t\tjqxhr = fileUploadIframe(a);\n\t\t\t}\n\n\t\t} else if ((hasFileInputs || multipart) && fileAPI) {\n\t\t\tjqxhr = fileUploadXhr(a);\n\n\t\t} else {\n\t\t\tjqxhr = $.ajax(options);\n\t\t}\n\n\t\t$form.removeData('jqxhr').data('jqxhr', jqxhr);\n\n\t\t// clear element array\n\t\tfor (var k = 0; k < elements.length; k++) {\n\t\t\telements[k] = null;\n\t\t}\n\n\t\t// fire 'notify' event\n\t\tthis.trigger('form-submit-notify', [this, options]);\n\n\t\treturn this;\n\n\t\t// utility fn for deep serialization\n\t\tfunction deepSerialize(extraData) {\n\t\t\tvar serialized = $.param(extraData, options.traditional).split('&');\n\t\t\tvar len = serialized.length;\n\t\t\tvar result = [];\n\t\t\tvar i, part;\n\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t// #252; undo param space replacement\n\t\t\t\tserialized[i] = serialized[i].replace(/\\+/g, ' ');\n\t\t\t\tpart = serialized[i].split('=');\n\t\t\t\t// #278; use array instead of object storage, favoring array serializations\n\t\t\t\tresult.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\t// XMLHttpRequest Level 2 file uploads (big hat tip to francois2metz)\n\t\tfunction fileUploadXhr(a) {\n\t\t\tvar formdata = new FormData();\n\n\t\t\tfor (var i = 0; i < a.length; i++) {\n\t\t\t\tformdata.append(a[i].name, a[i].value);\n\t\t\t}\n\n\t\t\tif (options.extraData) {\n\t\t\t\tvar serializedData = deepSerialize(options.extraData);\n\n\t\t\t\tfor (i = 0; i < serializedData.length; i++) {\n\t\t\t\t\tif (serializedData[i]) {\n\t\t\t\t\t\tformdata.append(serializedData[i][0], serializedData[i][1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toptions.data = null;\n\n\t\t\tvar s = $.extend(true, {}, $.ajaxSettings, options, {\n\t\t\t\tcontentType : false,\n\t\t\t\tprocessData : false,\n\t\t\t\tcache       : false,\n\t\t\t\ttype        : method || 'POST'\n\t\t\t});\n\n\t\t\tif (options.uploadProgress) {\n\t\t\t\t// workaround because jqXHR does not expose upload property\n\t\t\t\ts.xhr = function() {\n\t\t\t\t\tvar xhr = $.ajaxSettings.xhr();\n\n\t\t\t\t\tif (xhr.upload) {\n\t\t\t\t\t\txhr.upload.addEventListener('progress', function(event) {\n\t\t\t\t\t\t\tvar percent = 0;\n\t\t\t\t\t\t\tvar position = event.loaded || event.position;\t\t\t/* event.position is deprecated */\n\t\t\t\t\t\t\tvar total = event.total;\n\n\t\t\t\t\t\t\tif (event.lengthComputable) {\n\t\t\t\t\t\t\t\tpercent = Math.ceil(position / total * 100);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\toptions.uploadProgress(event, position, total, percent);\n\t\t\t\t\t\t}, false);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn xhr;\n\t\t\t\t};\n\t\t\t}\n\n\t\t\ts.data = null;\n\n\t\t\tvar beforeSend = s.beforeSend;\n\n\t\t\ts.beforeSend = function(xhr, o) {\n\t\t\t\t// Send FormData() provided by user\n\t\t\t\tif (options.formData) {\n\t\t\t\t\to.data = options.formData;\n\t\t\t\t} else {\n\t\t\t\t\to.data = formdata;\n\t\t\t\t}\n\n\t\t\t\tif (beforeSend) {\n\t\t\t\t\tbeforeSend.call(this, xhr, o);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn $.ajax(s);\n\t\t}\n\n\t\t// private function for handling file uploads (hat tip to YAHOO!)\n\t\tfunction fileUploadIframe(a) {\n\t\t\tvar form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle;\n\t\t\tvar deferred = $.Deferred();\n\n\t\t\t// #341\n\t\t\tdeferred.abort = function(status) {\n\t\t\t\txhr.abort(status);\n\t\t\t};\n\n\t\t\tif (a) {\n\t\t\t\t// ensure that every serialized input is still enabled\n\t\t\t\tfor (i = 0; i < elements.length; i++) {\n\t\t\t\t\tel = $(elements[i]);\n\t\t\t\t\tif (hasProp) {\n\t\t\t\t\t\tel.prop('disabled', false);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tel.removeAttr('disabled');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ts = $.extend(true, {}, $.ajaxSettings, options);\n\t\t\ts.context = s.context || s;\n\t\t\tid = 'jqFormIO' + new Date().getTime();\n\t\t\tvar ownerDocument = form.ownerDocument;\n\t\t\tvar $body = $form.closest('body');\n\n\t\t\tif (s.iframeTarget) {\n\t\t\t\t$io = $(s.iframeTarget, ownerDocument);\n\t\t\t\tn = $io.attr2('name');\n\t\t\t\tif (!n) {\n\t\t\t\t\t$io.attr2('name', id);\n\t\t\t\t} else {\n\t\t\t\t\tid = n;\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t$io = $('<iframe name=\"' + id + '\" src=\"' + s.iframeSrc + '\" />', ownerDocument);\n\t\t\t\t$io.css({position: 'absolute', top: '-1000px', left: '-1000px'});\n\t\t\t}\n\t\t\tio = $io[0];\n\n\n\t\t\txhr = { // mock object\n\t\t\t\taborted               : 0,\n\t\t\t\tresponseText          : null,\n\t\t\t\tresponseXML           : null,\n\t\t\t\tstatus                : 0,\n\t\t\t\tstatusText            : 'n/a',\n\t\t\t\tgetAllResponseHeaders : function() {},\n\t\t\t\tgetResponseHeader     : function() {},\n\t\t\t\tsetRequestHeader      : function() {},\n\t\t\t\tabort                 : function(status) {\n\t\t\t\t\tvar e = (status === 'timeout' ? 'timeout' : 'aborted');\n\n\t\t\t\t\tlog('aborting upload... ' + e);\n\t\t\t\t\tthis.aborted = 1;\n\n\t\t\t\t\ttry { // #214, #257\n\t\t\t\t\t\tif (io.contentWindow.document.execCommand) {\n\t\t\t\t\t\t\tio.contentWindow.document.execCommand('Stop');\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (ignore) {}\n\n\t\t\t\t\t$io.attr('src', s.iframeSrc); // abort op in progress\n\t\t\t\t\txhr.error = e;\n\t\t\t\t\tif (s.error) {\n\t\t\t\t\t\ts.error.call(s.context, xhr, e, status);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (g) {\n\t\t\t\t\t\t$.event.trigger('ajaxError', [xhr, s, e]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (s.complete) {\n\t\t\t\t\t\ts.complete.call(s.context, xhr, e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tg = s.global;\n\t\t\t// trigger ajax global events so that activity/block indicators work like normal\n\t\t\tif (g && $.active++ === 0) {\n\t\t\t\t$.event.trigger('ajaxStart');\n\t\t\t}\n\t\t\tif (g) {\n\t\t\t\t$.event.trigger('ajaxSend', [xhr, s]);\n\t\t\t}\n\n\t\t\tif (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {\n\t\t\t\tif (s.global) {\n\t\t\t\t\t$.active--;\n\t\t\t\t}\n\t\t\t\tdeferred.reject();\n\n\t\t\t\treturn deferred;\n\t\t\t}\n\n\t\t\tif (xhr.aborted) {\n\t\t\t\tdeferred.reject();\n\n\t\t\t\treturn deferred;\n\t\t\t}\n\n\t\t\t// add submitting element to data if we know it\n\t\t\tsub = form.clk;\n\t\t\tif (sub) {\n\t\t\t\tn = sub.name;\n\t\t\t\tif (n && !sub.disabled) {\n\t\t\t\t\ts.extraData = s.extraData || {};\n\t\t\t\t\ts.extraData[n] = sub.value;\n\t\t\t\t\tif (sub.type === 'image') {\n\t\t\t\t\t\ts.extraData[n + '.x'] = form.clk_x;\n\t\t\t\t\t\ts.extraData[n + '.y'] = form.clk_y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar CLIENT_TIMEOUT_ABORT = 1;\n\t\t\tvar SERVER_ABORT = 2;\n\n\t\t\tfunction getDoc(frame) {\n\t\t\t\t/* it looks like contentWindow or contentDocument do not\n\t\t\t\t * carry the protocol property in ie8, when running under ssl\n\t\t\t\t * frame.document is the only valid response document, since\n\t\t\t\t * the protocol is know but not on the other two objects. strange?\n\t\t\t\t * \"Same origin policy\" http://en.wikipedia.org/wiki/Same_origin_policy\n\t\t\t\t */\n\n\t\t\t\tvar doc = null;\n\n\t\t\t\t// IE8 cascading access check\n\t\t\t\ttry {\n\t\t\t\t\tif (frame.contentWindow) {\n\t\t\t\t\t\tdoc = frame.contentWindow.document;\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// IE8 access denied under ssl & missing protocol\n\t\t\t\t\tlog('cannot get iframe.contentWindow document: ' + err);\n\t\t\t\t}\n\n\t\t\t\tif (doc) { // successful getting content\n\t\t\t\t\treturn doc;\n\t\t\t\t}\n\n\t\t\t\ttry { // simply checking may throw in ie8 under ssl or mismatched protocol\n\t\t\t\t\tdoc = frame.contentDocument ? frame.contentDocument : frame.document;\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// last attempt\n\t\t\t\t\tlog('cannot get iframe.contentDocument: ' + err);\n\t\t\t\t\tdoc = frame.document;\n\t\t\t\t}\n\n\t\t\t\treturn doc;\n\t\t\t}\n\n\t\t\t// Rails CSRF hack (thanks to Yvan Barthelemy)\n\t\t\tvar csrf_token = $('meta[name=csrf-token]').attr('content');\n\t\t\tvar csrf_param = $('meta[name=csrf-param]').attr('content');\n\n\t\t\tif (csrf_param && csrf_token) {\n\t\t\t\ts.extraData = s.extraData || {};\n\t\t\t\ts.extraData[csrf_param] = csrf_token;\n\t\t\t}\n\n\t\t\t// take a breath so that pending repaints get some cpu time before the upload starts\n\t\t\tfunction doSubmit() {\n\t\t\t\t// make sure form attrs are set\n\t\t\t\tvar t = $form.attr2('target'),\n\t\t\t\t\ta = $form.attr2('action'),\n\t\t\t\t\tmp = 'multipart/form-data',\n\t\t\t\t\tet = $form.attr('enctype') || $form.attr('encoding') || mp;\n\n\t\t\t\t// update form attrs in IE friendly way\n\t\t\t\tform.setAttribute('target', id);\n\t\t\t\tif (!method || /post/i.test(method)) {\n\t\t\t\t\tform.setAttribute('method', 'POST');\n\t\t\t\t}\n\t\t\t\tif (a !== s.url) {\n\t\t\t\t\tform.setAttribute('action', s.url);\n\t\t\t\t}\n\n\t\t\t\t// ie borks in some cases when setting encoding\n\t\t\t\tif (!s.skipEncodingOverride && (!method || /post/i.test(method))) {\n\t\t\t\t\t$form.attr({\n\t\t\t\t\t\tencoding : 'multipart/form-data',\n\t\t\t\t\t\tenctype  : 'multipart/form-data'\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// support timout\n\t\t\t\tif (s.timeout) {\n\t\t\t\t\ttimeoutHandle = setTimeout(function() {\n\t\t\t\t\t\ttimedOut = true; cb(CLIENT_TIMEOUT_ABORT);\n\t\t\t\t\t}, s.timeout);\n\t\t\t\t}\n\n\t\t\t\t// look for server aborts\n\t\t\t\tfunction checkState() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar state = getDoc(io).readyState;\n\n\t\t\t\t\t\tlog('state = ' + state);\n\t\t\t\t\t\tif (state && state.toLowerCase() === 'uninitialized') {\n\t\t\t\t\t\t\tsetTimeout(checkState, 50);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tlog('Server abort: ', e, ' (', e.name, ')');\n\t\t\t\t\t\tcb(SERVER_ABORT);\t\t\t\t// eslint-disable-line callback-return\n\t\t\t\t\t\tif (timeoutHandle) {\n\t\t\t\t\t\t\tclearTimeout(timeoutHandle);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimeoutHandle = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// add \"extra\" data to form if provided in options\n\t\t\t\tvar extraInputs = [];\n\n\t\t\t\ttry {\n\t\t\t\t\tif (s.extraData) {\n\t\t\t\t\t\tfor (var n in s.extraData) {\n\t\t\t\t\t\t\tif (s.extraData.hasOwnProperty(n)) {\n\t\t\t\t\t\t\t\t// if using the $.param format that allows for multiple values with the same name\n\t\t\t\t\t\t\t\tif ($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) {\n\t\t\t\t\t\t\t\t\textraInputs.push(\n\t\t\t\t\t\t\t\t\t$('<input type=\"hidden\" name=\"' + s.extraData[n].name + '\">', ownerDocument).val(s.extraData[n].value)\n\t\t\t\t\t\t\t\t\t\t.appendTo(form)[0]);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\textraInputs.push(\n\t\t\t\t\t\t\t\t\t$('<input type=\"hidden\" name=\"' + n + '\">', ownerDocument).val(s.extraData[n])\n\t\t\t\t\t\t\t\t\t\t.appendTo(form)[0]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!s.iframeTarget) {\n\t\t\t\t\t\t// add iframe to doc and submit the form\n\t\t\t\t\t\t$io.appendTo($body);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (io.attachEvent) {\n\t\t\t\t\t\tio.attachEvent('onload', cb);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tio.addEventListener('load', cb, false);\n\t\t\t\t\t}\n\n\t\t\t\t\tsetTimeout(checkState, 15);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tform.submit();\n\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t// just in case form has element with name/id of 'submit'\n\t\t\t\t\t\tvar submitFn = document.createElement('form').submit;\n\n\t\t\t\t\t\tsubmitFn.apply(form);\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\t\t\t\t\t// reset attrs and remove \"extra\" input elements\n\t\t\t\t\tform.setAttribute('action', a);\n\t\t\t\t\tform.setAttribute('enctype', et); // #380\n\t\t\t\t\tif (t) {\n\t\t\t\t\t\tform.setAttribute('target', t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$form.removeAttr('target');\n\t\t\t\t\t}\n\t\t\t\t\t$(extraInputs).remove();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (s.forceSync) {\n\t\t\t\tdoSubmit();\n\t\t\t} else {\n\t\t\t\tsetTimeout(doSubmit, 10); // this lets dom updates render\n\t\t\t}\n\n\t\t\tvar data, doc, domCheckCount = 50, callbackProcessed;\n\n\t\t\tfunction cb(e) {\n\t\t\t\tif (xhr.aborted || callbackProcessed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdoc = getDoc(io);\n\t\t\t\tif (!doc) {\n\t\t\t\t\tlog('cannot access response document');\n\t\t\t\t\te = SERVER_ABORT;\n\t\t\t\t}\n\t\t\t\tif (e === CLIENT_TIMEOUT_ABORT && xhr) {\n\t\t\t\t\txhr.abort('timeout');\n\t\t\t\t\tdeferred.reject(xhr, 'timeout');\n\n\t\t\t\t\treturn;\n\n\t\t\t\t} else if (e === SERVER_ABORT && xhr) {\n\t\t\t\t\txhr.abort('server abort');\n\t\t\t\t\tdeferred.reject(xhr, 'error', 'server abort');\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!doc || doc.location.href === s.iframeSrc) {\n\t\t\t\t\t// response not received yet\n\t\t\t\t\tif (!timedOut) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (io.detachEvent) {\n\t\t\t\t\tio.detachEvent('onload', cb);\n\t\t\t\t} else {\n\t\t\t\t\tio.removeEventListener('load', cb, false);\n\t\t\t\t}\n\n\t\t\t\tvar status = 'success', errMsg;\n\n\t\t\t\ttry {\n\t\t\t\t\tif (timedOut) {\n\t\t\t\t\t\tthrow 'timeout';\n\t\t\t\t\t}\n\n\t\t\t\t\tvar isXml = s.dataType === 'xml' || doc.XMLDocument || $.isXMLDoc(doc);\n\n\t\t\t\t\tlog('isXml=' + isXml);\n\n\t\t\t\t\tif (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) {\n\t\t\t\t\t\tif (--domCheckCount) {\n\t\t\t\t\t\t\t// in some browsers (Opera) the iframe DOM is not always traversable when\n\t\t\t\t\t\t\t// the onload callback fires, so we loop a bit to accommodate\n\t\t\t\t\t\t\tlog('requeing onLoad callback, DOM not available');\n\t\t\t\t\t\t\tsetTimeout(cb, 250);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// let this fall through because server response could be an empty document\n\t\t\t\t\t\t// log('Could not access iframe DOM after mutiple tries.');\n\t\t\t\t\t\t// throw 'DOMException: not available';\n\t\t\t\t\t}\n\n\t\t\t\t\t// log('response detected');\n\t\t\t\t\tvar docRoot = doc.body ? doc.body : doc.documentElement;\n\n\t\t\t\t\txhr.responseText = docRoot ? docRoot.innerHTML : null;\n\t\t\t\t\txhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;\n\t\t\t\t\tif (isXml) {\n\t\t\t\t\t\ts.dataType = 'xml';\n\t\t\t\t\t}\n\t\t\t\t\txhr.getResponseHeader = function(header){\n\t\t\t\t\t\tvar headers = {'content-type': s.dataType};\n\n\t\t\t\t\t\treturn headers[header.toLowerCase()];\n\t\t\t\t\t};\n\t\t\t\t\t// support for XHR 'status' & 'statusText' emulation :\n\t\t\t\t\tif (docRoot) {\n\t\t\t\t\t\txhr.status = Number(docRoot.getAttribute('status')) || xhr.status;\n\t\t\t\t\t\txhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar dt = (s.dataType || '').toLowerCase();\n\t\t\t\t\tvar scr = /(json|script|text)/.test(dt);\n\n\t\t\t\t\tif (scr || s.textarea) {\n\t\t\t\t\t\t// see if user embedded response in textarea\n\t\t\t\t\t\tvar ta = doc.getElementsByTagName('textarea')[0];\n\n\t\t\t\t\t\tif (ta) {\n\t\t\t\t\t\t\txhr.responseText = ta.value;\n\t\t\t\t\t\t\t// support for XHR 'status' & 'statusText' emulation :\n\t\t\t\t\t\t\txhr.status = Number(ta.getAttribute('status')) || xhr.status;\n\t\t\t\t\t\t\txhr.statusText = ta.getAttribute('statusText') || xhr.statusText;\n\n\t\t\t\t\t\t} else if (scr) {\n\t\t\t\t\t\t\t// account for browsers injecting pre around json response\n\t\t\t\t\t\t\tvar pre = doc.getElementsByTagName('pre')[0];\n\t\t\t\t\t\t\tvar b = doc.getElementsByTagName('body')[0];\n\n\t\t\t\t\t\t\tif (pre) {\n\t\t\t\t\t\t\t\txhr.responseText = pre.textContent ? pre.textContent : pre.innerText;\n\t\t\t\t\t\t\t} else if (b) {\n\t\t\t\t\t\t\t\txhr.responseText = b.textContent ? b.textContent : b.innerText;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if (dt === 'xml' && !xhr.responseXML && xhr.responseText) {\n\t\t\t\t\t\txhr.responseXML = toXml(xhr.responseText);\t\t\t// eslint-disable-line no-use-before-define\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdata = httpData(xhr, dt, s);\t\t\t\t\t\t// eslint-disable-line no-use-before-define\n\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tstatus = 'parsererror';\n\t\t\t\t\t\txhr.error = errMsg = (err || status);\n\t\t\t\t\t}\n\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlog('error caught: ', err);\n\t\t\t\t\tstatus = 'error';\n\t\t\t\t\txhr.error = errMsg = (err || status);\n\t\t\t\t}\n\n\t\t\t\tif (xhr.aborted) {\n\t\t\t\t\tlog('upload aborted');\n\t\t\t\t\tstatus = null;\n\t\t\t\t}\n\n\t\t\t\tif (xhr.status) { // we've set xhr.status\n\t\t\t\t\tstatus = ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304) ? 'success' : 'error';\n\t\t\t\t}\n\n\t\t\t\t// ordering of these callbacks/triggers is odd, but that's how $.ajax does it\n\t\t\t\tif (status === 'success') {\n\t\t\t\t\tif (s.success) {\n\t\t\t\t\t\ts.success.call(s.context, data, 'success', xhr);\n\t\t\t\t\t}\n\n\t\t\t\t\tdeferred.resolve(xhr.responseText, 'success', xhr);\n\n\t\t\t\t\tif (g) {\n\t\t\t\t\t\t$.event.trigger('ajaxSuccess', [xhr, s]);\n\t\t\t\t\t}\n\n\t\t\t\t} else if (status) {\n\t\t\t\t\tif (typeof errMsg === 'undefined') {\n\t\t\t\t\t\terrMsg = xhr.statusText;\n\t\t\t\t\t}\n\t\t\t\t\tif (s.error) {\n\t\t\t\t\t\ts.error.call(s.context, xhr, status, errMsg);\n\t\t\t\t\t}\n\t\t\t\t\tdeferred.reject(xhr, 'error', errMsg);\n\t\t\t\t\tif (g) {\n\t\t\t\t\t\t$.event.trigger('ajaxError', [xhr, s, errMsg]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (g) {\n\t\t\t\t\t$.event.trigger('ajaxComplete', [xhr, s]);\n\t\t\t\t}\n\n\t\t\t\tif (g && !--$.active) {\n\t\t\t\t\t$.event.trigger('ajaxStop');\n\t\t\t\t}\n\n\t\t\t\tif (s.complete) {\n\t\t\t\t\ts.complete.call(s.context, xhr, status);\n\t\t\t\t}\n\n\t\t\t\tcallbackProcessed = true;\n\t\t\t\tif (s.timeout) {\n\t\t\t\t\tclearTimeout(timeoutHandle);\n\t\t\t\t}\n\n\t\t\t\t// clean up\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tif (!s.iframeTarget) {\n\t\t\t\t\t\t$io.remove();\n\t\t\t\t\t} else { // adding else to clean up existing iframe response.\n\t\t\t\t\t\t$io.attr('src', s.iframeSrc);\n\t\t\t\t\t}\n\t\t\t\t\txhr.responseXML = null;\n\t\t\t\t}, 100);\n\t\t\t}\n\n\t\t\tvar toXml = $.parseXML || function(s, doc) { // use parseXML if available (jQuery 1.5+)\n\t\t\t\tif (window.ActiveXObject) {\n\t\t\t\t\tdoc = new ActiveXObject('Microsoft.XMLDOM');\n\t\t\t\t\tdoc.async = 'false';\n\t\t\t\t\tdoc.loadXML(s);\n\n\t\t\t\t} else {\n\t\t\t\t\tdoc = (new DOMParser()).parseFromString(s, 'text/xml');\n\t\t\t\t}\n\n\t\t\t\treturn (doc && doc.documentElement && doc.documentElement.nodeName !== 'parsererror') ? doc : null;\n\t\t\t};\n\t\t\tvar parseJSON = $.parseJSON || function(s) {\n\t\t\t\t/* jslint evil:true */\n\t\t\t\treturn window['eval']('(' + s + ')');\t\t\t// eslint-disable-line dot-notation\n\t\t\t};\n\n\t\t\tvar httpData = function(xhr, type, s) { // mostly lifted from jq1.4.4\n\n\t\t\t\tvar ct = xhr.getResponseHeader('content-type') || '',\n\t\t\t\t\txml = ((type === 'xml' || !type) && ct.indexOf('xml') >= 0),\n\t\t\t\t\tdata = xml ? xhr.responseXML : xhr.responseText;\n\n\t\t\t\tif (xml && data.documentElement.nodeName === 'parsererror') {\n\t\t\t\t\tif ($.error) {\n\t\t\t\t\t\t$.error('parsererror');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (s && s.dataFilter) {\n\t\t\t\t\tdata = s.dataFilter(data, type);\n\t\t\t\t}\n\t\t\t\tif (typeof data === 'string') {\n\t\t\t\t\tif ((type === 'json' || !type) && ct.indexOf('json') >= 0) {\n\t\t\t\t\t\tdata = parseJSON(data);\n\t\t\t\t\t} else if ((type === 'script' || !type) && ct.indexOf('javascript') >= 0) {\n\t\t\t\t\t\t$.globalEval(data);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t};\n\n\t\t\treturn deferred;\n\t\t}\n\t};\n\n\t/**\n\t * ajaxForm() provides a mechanism for fully automating form submission.\n\t *\n\t * The advantages of using this method instead of ajaxSubmit() are:\n\t *\n\t * 1: This method will include coordinates for <input type=\"image\"> elements (if the element\n\t *\tis used to submit the form).\n\t * 2. This method will include the submit element's name/value data (for the element that was\n\t *\tused to submit the form).\n\t * 3. This method binds the submit() method to the form for you.\n\t *\n\t * The options argument for ajaxForm works exactly as it does for ajaxSubmit. ajaxForm merely\n\t * passes the options argument along after properly binding events for submit elements and\n\t * the form itself.\n\t */\n\t$.fn.ajaxForm = function(options, data, dataType, onSuccess) {\n\t\tif (typeof options === 'string' || (options === false && arguments.length > 0)) {\n\t\t\toptions = {\n\t\t\t\t'url'      : options,\n\t\t\t\t'data'     : data,\n\t\t\t\t'dataType' : dataType\n\t\t\t};\n\n\t\t\tif (typeof onSuccess === 'function') {\n\t\t\t\toptions.success = onSuccess;\n\t\t\t}\n\t\t}\n\n\t\toptions = options || {};\n\t\toptions.delegation = options.delegation && $.isFunction($.fn.on);\n\n\t\t// in jQuery 1.3+ we can fix mistakes with the ready state\n\t\tif (!options.delegation && this.length === 0) {\n\t\t\tvar o = {s: this.selector, c: this.context};\n\n\t\t\tif (!$.isReady && o.s) {\n\t\t\t\tlog('DOM not ready, queuing ajaxForm');\n\t\t\t\t$(function() {\n\t\t\t\t\t$(o.s, o.c).ajaxForm(options);\n\t\t\t\t});\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\t// is your DOM ready?  http://docs.jquery.com/Tutorials:Introducing_$(document).ready()\n\t\t\tlog('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)'));\n\n\t\t\treturn this;\n\t\t}\n\n\t\tif (options.delegation) {\n\t\t\t$(document)\n\t\t\t\t.off('submit.form-plugin', this.selector, doAjaxSubmit)\n\t\t\t\t.off('click.form-plugin', this.selector, captureSubmittingElement)\n\t\t\t\t.on('submit.form-plugin', this.selector, options, doAjaxSubmit)\n\t\t\t\t.on('click.form-plugin', this.selector, options, captureSubmittingElement);\n\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this.ajaxFormUnbind()\n\t\t\t.on('submit.form-plugin', options, doAjaxSubmit)\n\t\t\t.on('click.form-plugin', options, captureSubmittingElement);\n\t};\n\n\t// private event handlers\n\tfunction doAjaxSubmit(e) {\n\t\t/* jshint validthis:true */\n\t\tvar options = e.data;\n\n\t\tif (!e.isDefaultPrevented()) { // if event has been canceled, don't proceed\n\t\t\te.preventDefault();\n\t\t\t$(e.target).closest('form').ajaxSubmit(options); // #365\n\t\t}\n\t}\n\n\tfunction captureSubmittingElement(e) {\n\t\t/* jshint validthis:true */\n\t\tvar target = e.target;\n\t\tvar $el = $(target);\n\n\t\tif (!$el.is('[type=submit],[type=image]')) {\n\t\t\t// is this a child element of the submit el?  (ex: a span within a button)\n\t\t\tvar t = $el.closest('[type=submit]');\n\n\t\t\tif (t.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttarget = t[0];\n\t\t}\n\n\t\tvar form = target.form;\n\n\t\tform.clk = target;\n\n\t\tif (target.type === 'image') {\n\t\t\tif (typeof e.offsetX !== 'undefined') {\n\t\t\t\tform.clk_x = e.offsetX;\n\t\t\t\tform.clk_y = e.offsetY;\n\n\t\t\t} else if (typeof $.fn.offset === 'function') {\n\t\t\t\tvar offset = $el.offset();\n\n\t\t\t\tform.clk_x = e.pageX - offset.left;\n\t\t\t\tform.clk_y = e.pageY - offset.top;\n\n\t\t\t} else {\n\t\t\t\tform.clk_x = e.pageX - target.offsetLeft;\n\t\t\t\tform.clk_y = e.pageY - target.offsetTop;\n\t\t\t}\n\t\t}\n\t\t// clear form vars\n\t\tsetTimeout(function() {\n\t\t\tform.clk = form.clk_x = form.clk_y = null;\n\t\t}, 100);\n\t}\n\n\n\t// ajaxFormUnbind unbinds the event handlers that were bound by ajaxForm\n\t$.fn.ajaxFormUnbind = function() {\n\t\treturn this.off('submit.form-plugin click.form-plugin');\n\t};\n\n\t/**\n\t * formToArray() gathers form element data into an array of objects that can\n\t * be passed to any of the following ajax functions: $.get, $.post, or load.\n\t * Each object in the array has both a 'name' and 'value' property. An example of\n\t * an array for a simple login form might be:\n\t *\n\t * [ { name: 'username', value: 'jresig' }, { name: 'password', value: 'secret' } ]\n\t *\n\t * It is this array that is passed to pre-submit callback functions provided to the\n\t * ajaxSubmit() and ajaxForm() methods.\n\t */\n\t$.fn.formToArray = function(semantic, elements, filtering) {\n\t\tvar a = [];\n\n\t\tif (this.length === 0) {\n\t\t\treturn a;\n\t\t}\n\n\t\tvar form = this[0];\n\t\tvar formId = this.attr('id');\n\t\tvar els = (semantic || typeof form.elements === 'undefined') ? form.getElementsByTagName('*') : form.elements;\n\t\tvar els2;\n\n\t\tif (els) {\n\t\t\tels = $.makeArray(els); // convert to standard array\n\t\t}\n\n\t\t// #386; account for inputs outside the form which use the 'form' attribute\n\t\t// FinesseRus: in non-IE browsers outside fields are already included in form.elements.\n\t\tif (formId && (semantic || /(Edge|Trident)\\//.test(navigator.userAgent))) {\n\t\t\tels2 = $(':input[form=\"' + formId + '\"]').get(); // hat tip @thet\n\t\t\tif (els2.length) {\n\t\t\t\tels = (els || []).concat(els2);\n\t\t\t}\n\t\t}\n\n\t\tif (!els || !els.length) {\n\t\t\treturn a;\n\t\t}\n\n\t\tif ($.isFunction(filtering)) {\n\t\t\tels = $.map(els, filtering);\n\t\t}\n\n\t\tvar i, j, n, v, el, max, jmax;\n\n\t\tfor (i = 0, max = els.length; i < max; i++) {\n\t\t\tel = els[i];\n\t\t\tn = el.name;\n\t\t\tif (!n || el.disabled) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (semantic && form.clk && el.type === 'image') {\n\t\t\t\t// handle image inputs on the fly when semantic == true\n\t\t\t\tif (form.clk === el) {\n\t\t\t\t\ta.push({name: n, value: $(el).val(), type: el.type});\n\t\t\t\t\ta.push({name: n + '.x', value: form.clk_x}, {name: n + '.y', value: form.clk_y});\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tv = $.fieldValue(el, true);\n\t\t\tif (v && v.constructor === Array) {\n\t\t\t\tif (elements) {\n\t\t\t\t\telements.push(el);\n\t\t\t\t}\n\t\t\t\tfor (j = 0, jmax = v.length; j < jmax; j++) {\n\t\t\t\t\ta.push({name: n, value: v[j]});\n\t\t\t\t}\n\n\t\t\t} else if (feature.fileapi && el.type === 'file') {\n\t\t\t\tif (elements) {\n\t\t\t\t\telements.push(el);\n\t\t\t\t}\n\n\t\t\t\tvar files = el.files;\n\n\t\t\t\tif (files.length) {\n\t\t\t\t\tfor (j = 0; j < files.length; j++) {\n\t\t\t\t\t\ta.push({name: n, value: files[j], type: el.type});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// #180\n\t\t\t\t\ta.push({name: n, value: '', type: el.type});\n\t\t\t\t}\n\n\t\t\t} else if (v !== null && typeof v !== 'undefined') {\n\t\t\t\tif (elements) {\n\t\t\t\t\telements.push(el);\n\t\t\t\t}\n\t\t\t\ta.push({name: n, value: v, type: el.type, required: el.required});\n\t\t\t}\n\t\t}\n\n\t\tif (!semantic && form.clk) {\n\t\t\t// input type=='image' are not found in elements array! handle it here\n\t\t\tvar $input = $(form.clk), input = $input[0];\n\n\t\t\tn = input.name;\n\n\t\t\tif (n && !input.disabled && input.type === 'image') {\n\t\t\t\ta.push({name: n, value: $input.val()});\n\t\t\t\ta.push({name: n + '.x', value: form.clk_x}, {name: n + '.y', value: form.clk_y});\n\t\t\t}\n\t\t}\n\n\t\treturn a;\n\t};\n\n\t/**\n\t * Serializes form data into a 'submittable' string. This method will return a string\n\t * in the format: name1=value1&amp;name2=value2\n\t */\n\t$.fn.formSerialize = function(semantic) {\n\t\t// hand off to jQuery.param for proper encoding\n\t\treturn $.param(this.formToArray(semantic));\n\t};\n\n\t/**\n\t * Serializes all field elements in the jQuery object into a query string.\n\t * This method will return a string in the format: name1=value1&amp;name2=value2\n\t */\n\t$.fn.fieldSerialize = function(successful) {\n\t\tvar a = [];\n\n\t\tthis.each(function() {\n\t\t\tvar n = this.name;\n\n\t\t\tif (!n) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar v = $.fieldValue(this, successful);\n\n\t\t\tif (v && v.constructor === Array) {\n\t\t\t\tfor (var i = 0, max = v.length; i < max; i++) {\n\t\t\t\t\ta.push({name: n, value: v[i]});\n\t\t\t\t}\n\n\t\t\t} else if (v !== null && typeof v !== 'undefined') {\n\t\t\t\ta.push({name: this.name, value: v});\n\t\t\t}\n\t\t});\n\n\t\t// hand off to jQuery.param for proper encoding\n\t\treturn $.param(a);\n\t};\n\n\t/**\n\t * Returns the value(s) of the element in the matched set. For example, consider the following form:\n\t *\n\t *\t<form><fieldset>\n\t *\t\t<input name=\"A\" type=\"text\">\n\t *\t\t<input name=\"A\" type=\"text\">\n\t *\t\t<input name=\"B\" type=\"checkbox\" value=\"B1\">\n\t *\t\t<input name=\"B\" type=\"checkbox\" value=\"B2\">\n\t *\t\t<input name=\"C\" type=\"radio\" value=\"C1\">\n\t *\t\t<input name=\"C\" type=\"radio\" value=\"C2\">\n\t *\t</fieldset></form>\n\t *\n\t *\tvar v = $('input[type=text]').fieldValue();\n\t *\t// if no values are entered into the text inputs\n\t *\tv === ['','']\n\t *\t// if values entered into the text inputs are 'foo' and 'bar'\n\t *\tv === ['foo','bar']\n\t *\n\t *\tvar v = $('input[type=checkbox]').fieldValue();\n\t *\t// if neither checkbox is checked\n\t *\tv === undefined\n\t *\t// if both checkboxes are checked\n\t *\tv === ['B1', 'B2']\n\t *\n\t *\tvar v = $('input[type=radio]').fieldValue();\n\t *\t// if neither radio is checked\n\t *\tv === undefined\n\t *\t// if first radio is checked\n\t *\tv === ['C1']\n\t *\n\t * The successful argument controls whether or not the field element must be 'successful'\n\t * (per http://www.w3.org/TR/html4/interact/forms.html#successful-controls).\n\t * The default value of the successful argument is true. If this value is false the value(s)\n\t * for each element is returned.\n\t *\n\t * Note: This method *always* returns an array. If no valid value can be determined the\n\t *\tarray will be empty, otherwise it will contain one or more values.\n\t */\n\t$.fn.fieldValue = function(successful) {\n\t\tfor (var val = [], i = 0, max = this.length; i < max; i++) {\n\t\t\tvar el = this[i];\n\t\t\tvar v = $.fieldValue(el, successful);\n\n\t\t\tif (v === null || typeof v === 'undefined' || (v.constructor === Array && !v.length)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (v.constructor === Array) {\n\t\t\t\t$.merge(val, v);\n\t\t\t} else {\n\t\t\t\tval.push(v);\n\t\t\t}\n\t\t}\n\n\t\treturn val;\n\t};\n\n\t/**\n\t * Returns the value of the field element.\n\t */\n\t$.fieldValue = function(el, successful) {\n\t\tvar n = el.name, t = el.type, tag = el.tagName.toLowerCase();\n\n\t\tif (typeof successful === 'undefined') {\n\t\t\tsuccessful = true;\n\t\t}\n\n\t\t/* eslint-disable no-mixed-operators */\n\t\tif (successful && (!n || el.disabled || t === 'reset' || t === 'button' ||\n\t\t\t(t === 'checkbox' || t === 'radio') && !el.checked ||\n\t\t\t(t === 'submit' || t === 'image') && el.form && el.form.clk !== el ||\n\t\t\ttag === 'select' && el.selectedIndex === -1)) {\n\t\t/* eslint-enable no-mixed-operators */\n\t\t\treturn null;\n\t\t}\n\n\t\tif (tag === 'select') {\n\t\t\tvar index = el.selectedIndex;\n\n\t\t\tif (index < 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar a = [], ops = el.options;\n\t\t\tvar one = (t === 'select-one');\n\t\t\tvar max = (one ? index + 1 : ops.length);\n\n\t\t\tfor (var i = (one ? index : 0); i < max; i++) {\n\t\t\t\tvar op = ops[i];\n\n\t\t\t\tif (op.selected && !op.disabled) {\n\t\t\t\t\tvar v = op.value;\n\n\t\t\t\t\tif (!v) { // extra pain for IE...\n\t\t\t\t\t\tv = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (one) {\n\t\t\t\t\t\treturn v;\n\t\t\t\t\t}\n\n\t\t\t\t\ta.push(v);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn a;\n\t\t}\n\n\t\treturn $(el).val().replace(rCRLF, '\\r\\n');\n\t};\n\n\t/**\n\t * Clears the form data. Takes the following actions on the form's input fields:\n\t *  - input text fields will have their 'value' property set to the empty string\n\t *  - select elements will have their 'selectedIndex' property set to -1\n\t *  - checkbox and radio inputs will have their 'checked' property set to false\n\t *  - inputs of type submit, button, reset, and hidden will *not* be effected\n\t *  - button elements will *not* be effected\n\t */\n\t$.fn.clearForm = function(includeHidden) {\n\t\treturn this.each(function() {\n\t\t\t$('input,select,textarea', this).clearFields(includeHidden);\n\t\t});\n\t};\n\n\t/**\n\t * Clears the selected form elements.\n\t */\n\t$.fn.clearFields = $.fn.clearInputs = function(includeHidden) {\n\t\tvar re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; // 'hidden' is not in this list\n\n\t\treturn this.each(function() {\n\t\t\tvar t = this.type, tag = this.tagName.toLowerCase();\n\n\t\t\tif (re.test(t) || tag === 'textarea') {\n\t\t\t\tthis.value = '';\n\n\t\t\t} else if (t === 'checkbox' || t === 'radio') {\n\t\t\t\tthis.checked = false;\n\n\t\t\t} else if (tag === 'select') {\n\t\t\t\tthis.selectedIndex = -1;\n\n\t\t\t} else if (t === 'file') {\n\t\t\t\tif (/MSIE/.test(navigator.userAgent)) {\n\t\t\t\t\t$(this).replaceWith($(this).clone(true));\n\t\t\t\t} else {\n\t\t\t\t\t$(this).val('');\n\t\t\t\t}\n\n\t\t\t} else if (includeHidden) {\n\t\t\t\t// includeHidden can be the value true, or it can be a selector string\n\t\t\t\t// indicating a special test; for example:\n\t\t\t\t// $('#myForm').clearForm('.special:hidden')\n\t\t\t\t// the above would clean hidden inputs that have the class of 'special'\n\t\t\t\tif ((includeHidden === true && /hidden/.test(t)) ||\n\t\t\t\t\t(typeof includeHidden === 'string' && $(this).is(includeHidden))) {\n\t\t\t\t\tthis.value = '';\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\n\t/**\n\t * Resets the form data or individual elements. Takes the following actions\n\t * on the selected tags:\n\t * - all fields within form elements will be reset to their original value\n\t * - input / textarea / select fields will be reset to their original value\n\t * - option / optgroup fields (for multi-selects) will defaulted individually\n\t * - non-multiple options will find the right select to default\n\t * - label elements will be searched against its 'for' attribute\n\t * - all others will be searched for appropriate children to default\n\t */\n\t$.fn.resetForm = function() {\n\t\treturn this.each(function() {\n\t\t\tvar el = $(this);\n\t\t\tvar tag = this.tagName.toLowerCase();\n\n\t\t\tswitch (tag) {\n\t\t\tcase 'input':\n\t\t\t\tthis.checked = this.defaultChecked;\n\t\t\t\t\t// fall through\n\n\t\t\tcase 'textarea':\n\t\t\t\tthis.value = this.defaultValue;\n\n\t\t\t\treturn true;\n\n\t\t\tcase 'option':\n\t\t\tcase 'optgroup':\n\t\t\t\tvar select = el.parents('select');\n\n\t\t\t\tif (select.length && select[0].multiple) {\n\t\t\t\t\tif (tag === 'option') {\n\t\t\t\t\t\tthis.selected = this.defaultSelected;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tel.find('option').resetForm();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tselect.resetForm();\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\tcase 'select':\n\t\t\t\tel.find('option').each(function(i) {\t\t\t\t// eslint-disable-line consistent-return\n\t\t\t\t\tthis.selected = this.defaultSelected;\n\t\t\t\t\tif (this.defaultSelected && !el[0].multiple) {\n\t\t\t\t\t\tel[0].selectedIndex = i;\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn true;\n\n\t\t\tcase 'label':\n\t\t\t\tvar forEl = $(el.attr('for'));\n\t\t\t\tvar list = el.find('input,select,textarea');\n\n\t\t\t\tif (forEl[0]) {\n\t\t\t\t\tlist.unshift(forEl[0]);\n\t\t\t\t}\n\n\t\t\t\tlist.resetForm();\n\n\t\t\t\treturn true;\n\n\t\t\tcase 'form':\n\t\t\t\t\t// guard against an input with the name of 'reset'\n\t\t\t\t\t// note that IE reports the reset function as an 'object'\n\t\t\t\tif (typeof this.reset === 'function' || (typeof this.reset === 'object' && !this.reset.nodeType)) {\n\t\t\t\t\tthis.reset();\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\tdefault:\n\t\t\t\tel.find('form,input,label,select,textarea').resetForm();\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * Enables or disables any matching elements.\n\t */\n\t$.fn.enable = function(b) {\n\t\tif (typeof b === 'undefined') {\n\t\t\tb = true;\n\t\t}\n\n\t\treturn this.each(function() {\n\t\t\tthis.disabled = !b;\n\t\t});\n\t};\n\n\t/**\n\t * Checks/unchecks any matching checkboxes or radio buttons and\n\t * selects/deselects and matching option elements.\n\t */\n\t$.fn.selected = function(select) {\n\t\tif (typeof select === 'undefined') {\n\t\t\tselect = true;\n\t\t}\n\n\t\treturn this.each(function() {\n\t\t\tvar t = this.type;\n\n\t\t\tif (t === 'checkbox' || t === 'radio') {\n\t\t\t\tthis.checked = select;\n\n\t\t\t} else if (this.tagName.toLowerCase() === 'option') {\n\t\t\t\tvar $sel = $(this).parent('select');\n\n\t\t\t\tif (select && $sel[0] && $sel[0].type === 'select-one') {\n\t\t\t\t\t// deselect all other options\n\t\t\t\t\t$sel.find('option').selected(false);\n\t\t\t\t}\n\n\t\t\t\tthis.selected = select;\n\t\t\t}\n\t\t});\n\t};\n\n\t// expose debug var\n\t$.fn.ajaxSubmit.debug = false;\n\n\t// helper fn for console logging\n\tfunction log() {\n\t\tif (!$.fn.ajaxSubmit.debug) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar msg = '[jquery.form] ' + Array.prototype.join.call(arguments, '');\n\n\t\tif (window.console && window.console.log) {\n\t\t\twindow.console.log(msg);\n\n\t\t} else if (window.opera && window.opera.postError) {\n\t\t\twindow.opera.postError(msg);\n\t\t}\n\t}\n}));\n\n\n//# sourceURL=webpack:///./.plone/++plone++static/components/jquery-form/src/jquery.form.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/autotoc/pattern.js":
/*!******************************************************!*\
  !*** ./.plone/++resource++mockup/autotoc/pattern.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* Autotoc pattern.\n *\n * Options:\n *    IDPrefix(string): Prefix used to generate ID. ('autotoc-item-')\n *    classActiveName(string): Class used for active level. ('active')\n *    classLevelPrefixName(string): Class prefix used for the TOC levels. ('autotoc-level-')\n *    classSectionName(string): Class used for section in TOC. ('autotoc-section')\n *    classTOCName(string): Class used for the TOC. ('autotoc-nav')\n *    levels(string): Selectors used to find levels. ('h1,h2,h3')\n *    scrollDuration(string): Speed of scrolling. ('slow')\n *    scrollEasing(string): Easing to use while scrolling. ('swing')\n *    section(string): Tag type to use for TOC. ('section')\n *\n * Documentation:\n *    # TOC\n *    {{ example-1 }}\n *\n *    # Tabs\n *    {{ example-2-tabs }}\n *\n * Example: example-1\n *    <div class=\"pat-autotoc\"\n *          data-pat-autotoc=\"scrollDuration:slow;levels:h4,h5,h6;\">\n *      <h4>Title 1</h4>\n *      <p>Mr. Zuckerkorn, you've been warned about touching. You said\n *         spanking. It walked on my pillow! How about a turtle? I've always\n *         loved those leathery little snappy faces.</p>\n *      <h5>Title 1.1</h5>\n *      <p>Ah coodle doodle do Caw ca caw, caw ca caw. Butterscotch!</p>\n *      <h6>Title 1.1.1</h6>\n *      <p>Want a lick? Okay, Lindsay, are you forgetting that I was\n *         a professional twice over - an analyst and a therapist.</p>\n *      <h4>Title 2</h4>\n *      <p>You boys know how to shovel coal? Don't worry, these young\n *      beauties have been nowhere near the bananas. I thought the two of\n *      us could talk man-on-man.</p>\n *    </div>\n *\n * Example: example-2-tabs\n *    <div class=\"pat-autotoc autotabs\"\n *          data-pat-autotoc=\"section:fieldset;levels:legend;\">\n *        <fieldset>\n *          <legend>Tab 1</legend>\n *          <div>\n *            Lorem ipsum dolor sit amet, ex nam odio ceteros fastidii,\n *            id porro lorem pro, homero facilisis in cum.\n *            At doming voluptua indoctum mel, natum noster similique ne mel.\n *          </div>\n *        </fieldset>\n *        <fieldset>\n *          <legend>Tab 2</legend>\n *          <div>\n *            Reque repudiare eum et. Prompta expetendis percipitur eu eam,\n *            et graece mandamus pro, eu vim harum audire tractatos.\n *            Ad perpetua salutandi mea, soluta delicata aliquando eam ne.\n *            Qui nostrum lucilius perpetua ut, eum suas stet oblique ut.\n *          </div>\n *        </fieldset>\n *        <fieldset>\n *          <legend>Tab 3</legend>\n *          <div>\n *            Vis mazim harum deterruisset ex, duo nemore nostro civibus ad,\n *            eros vituperata id cum. Vim at erat solet soleat,\n *            eum et iuvaret luptatum, pro an esse dolorum maiestatis.\n *          </div>\n *        </fieldset>\n *    </div>\n *\n */\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! pat-base */ \"./.plone/++plone++static/components/patternslib/src/core/base.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, Base) {\n  'use strict';\n\n  var AutoTOC = Base.extend({\n    name: 'autotoc',\n    trigger: '.pat-autotoc',\n    parser: 'mockup',\n    defaults: {\n      section: 'section',\n      levels: 'h1,h2,h3',\n      IDPrefix: 'autotoc-item-',\n      classTOCName: 'autotoc-nav',\n      classSectionName: 'autotoc-section',\n      classLevelPrefixName: 'autotoc-level-',\n      classActiveName: 'active',\n      scrollDuration: 'slow',\n      scrollEasing: 'swing'\n    },\n    init: function() {\n      var self = this;\n\n      self.$toc = $('<nav/>').addClass(self.options.classTOCName);\n\n      if (self.options.prependTo) {\n        self.$toc.prependTo(self.options.prependTo);\n      } else if (self.options.appendTo) {\n        self.$toc.appendTo(self.options.appendTo);\n      } else {\n        self.$toc.prependTo(self.$el);\n      }\n\n      if (self.options.className) {\n        self.$el.addClass(self.options.className);\n      }\n\n      $(self.options.section, self.$el).addClass(self.options.classSectionName);\n\n      var asTabs = self.$el.hasClass('autotabs');\n\n      var activeId = null;\n\n      $(self.options.levels, self.$el).each(function(i) {\n        var $level = $(this),\n            id = $level.prop('id') ? $level.prop('id') :\n                 $level.parents(self.options.section).prop('id');\n        if (!id || $('#' + id).length > 0) {\n          id = self.options.IDPrefix + self.name + '-' + i;\n        }\n        if(window.location.hash === '#' + id){\n          activeId = id;\n        }\n        if(activeId===null && $level.hasClass(self.options.classActiveName)){\n          activeId = id;\n        }\n        $level.data('navref', id);\n        $('<a/>')\n          .appendTo(self.$toc)\n          .text($level.text())\n          .attr('id', id)\n          .attr('href', '#' + id)\n          .addClass(self.options.classLevelPrefixName + self.getLevel($level))\n          .on('click', function(e, options) {\n            e.stopPropagation();\n            e.preventDefault();\n            if(!options){\n              options = {\n                doScroll: true,\n                skipHash: false\n              };\n            }\n            var $el = $(this);\n            self.$toc.children('.' + self.options.classActiveName).removeClass(self.options.classActiveName);\n            self.$el.children('.' + self.options.classActiveName).removeClass(self.options.classActiveName);\n            $(e.target).addClass(self.options.classActiveName);\n            $level.parents(self.options.section).addClass(self.options.classActiveName);\n            if (options.doScroll !== false &&\n                self.options.scrollDuration &&\n                $level &&\n                !asTabs) {\n              $('body,html').animate({\n                scrollTop: $level.offset().top\n              }, self.options.scrollDuration, self.options.scrollEasing);\n            }\n            if (self.$el.parents('.plone-modal').size() !== 0) {\n              self.$el.trigger('resize.plone-modal.patterns');\n            }\n            $(this).trigger('clicked');\n            if(!options.skipHash){\n              if(window.history && window.history.pushState){\n                window.history.pushState({}, '', '#' + $el.attr('id'));\n              }\n            }\n          });\n        $level.data('autotoc-trigger-id', id);\n      });\n\n      if(activeId){\n        $('a#' + activeId).trigger('click', {\n          doScroll: true,\n          skipHash: true\n        });\n      }else{\n        self.$toc.find('a').first().trigger('click', {\n          doScroll: false,\n          skipHash: true});\n      }\n    },\n    getLevel: function($el) {\n      var elementLevel = 0;\n      $.each(this.options.levels.split(','), function(level, levelSelector) {\n        if ($el.filter(levelSelector).size() === 1) {\n          elementLevel = level + 1;\n          return false;\n        }\n      });\n      return elementLevel;\n    }\n  });\n\n  return AutoTOC;\n\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/autotoc/pattern.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/modal/pattern.js":
/*!****************************************************!*\
  !*** ./.plone/++resource++mockup/modal/pattern.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* Modal pattern.\n *\n * Options:\n *    height(string): Set the height of the modal, for example: 250px ('')\n *    width(string): Set the width of the modal, for example: 80% or 500px. ('')\n *    margin(function or integer): A function, Integer or String which will be used to set the margin of the modal in pixels. If a function is passed it must return an Integer. (20)\n *    position(string): Position the modal relative to the window with the format: \"<horizontal> <vertical>\" -- allowed values: top, bottom, left, right, center, middle. ('center middle')\n *    triggers(array): Add event listeners to elements on the page which will open the modal when triggered. Pass an Array of strings with the format [\"&lt;event&gt; &lt;selector&gt;\"] or [\"&lt;event&gt;\"]. For example, [\"click .someButton\"]. If you pass in only an event such as, [\"change\"], the event listener will be added to the element on which the modal was initiated, usually a link or button. ([])\n *    title(string): A string to place in the modal header. If title is provided, titleSelector is not used. (null)\n *    titleSelector(string): Selector for an element to extract from the content provided to the modal and place in the modal header. ('h1:first')\n *    content(string): Selector for an element within the content provided to the modal to use as the modal body. ('#content')\n *    prependContent(string): Selector for elements within the content provided to the modal which will be collected and inserted, by default above, the modal content. This is useful for extracting things like alerts or status messages on forms and displaying them to the user after an AJAX response. ('.portalMessage')\n *    backdrop(string): Selector for the element upon which the Backdrop pattern should be initiated. The Backdrop is a full width mask that will be apply above the content behind the modal which is useful for highlighting the modal dialog to the user. ('body')\n *    backdropOptions(object): Look at options at backdrop pattern. ({ zIndex: \"1040\", opacity: \"0.8\", className: \"backdrop\", classActiveName: \"backdrop-active\", closeOnEsc: true, closeOnClick: true })\n *    buttons(string): Selector for matching elements, usually buttons, inputs or links, from the modal content to place in the modal footer. The original elements in the content will be hidden. ('.formControls > input[type=\"submit\"]')\n *    automaticallyAddButtonActions(boolean): Automatically create actions for elements matched with the buttons selector. They will use the options provided in actionOptions. (true)\n *    loadLinksWithinModal(boolean): Automatically load links inside of the modal using AJAX. (true)\n *    actionOptions(object): A hash of selector to options. Where options can include any of the defaults from actionOptions. Allows for the binding of events to elements in the content and provides options for handling ajax requests and displaying them in the modal. ({})\n *\n *\n * Documentation:\n *    # Example\n *\n *    {{ example-basic }}\n *\n *    {{ example-long }}\n *\n *    {{ example-tinymce }}\n *\n *\n * Example: example-basic\n *    <a href=\"#modal1\" class=\"plone-btn plone-btn-large plone-btn-primary pat-plone-modal\"\n *                      data-pat-plone-modal=\"width: 400\">Modal basic</a>\n *    <div id=\"modal1\" style=\"display: none\">\n *      <h1>Basic modal!</h1>\n *      <p>Indeed. Whoa whoa whoa whoa. Wait.</p>\n *    </div>\n *\n * Example: example-long\n *    <a href=\"#modal2\" class=\"plone-btn plone-btn-lg plone-btn-primary pat-plone-modal\"\n *                      data-pat-plone-modal=\"width: 500\">Modal long scrolling</a>\n *    <div id=\"modal2\" style=\"display: none\">\n *      <h1>Basic with scrolling</h1>\n *      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</p>\n *      <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />\n *      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</p>\n *      <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />\n *      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</p>\n *      <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />\n *      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</p>\n *      <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />\n *      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</p>\n *      <br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />\n *      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</p>\n *    </div>\n *\n *\n * Example: example-tinymce\n *    <a href=\"#modaltinymce\" class=\"btn btn-lg btn-primary pat-plone-modal\"\n *       data-pat-plone-modal=\"height: 600px;\n *                       width: 80%\">\n *       Modal with TinyMCE</a>\n *    <div id=\"modaltinymce\" style=\"display:none\">\n *      <textarea class=\"pat-tinymce\"></textarea>\n *    </div>\n *\n */\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! underscore */ \"./.plone/++plone++static/components/underscore/underscore.js\"),\n  __webpack_require__(/*! pat-base */ \"./.plone/++plone++static/components/patternslib/src/core/base.js\"),\n  __webpack_require__(/*! mockup-patterns-backdrop */ \"./.plone/++resource++mockup/backdrop/pattern.js\"),\n  __webpack_require__(/*! pat-registry */ \"./.plone/++plone++static/components/patternslib/src/core/registry.js\"),\n  __webpack_require__(/*! mockup-router */ \"./.plone/++resource++mockupjs/router.js\"),\n  __webpack_require__(/*! mockup-utils */ \"./.plone/++resource++mockupjs/utils.js\"),\n  __webpack_require__(/*! translate */ \"./.plone/++resource++mockupjs/i18n-wrapper.js\"),\n  __webpack_require__(/*! jquery.form */ \"./.plone/++plone++static/components/jquery-form/src/jquery.form.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, _, Base, Backdrop, registry, Router, utils, _t) {\n  'use strict';\n\n  var Modal = Base.extend({\n    name: 'plone-modal',\n    trigger: '.pat-plone-modal',\n    parser: 'mockup',\n    createModal: null,\n    $model: null,\n    defaults: {\n      width: '',\n      height: '',\n      margin: 20,\n      position: 'center middle', // format: '<horizontal> <vertical>' -- allowed values: top, bottom, left, right, center, middle\n      triggers: [],\n      zIndexSelector: '.plone-modal-wrapper,.plone-modal-backdrop',\n      backdrop: 'body', // Element to initiate the Backdrop on.\n      backdropOptions: {\n        zIndex: '1040',\n        opacity: '0.85',\n        className: 'plone-modal-backdrop',\n        classActiveName: 'plone-backdrop-active',\n        closeOnEsc: true,\n        closeOnClick: true\n      },\n      title: null,\n      titleSelector: 'h1:first',\n      buttons: '.formControls > input[type=\"submit\"]',\n      content: '#content',\n      automaticallyAddButtonActions: true,\n      loadLinksWithinModal: true,\n      prependContent: '.portalMessage',\n      templateOptions: {\n        className: 'plone-modal fade',\n        classDialog: 'plone-modal-dialog',\n        classModal: 'plone-modal-content',\n        classHeaderName: 'plone-modal-header',\n        classBodyName: 'plone-modal-body',\n        classFooterName: 'plone-modal-footer',\n        classWrapperName: 'plone-modal-wrapper',\n        classWrapperInnerName: 'modal-wrapper-inner',\n        classActiveName: 'in',\n        classPrependName: '', // String, css class to be applied to the wrapper of the prepended content\n        classContentName: '',  // String, class name to be applied to the content of the modal, useful for modal specific styling\n        template: '' +\n          '<div class=\"<%= options.className %>\">' +\n          '  <div class=\"<%= options.classDialog %>\">' +\n          '    <div class=\"<%= options.classModal %>\">' +\n          '      <div class=\"<%= options.classHeaderName %>\">' +\n          '        <a class=\"plone-modal-close\">&times;</a>' +\n          '        <% if (title) { %><h2 class=\"plone-modal-title\"><%= title %></h2><% } %>' +\n          '      </div>' +\n          '      <div class=\"<%= options.classBodyName %>\">' +\n          '        <div class=\"<%= options.classPrependName %>\"><%= prepend %></div> ' +\n          '        <div class=\"<%= options.classContentName %>\"><%= content %></div>' +\n          '      </div>' +\n          '      <div class=\"<%= options.classFooterName %>\"> ' +\n          '        <% if (buttons) { %><%= buttons %><% } %>' +\n          '      </div>' +\n          '    </div>' +\n          '  </div>' +\n          '</div>'\n      },\n      actions: {},\n      actionOptions: {\n        eventType: 'click',\n        disableAjaxFormSubmit: false,\n        target: null,\n        ajaxUrl: null, // string, or function($el, options) that returns a string\n        modalFunction: null, // String, function name on self to call\n        isForm: false,\n        timeout: 5000,\n        displayInModal: true,\n        reloadWindowOnClose: true,\n        error: '.portalMessage.error',\n        formFieldError: '.field.error',\n        onSuccess: null,\n        onError: null,\n        onFormError: null,\n        onTimeout: null,\n        redirectOnResponse: false,\n        redirectToUrl: function($action, response, options) {\n          var reg;\n          reg = /<body.*data-view-url=[\\\"'](.*)[\\\"'].*/im.exec(response);\n          if (reg && reg.length > 1) {\n            // view url as data attribute on body (Plone 5)\n            return reg[1].split('\"')[0];\n          }\n          reg = /<body.*data-base-url=[\\\"'](.*)[\\\"'].*/im.exec(response);\n          if (reg && reg.length > 1) {\n            // Base url as data attribute on body (Plone 5)\n            return reg[1].split('\"')[0];\n          }\n          reg = /<base.*href=[\\\"'](.*)[\\\"'].*/im.exec(response);\n          if (reg && reg.length > 1) {\n              // base tag available (Plone 4)\n              return reg[1];\n          }\n          return '';\n        }\n      },\n      routerOptions: {\n        id: null,\n        pathExp: null\n      },\n      form: function(actions) {\n        var self = this;\n        var $modal = self.$modal;\n\n        if (self.options.automaticallyAddButtonActions) {\n          actions[self.options.buttons] = {};\n        }\n        actions.a = {};\n\n        $.each(actions, function(action, options) {\n          var actionKeys = _.union(_.keys(self.options.actionOptions), ['templateOptions']);\n          var actionOptions = $.extend(true, {}, self.options.actionOptions, _.pick(options, actionKeys));\n          options.templateOptions = $.extend(true, options.templateOptions, self.options.templateOptions);\n\n          var patternKeys = _.union(_.keys(self.options.actionOptions), ['actions', 'actionOptions']);\n          var patternOptions = $.extend(true, _.omit(options, patternKeys), self.options);\n\n          $(action, $('.' + options.templateOptions.classBodyName, $modal)).each(function(action) {\n            var $action = $(this);\n            $action.on(actionOptions.eventType, function(e) {\n              e.stopPropagation();\n              e.preventDefault();\n\n              self.loading.show(false);\n\n              // handle event on $action using a function on self\n              if (actionOptions.modalFunction !== null) {\n                self[actionOptions.modalFunction]();\n              // handle event on input/button using jquery.form library\n              } else if ($.nodeName($action[0], 'input') || $.nodeName($action[0], 'button') || options.isForm === true) {\n                self.options.handleFormAction.apply(self, [$action, actionOptions, patternOptions]);\n              // handle event on link with jQuery.ajax\n              } else if (options.ajaxUrl !== null || $.nodeName($action[0], 'a')) {\n                self.options.handleLinkAction.apply(self, [$action, actionOptions, patternOptions]);\n              }\n\n            });\n          });\n        });\n      },\n      handleFormAction: function($action, options, patternOptions) {\n        var self = this;\n\n        // pass action that was clicked when submiting form\n        var extraData = {};\n        extraData[$action.attr('name')] = $action.attr('value');\n\n        var $form;\n\n        if ($.nodeName($action[0], 'form')) {\n          $form = $action;\n        } else {\n          $form = $action.parents('form:not(.disableAutoSubmit)');\n        }\n\n        var url;\n        if (options.ajaxUrl !== null) {\n          if (typeof options.ajaxUrl === 'function') {\n            url = options.ajaxUrl.apply(self, [$action, options]);\n          } else {\n            url = options.ajaxUrl;\n          }\n        } else {\n          url = $action.parents('form').attr('action');\n        }\n\n        if(options.disableAjaxFormSubmit){\n          if($action.attr('name') && $action.attr('value')){\n            $form.append($('<input type=\"hidden\" name=\"' + $action.attr('name') + '\" value=\"' + $action.attr('value') + '\" />'));\n          }\n          $form.trigger('submit');\n          return;\n        }\n        // We want to trigger the form submit event but NOT use the default\n        $form.on('submit', function(e) {\n          e.preventDefault();\n        });\n        $form.trigger('submit');\n\n        self.loading.show(false);\n        $form.ajaxSubmit({\n          timeout: options.timeout,\n          data: extraData,\n          url: url,\n          error: function(xhr, textStatus, errorStatus) {\n            self.loading.hide();\n            if (textStatus === 'timeout' && options.onTimeout) {\n              options.onTimeout.apply(self, xhr, errorStatus);\n            // on \"error\", \"abort\", and \"parsererror\"\n            } else if (options.onError) {\n              options.onError(xhr, textStatus, errorStatus);\n            } else {\n              // window.alert(_t('There was an error submitting the form.'));\n              console.log('error happened do something');\n            }\n            self.emit('formActionError', [xhr, textStatus, errorStatus]);\n          },\n          success: function(response, state, xhr, form) {\n            self.loading.hide();\n            // if error is found (NOTE: check for both the portal errors\n            // and the form field-level errors)\n            if ($(options.error, response).size() !== 0 ||\n                $(options.formFieldError, response).size() !== 0) {\n              if (options.onFormError) {\n                options.onFormError(self, response, state, xhr, form);\n              } else {\n                self.redraw(response, patternOptions);\n              }\n              return;\n            }\n\n            if (options.redirectOnResponse === true) {\n              if (typeof options.redirectToUrl === 'function') {\n                window.parent.location.href = options.redirectToUrl.apply(self, [$action, response, options]);\n              } else {\n                window.parent.location.href = options.redirectToUrl;\n              }\n              return; // cut out right here since we're changing url\n            }\n\n            if (options.onSuccess) {\n              options.onSuccess(self, response, state, xhr, form);\n            }\n\n            if (options.displayInModal === true) {\n              self.redraw(response, patternOptions);\n            } else {\n              $action.trigger('destroy.plone-modal.patterns');\n              // also calls hide\n              if (options.reloadWindowOnClose) {\n                self.reloadWindow();\n              }\n            }\n            self.emit('formActionSuccess', [response, state, xhr, form]);\n          }\n        });\n      },\n      handleLinkAction: function($action, options, patternOptions) {\n        var self = this;\n        var url;\n\n        // Figure out URL\n        if (options.ajaxUrl) {\n          if (typeof options.ajaxUrl === 'function') {\n            url = options.ajaxUrl.apply(self, [$action, options]);\n          } else {\n            url = options.ajaxUrl;\n          }\n        } else {\n          url = $action.attr('href');\n        }\n\n        // Non-ajax link (I know it says \"ajaxUrl\" ...)\n        if (options.displayInModal === false) {\n          if($action.attr('target') === '_blank'){\n            window.open(url, '_blank');\n            self.loading.hide();\n          }else{\n            window.location = url;\n          }\n          return;\n        }\n\n        // ajax version\n        $.ajax({\n          url: url\n        }).fail(function(xhr, textStatus, errorStatus) {\n          if (textStatus === 'timeout' && options.onTimeout) {\n            options.onTimeout(self.$modal, xhr, errorStatus);\n\n          // on \"error\", \"abort\", and \"parsererror\"\n          } else if (options.onError) {\n            options.onError(xhr, textStatus, errorStatus);\n          } else {\n            window.alert(_t('There was an error loading modal.'));\n          }\n          self.emit('linkActionError', [xhr, textStatus, errorStatus]);\n        }).done(function(response, state, xhr) {\n          self.redraw(response, patternOptions);\n          if (options.onSuccess) {\n            options.onSuccess(self, response, state, xhr);\n          }\n          self.emit('linkActionSuccess', [response, state, xhr]);\n        }).always(function(){\n          self.loading.hide();\n        });\n      },\n      render: function(options) {\n        var self = this;\n\n        self.emit('before-render');\n\n        if (!self.$raw) {\n          return;\n        }\n        var $raw = self.$raw.clone();\n        // fix for IE9 bug (see http://bugs.jquery.com/ticket/10550)\n        $('input:checked', $raw).each(function() {\n          if (this.setAttribute) {\n            this.setAttribute('checked', 'checked');\n          }\n        });\n\n        // Object that will be passed to the template\n        var tplObject = {\n          title: '',\n          prepend: '<div />',\n          content: '',\n          buttons: '<div class=\"pattern-modal-buttons\"></div>',\n          options: options.templateOptions\n        };\n\n        // setup the Title\n        if (options.title === null) {\n          var $title = $(options.titleSelector, $raw);\n          tplObject.title = $title.html();\n          $(options.titleSelector, $raw).remove();\n        } else {\n          tplObject.title = options.title;\n        }\n\n        // Grab items to to insert into the prepend area\n        if (options.prependContent) {\n          tplObject.prepend = $('<div />').append($(options.prependContent, $raw).clone()).html();\n          $(options.prependContent, $raw).remove();\n        }\n\n        // Filter out the content if there is a selector provided\n        if (options.content) {\n          tplObject.content = $(options.content, $raw).html();\n        } else {\n          tplObject.content = $raw.html();\n        }\n\n        // Render html\n        self.$modal = $(_.template(self.options.templateOptions.template)(tplObject));\n        self.$modalDialog = $('> .' + self.options.templateOptions.classDialog, self.$modal);\n        self.$modalContent = $('> .' + self.options.templateOptions.classModal, self.$modalDialog);\n\n        // In most browsers, when you hit the enter key while a form element is focused\n        // the browser will trigger the form 'submit' event.  Google Chrome also does this,\n        // but not when when the default submit button is hidden with 'display: none'.\n        // The following code will work around this issue:\n        $('form', self.$modal).on ('keydown', function (event) {\n          // ignore keys which are not enter, and ignore enter inside a textarea.\n          if (event.keyCode !== 13 || event.target.nodeName === 'TEXTAREA') {\n            return;\n          }\n          event.preventDefault();\n          $('input[type=submit], button[type=submit], button:not(type)', this).eq(0).trigger('click');\n        });\n\n        // Setup buttons\n        $(options.buttons, self.$modal).each(function() {\n          var $button = $(this);\n          $button\n            .on('click', function(e) {\n              e.stopPropagation();\n              e.preventDefault();\n            })\n            .clone()\n            .appendTo($('.pattern-modal-buttons', self.$modal))\n            .off('click').on('click', function(e) {\n              e.stopPropagation();\n              e.preventDefault();\n              $button.trigger('click');\n            });\n          $button.hide();\n        });\n\n        self.emit('before-events-setup');\n\n        // Wire up events\n        $('.plone-modal-header > a.plone-modal-close, .plone-modal-footer > a.plone-modal-close', self.$modal)\n          .off('click')\n          .on('click', function(e) {\n            e.stopPropagation();\n            e.preventDefault();\n            $(e.target).trigger('destroy.plone-modal.patterns');\n          });\n\n        // form\n        if (options.form) {\n          options.form.apply(self, [options.actions]);\n        }\n\n        self.$modal\n          .addClass(self.options.templateOptions.className)\n          .on('destroy.plone-modal.patterns', function(e) {\n            e.stopPropagation();\n            self.hide();\n          })\n          .on('resize.plone-modal.patterns', function(e) {\n            e.stopPropagation();\n            e.preventDefault();\n            self.positionModal();\n          })\n          .appendTo(self.$wrapperInner);\n\n        if (self.options.loadLinksWithinModal) {\n          self.$modal.on('click', function(e) {\n            e.stopPropagation();\n            if ($.nodeName(e.target, 'a')) {\n              e.preventDefault();\n              // TODO: open links inside modal\n              // and slide modal body\n            }\n            self.$modal.trigger('modal-click');\n          });\n        }\n        self.$modal.data('pattern-' + self.name, self);\n        self.emit('after-render');\n      }\n    },\n    reloadWindow: function() {\n      window.parent.location.reload();\n    },\n    init: function() {\n      var self = this;\n      self.options.loadLinksWithinModal = $.parseJSON(self.options.loadLinksWithinModal);\n\n      // Router\n      if (self.options.routerOptions.id !== null) {\n        Router.addRoute('modal', self.options.routerOptions.id, function() {\n          this.show();\n        }, self, self.options.routerOptions.pathExp, self.options.routerOptions.expReplace);\n      }\n\n      if (self.options.backdropOptions.closeOnEsc === true) {\n        $(document).on('keydown', function(e, data) {\n          if (self.$el.is('.' + self.options.templateOptions.classActiveName)) {\n            if (e.keyCode === 27) {  // ESC key pressed\n              self.hide();\n            }\n          }\n        });\n      }\n\n\n\n\n      $(window.parent).resize(function() {\n        self.positionModal();\n      });\n\n      if (self.options.triggers) {\n        $.each(self.options.triggers, function(i, item) {\n          var e = item.substring(0, item.indexOf(' '));\n          var selector = item.substring(item.indexOf(' '), item.length);\n          $(selector || self.$el).on(e, function(e) {\n            e.stopPropagation();\n            e.preventDefault();\n            self.show();\n          });\n        });\n      }\n\n      if (self.$el.is('a')) {\n        if (self.$el.attr('href') && !self.options.image) {\n          if (!self.options.target && self.$el.attr('href').substr(0, 1) === '#') {\n            self.options.target = self.$el.attr('href');\n            self.options.content = '';\n          }\n          if (!self.options.ajaxUrl && self.$el.attr('href').substr(0, 1) !== '#') {\n            self.options.ajaxUrl = function () {\n              // Resolve ``href`` attribute later, when modal is shown.\n              return self.$el.attr('href');\n            };\n          }\n        }\n        self.$el.on('click', function(e) {\n          e.stopPropagation();\n          e.preventDefault();\n          self.show();\n        });\n      }\n      self.initModal();\n    },\n\n    createAjaxModal: function() {\n      var self = this;\n      self.emit('before-ajax');\n      self.loading.show();\n\n      var ajaxUrl = self.options.ajaxUrl;\n      if (typeof ajaxUrl === 'function') {\n        ajaxUrl = ajaxUrl.apply(self, [self.options]);\n      }\n\n      self.ajaxXHR = $.ajax({\n        url: ajaxUrl,\n        type: self.options.ajaxType\n      }).done(function(response, textStatus, xhr) {\n        self.ajaxXHR = undefined;\n        self.$raw = $('<div />').append($(utils.parseBodyTag(response)));\n        self.emit('after-ajax', self, textStatus, xhr);\n        self._show();\n      }).fail(function(xhr, textStatus, errorStatus){\n        var options = self.options.actionOptions;\n        if (textStatus === 'timeout' && options.onTimeout) {\n          options.onTimeout(self.$modal, xhr, errorStatus);\n        } else if (options.onError) {\n          options.onError(xhr, textStatus, errorStatus);\n        } else {\n          window.alert(_t('There was an error loading modal.'));\n          self.hide();\n        }\n        self.emit('linkActionError', [xhr, textStatus, errorStatus]);\n      }).always(function(){\n        self.loading.hide();\n      });\n    },\n\n    createTargetModal: function() {\n      var self = this;\n      self.$raw = $(self.options.target).clone();\n      self._show();\n    },\n\n    createBasicModal: function() {\n      var self = this;\n      self.$raw = $('<div/>').html(self.$el.clone());\n      self._show();\n    },\n\n    createHtmlModal: function() {\n      var self = this;\n      var $el = $(self.options.html);\n      self.$raw = $el;\n      self._show();\n    },\n\n    createImageModal: function(){\n      var self = this;\n      self.$wrapper.addClass('image-modal');\n      var src = self.$el.attr('href');\n      var srcset = self.$el.attr('data-modal-srcset') || '';\n      var title = $.trim(self.$el.context.innerText) || 'Image';\n      // XXX aria?\n      self.$raw = $('<div><h1>' + title + '</h1><div id=\"content\"><div class=\"modal-image\"><img src=\"' + src + '\" srcset=\"' + srcset + '\" /></div></div></div>');\n      self._show();\n    },\n\n    initModal: function() {\n      var self = this;\n      if (self.options.ajaxUrl) {\n        self.createModal = self.createAjaxModal;\n      } else if (self.options.target) {\n        self.createModal = self.createTargetModal;\n      } else if (self.options.html) {\n        self.createModal = self.createHtmlModal;\n      } else if (self.options.image){\n        self.createModal = self.createImageModal;\n      } else {\n        self.createModal = self.createBasicModal;\n      }\n    },\n\n    findPosition: function(horpos, vertpos, margin, modalWidth, modalHeight,\n                           wrapperInnerWidth, wrapperInnerHeight) {\n      var returnpos = {};\n      var absTop, absBottom, absLeft, absRight;\n      absRight = absLeft = absTop = absLeft = 'auto';\n\n      // -- HORIZONTAL POSITION -----------------------------------------------\n      if (horpos === 'left') {\n        absLeft = margin + 'px';\n        // if the width of the wrapper is smaller than the modal, and thus the\n        // screen is smaller than the modal, force the left to simply be 0\n        if (modalWidth > wrapperInnerWidth) {\n          absLeft = '0px';\n        }\n        returnpos.left = absLeft;\n      }\n      else if (horpos === 'right') {\n        absRight =  margin + 'px';\n        // if the width of the wrapper is smaller than the modal, and thus the\n        // screen is smaller than the modal, force the right to simply be 0\n        if (modalWidth > wrapperInnerWidth) {\n          absRight = '0px';\n        }\n        returnpos.right = absRight;\n        returnpos.left = 'auto';\n      }\n      // default, no specified location, is to center\n      else {\n        absLeft = ((wrapperInnerWidth / 2) - (modalWidth / 2) - margin) + 'px';\n        // if the width of the wrapper is smaller than the modal, and thus the\n        // screen is smaller than the modal, force the left to simply be 0\n        if (modalWidth > wrapperInnerWidth) {\n          absLeft = '0px';\n        }\n        returnpos.left = absLeft;\n      }\n\n      // -- VERTICAL POSITION -------------------------------------------------\n      if (vertpos === 'top') {\n        absTop = margin + 'px';\n        // if the height of the wrapper is smaller than the modal, and thus the\n        // screen is smaller than the modal, force the top to simply be 0\n        if (modalHeight > wrapperInnerHeight) {\n          absTop = '0px';\n        }\n        returnpos.top = absTop;\n      }\n      else if (vertpos === 'bottom') {\n        absBottom = margin + 'px';\n        // if the height of the wrapper is smaller than the modal, and thus the\n        // screen is smaller than the modal, force the bottom to simply be 0\n        if (modalHeight > wrapperInnerHeight) {\n          absBottom = '0px';\n        }\n        returnpos.bottom = absBottom;\n        returnpos.top = 'auto';\n      }\n      else {\n        // default case, no specified location, is to center\n        absTop = ((wrapperInnerHeight / 2) - (modalHeight / 2) - margin) + 'px';\n        // if the height of the wrapper is smaller than the modal, and thus the\n        // screen is smaller than the modal, force the top to simply be 0\n        if (modalHeight > wrapperInnerHeight) {\n          absTop = '0px';\n        }\n        returnpos.top = absTop;\n      }\n      return returnpos;\n    },\n\n    modalInitialized: function() {\n      var self = this;\n      return self.$modal !== null && self.$modal !== undefined;\n    },\n\n    positionModal: function() {\n      /* re-position modal at any point.\n       *\n       * Uses:\n       *  options.margin\n       *  options.width\n       *  options.height\n       *  options.position\n       */\n      var self = this;\n      // modal isn't initialized\n      if (!self.modalInitialized()) { return; }\n      // clear out any previously set styling\n      self.$modal.removeAttr('style');\n\n      // if backdrop wrapper is set on body, then wrapper should have height of\n      // the window, so we can do scrolling of inner wrapper\n      if (self.$wrapper.parent().is('body')) {\n        self.$wrapper.height($(window.parent).height());\n      }\n\n      var margin = typeof self.options.margin === 'function' ? self.options.margin() : self.options.margin;\n      self.$modal.css({\n        'position': 'absolute',\n        'padding': margin\n      });\n      self.$modalDialog.css({\n        margin: '0',\n        padding: '0',\n        width: self.options.width, // defaults to \"\", which doesn't override other css\n        height: self.options.height // defaults to \"\", which doesn't override other css\n      });\n      self.$modalContent.css({\n        width: self.options.width, // defaults to \"\", which doesn't override other css\n      });\n\n      var posopt = self.options.position.split(' '),\n          horpos = posopt[0],\n          vertpos = posopt[1];\n      var modalWidth = self.$modalDialog.outerWidth(true);\n      var modalHeight = self.$modalDialog.outerHeight(true);\n      var wrapperInnerWidth = self.$wrapperInner.width();\n      var wrapperInnerHeight = self.$wrapperInner.height();\n      var pos = self.findPosition(\n        horpos, vertpos, margin, modalWidth, modalHeight,\n        wrapperInnerWidth, wrapperInnerHeight\n      );\n      for (var key in pos) {\n        self.$modalDialog.css(key, pos[key]);\n      }\n    },\n\n    render: function(options) {\n      var self = this;\n      self.emit('render');\n      self.options.render.apply(self, [options]);\n      self.emit('rendered');\n    },\n\n    show: function() {\n      var self = this;\n      self.backdrop = self.createBackdrop();\n      self.createModal();\n    },\n\n    createBackdrop: function() {\n      var self = this,\n          backdrop = new Backdrop(\n            self.$el.parents(self.options.backdrop),\n            self.options.backdropOptions\n          ),\n          zIndex = 1041;\n\n      $(self.options.zIndexSelector).each(function(){\n        zIndex = Math.max(zIndex, parseInt($(this).css('zIndex')) + 1 || 1041);\n      });\n\n      self.$wrapper = $('<div/>')\n        .hide()\n        .css({\n          'z-index': zIndex,\n          'overflow-y': 'auto',\n          'position': 'fixed',\n          'height': '100%',\n          'width': '100%',\n          'bottom': '0',\n          'left': '0',\n          'right': '0',\n          'top': '0'\n        })\n        .addClass(self.options.templateOptions.classWrapperName)\n        .insertBefore(backdrop.$backdrop)\n        .on('click', function(e) {\n          if (self.options.backdropOptions.closeOnClick) {\n            e.stopPropagation();\n            e.preventDefault();\n            backdrop.hide();\n          }\n        });\n      backdrop.on('hidden', function(e) {\n        if (self.$modal !== undefined && self.$modal.hasClass(self.options.templateOptions.classActiveName)) {\n          self.hide();\n        }\n      });\n      self.loading = new utils.Loading({\n        'backdrop': backdrop\n      });\n      self.$wrapperInner = $('<div/>')\n        .addClass(self.options.classWrapperInnerName)\n        .css({\n          'position': 'absolute',\n          'bottom': '0',\n          'left': '0',\n          'right': '0',\n          'top': '0'\n        })\n        .appendTo(self.$wrapper);\n      return backdrop;\n    },\n\n    _show: function() {\n      var self = this;\n      self.render.apply(self, [ self.options ]);\n      self.emit('show');\n      self.backdrop.show();\n      self.$wrapper.show();\n      self.loading.hide();\n      self.$el.addClass(self.options.templateOptions.classActiveName);\n      self.$modal.addClass(self.options.templateOptions.classActiveName);\n      registry.scan(self.$modal);\n      self.positionModal();\n      $(window.parent).on('resize.plone-modal.patterns', function() {\n        self.positionModal();\n      });\n      $('body').addClass('plone-modal-open');\n      self.emit('shown');\n    },\n    hide: function() {\n      var self = this;\n      if (self.ajaxXHR) {\n        self.ajaxXHR.abort();\n      }\n      self.emit('hide');\n      if (self._suppressHide) {\n        if (!window.confirm(self._suppressHide)) {\n          return;\n        }\n      }\n      self.loading.hide();\n      self.$el.removeClass(self.options.templateOptions.classActiveName);\n      if (self.$modal !== undefined) {\n        self.$modal.remove();\n        self.initModal();\n      }\n      self.$wrapper.remove();\n      if ($('.plone-modal', $('body')).size() < 1) {\n        self._suppressHide = undefined;\n        self.backdrop.hide();\n        $('body').removeClass('plone-modal-open');\n        $(window.parent).off('resize.plone-modal.patterns');\n      }\n      self.emit('hidden');\n    },\n\n    redraw: function(response, options) {\n      var self = this;\n      self.emit('beforeDraw');\n      self.$modal.remove();\n      self.$raw = $('<div />').append($(utils.parseBodyTag(response)));\n      self.render.apply(self, [options || self.options]);\n      self.$modal.addClass(self.options.templateOptions.classActiveName);\n      self.positionModal();\n      registry.scan(self.$modal);\n      self.emit('afterDraw');\n    }\n  });\n\n  return Modal;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/modal/pattern.js?");

/***/ }),

/***/ "./.plone/++resource++mockupjs/router.js":
/*!***********************************************!*\
  !*** ./.plone/++resource++mockupjs/router.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* Pattern router\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! underscore */ \"./.plone/++plone++static/components/underscore/underscore.js\"),\n  __webpack_require__(/*! backbone */ \"./.plone/++plone++static/components/backbone/backbone.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function(_, Backbone) {\n  'use strict';\n\n  var regexEscape = function(s) {\n    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n  };\n\n  var Router = Backbone.Router.extend({\n    actions: [],\n    redirects: {},\n    addRoute: function(patternName, id, callback, context, pathExp, expReplace) {\n      if (_.findWhere(this.patterns, {patternName: patternName, id: id}) === undefined) {\n        this.actions.push({patternName: patternName, id: id, callback: callback, context: context, pathExp: pathExp, expReplace: expReplace});\n      }\n      var regex = new RegExp('(' + regexEscape(patternName) + ':' + regexEscape(id) + ')');\n      this.route(regex, 'handleRoute');\n    },\n    addRedirect: function(pathExp, destination) {\n      this.redirects[pathExp] = destination;\n    },\n    handleRoute: function(pattern) {\n      var parts = pattern.split(':');\n      var patternName = parts[0];\n      var id = parts[1];\n      var action = _.findWhere(this.actions, {patternName: patternName, id: id});\n      if (action) {\n        action.callback.call(action.context);\n      }\n    },\n    redirect: function() {\n      var path = window.parent.location.pathname,\n          newPath,\n          regex,\n          hash;\n\n      _.some(this.actions, function(action) {\n        if (action.pathExp) {\n          regex = new RegExp(action.pathExp);\n          if (path.match(regex)) {\n            hash = '!/' + action.patternName + ':' + action.id;\n            var replaceWith = '';\n            if (action.expReplace) {\n              replaceWith = action.expReplace;\n            }\n            newPath = path.replace(regex, replaceWith);\n            return true;\n          }\n        }\n      }, this);\n\n      if (hash === undefined) {\n        for (var pathExp in this.redirects) {\n          regex = new RegExp(pathExp);\n          if (path.match(regex)) {\n            hash = '!/' + this.redirects[pathExp];\n            newPath = path.replace(regex, '');\n            break;\n          }\n        }\n      }\n\n      if (hash !== undefined) {\n        this._changeLocation.apply(this, [newPath, hash]);\n      }\n    },\n    _changeLocation: function(path, hash) {\n      window.parent.location.hash = hash;\n      window.parent.location.pathname = path;\n    },\n    start: function() {\n      Backbone.history.start();\n    },\n    reset: function() {\n      this.actions = [];\n    }\n\n  });\n\n  return new Router();\n\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockupjs/router.js?");

/***/ })

}]);