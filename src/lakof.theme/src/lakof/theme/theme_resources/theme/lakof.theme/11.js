(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[11],{

/***/ "./.plone/++resource++mockup/relateditems/upload.js":
/*!**********************************************************!*\
  !*** ./.plone/++resource++mockup/relateditems/upload.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! underscore */ \"./.plone/++plone++static/components/underscore/underscore.js\"),\n  __webpack_require__(/*! mockup-ui-url/views/popover */ \"./.plone/++resource++mockupjs/ui/views/popover.js\"),\n  __webpack_require__(/*! mockup-patterns-upload */ \"./.plone/++resource++mockup/upload/pattern.js\"),\n  __webpack_require__(/*! mockup-utils */ \"./.plone/++resource++mockupjs/utils.js\"),\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function(_, PopoverView, Upload, utils) {\n  'use strict';\n\n  var UploadView = PopoverView.extend({\n    className: 'popover upload',\n    title: _.template('<%- _t(\"Upload files\") %>'),\n    content: _.template(\n      '<input type=\"text\" name=\"upload\" style=\"display:none\" />' +\n      '<div class=\"uploadify-me\"></div>'),\n\n    popover: undefined,\n\n    initialize: function(options) {\n      var self = this;\n      self.app = options.app;\n      PopoverView.prototype.initialize.apply(self, [options]);\n    },\n\n    render: function() {\n      var self = this;\n      self.popover = PopoverView.prototype.render.call(this);\n      var options = {};\n      options.success = function(e, response) {\n        var uid = response.UID;\n        if (uid) {\n          var query = new utils.QueryHelper({\n            vocabularyUrl: self.app.options.vocabularyUrl,\n            attributes: self.app.options.attributes\n          });\n          var result = query.search(\n              'UID',\n              'plone.app.querystring.operation.selection.is',\n              uid,\n              function (e) {\n                var data = self.app.$el.select2('data');\n                data.push.apply(data, e.results);\n                self.app.$el.select2('data', data, true);\n                self.app.emit('selected');\n                self.popover.hide();\n              },\n              false\n          );\n        }\n        // getIcon, getURL, portal_type, review_state, Title, path\n        // var itemHtml = self.applyTemplate('selection', item);\n      };\n      options.uploadMultiple = true;\n      options.allowPathSelection = false;\n      options.relativePath = 'fileUpload';\n      options.baseUrl = self.app.options.rootUrl;\n      self.upload = new Upload(self.$('.uploadify-me').addClass('pat-upload'), options);\n      return this;\n    },\n\n    toggle: function(button, e) {\n      /* we need to be able to change the current default upload directory */\n      PopoverView.prototype.toggle.apply(this, [button, e]);\n      var self = this;\n      if (!this.opened) {\n        return;\n      }\n      if (self.app.currentPath !== self.upload.currentPath) {\n        self.upload.setPath(self.app.currentPath);\n      }\n    }\n\n  });\n\n  return UploadView;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/relateditems/upload.js?");

/***/ }),

/***/ "./.plone/++resource++mockupjs/ui/views/container.js":
/*!***********************************************************!*\
  !*** ./.plone/++resource++mockupjs/ui/views/container.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! underscore */ \"./.plone/++plone++static/components/underscore/underscore.js\"),\n  __webpack_require__(/*! mockup-ui-url/views/base */ \"./.plone/++resource++mockupjs/ui/views/base.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, _, BaseView) {\n  'use strict';\n\n  var Container = BaseView.extend({\n    id: '',\n    items: [],\n    itemContainer: null,\n    isOffsetParent: true,\n    idPrefix: 'container-',\n    render: function() {\n      if (this.options.id) {\n        this.$el.attr('id', this.idPrefix + this.options.id);\n      }\n\n      this.applyTemplate();\n\n      this.renderItems();\n      this.bindEvents();\n\n      if (this.isOffsetParent) {\n        this.$el.addClass('ui-offset-parent');\n      }\n\n      this.trigger('render', this);\n\n      this.afterRender();\n\n      this.$el.data('component', this);\n      return this;\n    },\n    renderItems: function() {\n      var $container;\n\n      if (this.itemContainer !== null) {\n        $container = $(this.itemContainer, this.$el);\n        if ($container.length === 0) {\n          throw 'Item Container element not found.';\n        }\n      } else {\n        $container = this.$el;\n      }\n      _.each(this.items, function(view) {\n        if (view.appendInContainer === true) {\n          $container.append(view.render().$el);\n        } else {\n          view.render();\n        }\n      }, this);\n    },\n    bindEvents: function() {\n      var self = this;\n      _.each(this.items, function(view) {\n        view.on('all', function() {\n          var slice = [].slice;\n          var eventName = arguments[0];\n          var eventTarget;\n          var newName = self.id !== '' ? self.id + '.' + eventName : eventName;\n          if (arguments.length > 1) {\n            eventTarget = arguments[1];\n          }\n          if (newName !== eventName) {\n            var newArgs = slice.call(arguments, 0);\n            newArgs[0] = newName;\n            self.trigger.apply(self, newArgs);\n          }\n          if (eventTarget !== undefined && eventTarget.isUIView === true) {\n            if (eventTarget.propagateEvent(eventName) === true) {\n              self.trigger.apply(self, arguments);\n            }\n          }\n        });\n      });\n    },\n    get: function(id) {\n      // Remove the recursive part because it was confusing if two children had the\n      // same id\n      return _.findWhere(this.items, {'id': id});\n    },\n    add: function(item) {\n      if (item.id !== undefined && this.get(item.id)) {\n        throw 'Another item with the same `id` already exists.';\n      }\n      this.items.push(item);\n    }\n  });\n\n  return Container;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockupjs/ui/views/container.js?");

/***/ }),

/***/ "./.plone/++resource++mockupjs/ui/views/popover.js":
/*!*********************************************************!*\
  !*** ./.plone/++resource++mockupjs/ui/views/popover.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! underscore */ \"./.plone/++plone++static/components/underscore/underscore.js\"),\n  __webpack_require__(/*! mockup-ui-url/views/container */ \"./.plone/++resource++mockupjs/ui/views/container.js\"),\n  __webpack_require__(/*! mockup-patterns-backdrop */ \"./.plone/++resource++mockup/backdrop/pattern.js\"),\n  __webpack_require__(/*! text!mockup-ui-url/templates/popover.xml */ \"./node_modules/text-loader/index.js!./.plone/++resource++mockupjs/ui/templates/popover.xml\"),\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, _, ContainerView, Backdrop, PopoverTemplate) {\n  'use strict';\n\n  var PopoverView = ContainerView.extend({\n    tagName: 'div',\n    className: 'popover',\n    eventPrefix: 'popover',\n    template: PopoverTemplate,\n    content: null,\n    title: null,\n    triggerView: null,\n    idPrefix: 'popover-',\n    triggerEvents: {\n      'button:click': 'toggle'\n    },\n    placement: 'bottom',\n    events: {\n    },\n    opened: false,\n    closeOnOutClick: true,\n    appendInContainer: true,\n    backdrop: undefined,\n    $backdrop: null,\n    useBackdrop: true,\n    backdropOptions: {\n      zIndex: '1009',\n      opacity: '0.4',\n      className: 'backdrop backdrop-popover',\n      classActiveName: 'backdrop-active',\n      closeOnEsc: false,\n      closeOnClick: true\n    },\n    initialize: function(options) {\n      ContainerView.prototype.initialize.apply(this, [options]);\n      this.bindTriggerEvents();\n\n      this.on('render', function() {\n        this.$el.attr('role', 'tooltip').attr('aria-hidden', 'false');\n        this.renderTitle();\n        this.renderContent();\n      }, this);\n    },\n    afterRender: function () {\n    },\n    getTemplateOptions: function(){\n      return this.options;\n    },\n    renderTitle: function() {\n      var title = this.title;\n      if(typeof(title) === 'function'){\n        title = title(this.getTemplateOptions());\n      }\n      this.$('.popover-title').empty().append(title);\n    },\n    renderContent: function() {\n      this.$('.popover-content').empty().append(this.content(this.getTemplateOptions()));\n    },\n    bindTriggerEvents: function() {\n      if (this.triggerView) {\n        _.each(this.triggerEvents, function(func, event) {\n          var method = this[func];\n          if (!method) {\n            $.error('Function not found.');\n          }\n          this.stopListening(this.triggerView, event);\n          this.listenTo(this.triggerView, event, method);\n        }, this);\n      }\n    },\n\n    getPosition: function() {\n      var $el = this.triggerView.$el;\n      return $.extend({}, {\n        width: $el[0].offsetWidth,\n        height: $el[0].offsetHeight\n      }, $el.offset());\n    },\n\n    getBodyClassName: function(){\n      var name = 'popover-';\n      if(this.options.id){\n        name += this.options.id + '-';\n      }\n      name += 'active';\n      return name;\n    },\n\n    show: function() {\n      /* hide existing */\n      $('.popover:visible').each(function(){\n        var popover = $(this).data('component');\n        if(popover){\n          popover.hide();\n        }\n      });\n\n      this.position();\n\n      this.setBackdrop();\n      if (this.useBackdrop === true) {\n        this.backdrop.show();\n      }\n\n      this.opened = true;\n\n      if (this.triggerView) {\n        this.triggerView.$el.addClass('active');\n      }\n\n      this.uiEventTrigger('show', this);\n      this.$el.attr('aria-hidden', 'false');\n      $('body').addClass(this.getBodyClassName());\n    },\n\n    position: function(){\n      var pos = this.getPosition();\n      var $tip = this.$el, tp, placement, actualWidth, actualHeight;\n\n      placement = this.placement;\n\n      $tip.css({ top: 0, left: 0 }).addClass('active');\n\n      actualWidth = $tip[0].offsetWidth;\n      actualHeight = $tip[0].offsetHeight;\n\n      switch (placement) {\n        case 'bottom':\n          tp = {top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2};\n          break;\n        case 'top':\n          tp = {top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2};\n          break;\n        case 'left':\n          tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth};\n          break;\n        case 'right':\n          tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width};\n          break;\n      }\n\n      this.applyPlacement(tp, placement);\n    },\n\n    applyPlacement: function(offset, placement) {\n      var $el = this.$el,\n        $tip = this.$el,\n        width = $tip[0].offsetWidth,\n        height = $tip[0].offsetHeight,\n        actualWidth,\n        actualHeight,\n        delta,\n        replace;\n\n      $el.removeClass(placement);\n\n      $el.offset(offset)\n        .addClass(placement)\n        .addClass('active');\n\n      actualWidth = $tip[0].offsetWidth;\n      actualHeight = $tip[0].offsetHeight;\n\n      if (placement === 'top' && actualHeight !== height) {\n        offset.top = offset.top + height - actualHeight;\n        replace = true;\n      }\n\n      if (placement === 'bottom' || placement === 'top') {\n        delta = 0;\n\n        if (offset.left < 0) {\n          delta = offset.left * -2;\n          offset.left = 0;\n          $el.removeClass(placement);\n          $el.offset(offset).addClass(placement);\n          actualWidth = $tip[0].offsetWidth;\n          actualHeight = $tip[0].offsetHeight;\n        }\n\n        this.positionArrow(delta - width + actualWidth, actualWidth, 'left');\n\n      } else {\n        this.positionArrow(actualHeight - height, actualHeight, 'top');\n      }\n\n      if (replace) {\n        $el.offset(offset);\n      }\n    },\n    positionArrow: function(delta, dimension, position) {\n      var $arrow = this.$('.arrow');\n      $arrow.css(position, delta ? (50 * (1 - delta / dimension) + '%') : '');\n    },\n    hide: function() {\n      this.opened = false;\n      this.$el.removeClass('active');\n      if (this.triggerView) {\n        this.triggerView.$el.removeClass('active');\n        this.triggerView.$el.attr('aria-hidden', 'true');\n      }\n      this.uiEventTrigger('hide', this);\n      this.$el.attr('aria-hidden', 'true');\n      $('body').removeClass(this.getBodyClassName());\n    },\n    toggle: function(button, e) {\n      if (this.opened) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    },\n    setBackdrop: function() {\n      if (this.useBackdrop === true && this.backdrop === undefined) {\n        var self = this;\n        this.$backdrop = this.$el.closest('.ui-backdrop-element');\n        if (this.$backdrop.length === 0) {\n          this.$backdrop = $('body');\n        }\n\n        this.backdrop = new Backdrop(this.$backdrop, this.backdropOptions);\n        this.backdrop.$el.on('hidden.backdrop.patterns', function(e) {\n          if (e.namespace === 'backdrop.patterns') {\n            e.stopPropagation();\n            if (self.opened === true) {\n              self.hide();\n            }\n          }\n        });\n        this.on('popover:hide', function() {\n          this.backdrop.hide();\n        }, this);\n      }\n    }\n  });\n\n  return PopoverView;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockupjs/ui/views/popover.js?");

/***/ }),

/***/ "./node_modules/text-loader/index.js!./.plone/++resource++mockupjs/ui/templates/popover.xml":
/*!*****************************************************************************************!*\
  !*** ./node_modules/text-loader!./.plone/++resource++mockupjs/ui/templates/popover.xml ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"arrow\\\"></div>\\n<div class=\\\"popover-title\\\">\\n</div>\\n<div class=\\\"items popover-content\\\">\\n</div>\\n\\n\"\n\n//# sourceURL=webpack:///./.plone/++resource++mockupjs/ui/templates/popover.xml?./node_modules/text-loader");

/***/ })

}]);