(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[12],{

/***/ "./.plone/++plone++mosaic/js/mosaic.actions.js":
/*!*****************************************************!*\
  !*** ./.plone/++plone++mosaic/js/mosaic.actions.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * This plugin is used to register and execute actions.\n *\n * @author Rob Gietema\n * @version 0.1\n * @licstart  The following is the entire license notice for the JavaScript\n *            code in this page.\n *\n * Copyright (C) 2010 Plone Foundation\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 2 of the License.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along with\n * this program; if not, write to the Free Software Foundation, Inc., 51\n * Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * @licend  The above is the entire license notice for the JavaScript code in\n *          this page.\n */\n\n/*jslint white: true, browser: true, onevar: true, nomen: true,\neqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true,\nimmed: true, strict: true, maxlen: 140, maxerr: 9999, quotmark: false */\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! mosaic-url/mosaic.tile */ \"./.plone/++plone++mosaic/js/mosaic.tile.js\"),\n  __webpack_require__(/*! mockup-utils */ \"./.plone/++resource++mockupjs/utils.js\"),\n  __webpack_require__(/*! mockup-patterns-modal */ \"./.plone/++resource++mockup/modal/pattern.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, Tile, utils, Modal) {\n  'use strict';\n\n  // Define mosaic namespace if it doesn't exist\n  if (typeof($.mosaic) === \"undefined\") {\n    $.mosaic = {};\n  }\n\n  // Global array containing actions and shortcuts\n  $.mosaic.actionManager = {\n    actions: [],                // Array with all the actions\n    shortcuts: []               // Lookup array for shortcuts\n  };\n\n  /**\n   * Register an action\n   *\n   * @id jQuery.mosaic.registerAction\n   * @param {String} name Name of the action.\n   * @param {Object} options Object containing all the options of the action\n   */\n  $.mosaic.registerAction = function (name, options) {\n\n    // Extend default settings\n    options = $.extend({\n\n      // Handler for executing the action\n      exec: function () {\n      },\n\n      // Shortcut can be any key + ctrl/shift/alt or a combination of\n      // those\n      shortcut: {\n        ctrl: false,\n        alt: false,\n        shift: false,\n        key: \"\"\n      },\n\n      // Method to see if the actions should be visible based on the\n      // current tile state\n      visible: function (tile) {\n        return true;\n      }\n\n    }, options);\n\n    // Add action to manager\n    $.mosaic.actionManager.actions[name] = options;\n\n    // Check if shortcut is defined\n    if (options.shortcut.key !== \"\") {\n\n      // Set keyCode and charCode\n      options.shortcut.charCode = options.shortcut.key.toUpperCase()\n        .charCodeAt(0);\n      options.shortcut.action = name;\n\n      // Set shortcut\n      $.mosaic.actionManager.shortcuts.push(options.shortcut);\n    }\n  };\n\n  /**\n   * Execute an action\n   *\n   * @id jQuery.mosaicExecAction\n   * @return {Object} Returns a jQuery object of the matched elements.\n   */\n  $.fn.mosaicExecAction = function () {\n\n    // Loop through matched elements\n    return this.each(function () {\n\n      // Check if actions specified\n      if ($(this).data(\"action\") !== \"\") {\n\n        var mgr = $.mosaic.actionManager;\n\n        // Exec actions\n        mgr.actions[$(this).data(\"action\")].exec(this);\n      }\n    });\n  };\n\n  /**\n   * Remove spans inserted by webkit\n   *\n   * @id jQuery.mosaic.fixWebkitSpan\n   * @return {Object} jQuery object\n   */\n  $.mosaic.fixWebkitSpan = function () {\n    var webkit_span = $(\".Apple-style-span\", $.mosaic.document);\n    webkit_span.after(webkit_span.html());\n    webkit_span.remove();\n  };\n\n  /**\n   * Build mosaic-prefixed class name so that 'foo-bar' becomes\n   * 'mosaic-foo-bar' and 'fooBar' becomes 'mosaicFooBar'.\n   *\n   * @id jQuery.mosaic.getPrefixedClassName\n   * @name {String} class name\n   * @return {String} class name\n   */\n  $.mosaic.getPrefixedClassName = function (name) {\n    if (name.indexOf('-') > -1) {\n      // dash-spaced-class-name\n      return 'mosaic-' + name;\n    } else {\n      // camelCaseClassName\n      return 'mosaic' + name.charAt(0).toUpperCase() + name.slice(1);\n    }\n  };\n\n  /**\n   * Initialize the action manager\n   *\n   * @id jQuery.mosaic.initActions\n   */\n  $.mosaic.initActions = function () {\n\n    // Register generic re-usable toggle tile class format action\n    $.mosaic.registerAction('tile-toggle-class', {\n       exec: function () {\n         var name;\n         if (arguments.length > 0 && arguments[0].value) {\n           name = $.mosaic.getPrefixedClassName(arguments[0].value);\n           $(\".mosaic-selected-tile\", $.mosaic.document)\n             .toggleClass(name);\n         }\n       }\n     });\n\n    // Register generic re-usable toggle tile class format action\n    $.mosaic.registerAction('tile-remove-format', {\n      exec: function () {\n        var i, j, group, action, name;\n        for (i = 0; i < $.mosaic.options.formats.length; i++) {\n          group = $.mosaic.options.formats[i];\n          for (j = 0; j < group.actions.length; j++) {\n            action = group.actions[j];\n            if (action.category === 'tile') {\n              name = $.mosaic.getPrefixedClassName(action.name);\n              $(\".mosaic-selected-tile\", $.mosaic.document)\n                .removeClass(name);\n            }\n          }\n        }\n      }\n    });\n\n    // Register generic re-usable toggle row class format action\n    $.mosaic.registerAction('row-toggle-class', {\n      exec: function () {\n        var name;\n        if (arguments.length > 0 && arguments[0].value) {\n          name = $.mosaic.getPrefixedClassName(arguments[0].value);\n          $(\".mosaic-selected-tile\", $.mosaic.document)\n            .parents('.mosaic-grid-row').first()\n            .toggleClass(name);\n        }\n      }\n    });\n\n    // Register generic re-usable toggle row class format action\n    $.mosaic.registerAction('row-remove-format', {\n      exec: function () {\n        var i, j, group, action, name;\n        for (i = 0; i < $.mosaic.options.formats.length; i++) {\n          group = $.mosaic.options.formats[i];\n          for (j = 0; j < group.actions.length; j++) {\n            action = group.actions[j];\n            if (action.category === 'row') {\n              name = $.mosaic.getPrefixedClassName(action.name);\n              $(\".mosaic-selected-tile\", $.mosaic.document)\n                .parents('.mosaic-grid-row').first()\n                .removeClass(name);\n            }\n          }\n        }\n      }\n    });\n\n    // Register tile align block action\n    $.mosaic.registerAction('tile-align-block', {\n      exec: function () {\n\n        // Remove left and right align classes\n        $(\".mosaic-selected-tile\", $.mosaic.document)\n          .removeClass(\"mosaic-tile-align-right\")\n          .removeClass(\"mosaic-tile-align-left\");\n      },\n      shortcut: {\n        ctrl: true,\n        alt: false,\n        shift: true,\n        key: 'b'\n      }\n    });\n\n    // Register tile align left action\n    $.mosaic.registerAction('tile-align-left', {\n      exec: function () {\n\n        // Remove right align class, add left align class\n        $(\".mosaic-selected-tile\", $.mosaic.document)\n          .removeClass(\"mosaic-tile-align-right\")\n          .addClass(\"mosaic-tile-align-left\");\n      },\n      shortcut: {\n        ctrl: true,\n        alt: false,\n        shift: true,\n        key: 'l'\n      }\n    });\n\n    // Register tile align right action\n    $.mosaic.registerAction('tile-align-right', {\n      exec: function () {\n\n        // Remove left align class, add right align class\n        $(\".mosaic-selected-tile\", $.mosaic.document)\n          .removeClass(\"mosaic-tile-align-left\")\n          .addClass(\"mosaic-tile-align-right\");\n      },\n      shortcut: {\n        ctrl: true,\n        alt: false,\n        shift: true,\n        key: 'r'\n      }\n    });\n\n    // Register save action\n    $.mosaic.registerAction('save', {\n      exec: function () {\n        $.mosaic.saving = true;\n        $('.mosaic-selected-tile', $.mosaic.document).each(function() {\n          var tile = new Tile(this);\n          tile.blur();\n        });\n        $.mosaic.options.toolbar.trigger(\"selectedtilechange\");\n        $.mosaic.queue(function(next) {\n          $.mosaic.saveLayoutToForm();\n          $(\"#form-buttons-save\").click();\n          $.mosaic.saving = false;\n          next();\n        });\n      },\n      shortcut: {\n        ctrl: true,\n        alt: false,\n        shift: false,\n        key: 's'\n      }\n    });\n\n    // Register cancel action\n    $.mosaic.registerAction('cancel', {\n      exec: function () {\n\n        // Cancel form\n        $(\"#form-buttons-cancel\").click();\n      }\n    });\n\n    // Register preview action\n    $.mosaic.registerAction('preview', {\n      exec: function () {\n\n        // Trigger validation => drafting sync\n        $(\"#form-widgets-ILayoutAware-customContentLayout, \" +\n            \"[name='form.widgets.ILayoutAware.customContentLayout']\")\n            .focus().blur();\n\n        // Layout preview\n        setTimeout(function(){\n          window.open(\n              $.mosaic.options.context_url + '/@@layout_preview', '_blank');\n        }, 1000);\n      }\n    });\n\n    // Register html action\n    $.mosaic.registerAction('html', {\n      exec: function () {\n\n        // Local variables\n        var tilecontent, text, height;\n\n        // Get tile content div\n        tilecontent = $(\".mosaic-selected-tile\", $.mosaic.document)\n                  .children(\".mosaic-tile-content\");\n\n        // Check if not already html editable\n        if (tilecontent.find('.mosaic-rich-text-textarea')\n            .length === 0) {\n\n          // Add new text area and set content\n          text = tilecontent.html();\n          height = tilecontent.height();\n          tilecontent.empty();\n          tilecontent.prepend(\n            $($.mosaic.document.createElement(\"textarea\"))\n              .addClass(\"mosaic-rich-text-textarea\")\n              .html($.trim(text))\n              .height(height));\n        }\n      }\n    });\n\n    // Register page properties action\n    $.mosaic.registerAction('properties', {\n      exec: function () {\n        $.mosaic.overlay.open('all');\n      }\n    });\n\n    $.mosaic.registerAction('layout', {\n      /* layout drop down */\n      exec: function () {\n        var $container = $('.mosaic-button-group-layout');\n        $container.toggleClass('active');\n      },\n      visible: function(){\n        return true;\n      }\n    });\n\n    // register customize layout button\n    $.mosaic.registerAction('customizelayout', {\n      exec: function () {\n        $.mosaic.setSelectedContentLayout('');  // clear selected layout, will use stored layout then\n        $('.mosaic-toolbar-secondary-functions').show();\n        $('.mosaic-button-customizelayout').hide();\n        $('.mosaic-button-savelayout').show();\n        // go through each tile and add movable\n        $('.mosaic-panel .mosaic-tile', $.mosaic.document).each(function(){\n          var tile = new Tile(this);\n          tile.makeMovable();\n          tile.$el.mosaicAddDrag();\n        });\n        $('.mosaic-button-group-layout').removeClass('active');\n      },\n      visible: function(){\n        return $.mosaic.hasContentLayout && $.mosaic.options.canChangeLayout;\n      }\n    });\n\n    // register change layout button\n    $.mosaic.registerAction('changelayout', {\n      exec: function () {\n        var yes = $.mosaic.hasContentLayout;\n        if(!yes){\n          yes = confirm('Changing your layout will destroy all existing custom layout ' +\n                        'settings you have in place. Are you sure you want to continue?');\n        }\n        if(yes){\n          $.mosaic.selectLayout();\n        }\n        $('.mosaic-button-group-layout').removeClass('active');\n      },\n      visible: function(){\n        return $.mosaic.options.available_layouts.length > 0;\n      }\n    });\n\n    // register change layout button\n    $.mosaic.registerAction('savelayout', {\n      exec: function () {\n        $.mosaic.saveLayout();\n        $('.mosaic-button-group-layout').removeClass('active');\n      },\n      visible: function(){\n        return true;\n      }\n    });\n\n    // Register add tile action\n    $.mosaic.registerAction('add-tile', {\n      exec: function () {\n\n        // Open overlay\n        var m = new Modal($('.mosaic-toolbar'),\n          {ajaxUrl: $.mosaic.options.context_url +\n           '/@@add-tile?form.button.Create=Create'});\n        m.show();\n      }\n    });\n\n    // Register format action\n    $.mosaic.registerAction('format', {\n      exec: function (source) {\n\n        // Execute the action\n        $(source).find(\"[value=\" + $(source).val() + \"]\")\n          .mosaicExecAction();\n\n        // Reset menu\n        $(source).select2(\"val\", \"none\"); // $(source).val(\"none\");\n      }\n    });\n\n    // Register page-insert action\n    $.mosaic.registerAction('insert', {\n      exec: function (source) {\n\n        // Local variables\n        var tile_config, tile_group, tile_type, x, y;\n\n        // Check if value selected\n        if ($(source).val() === \"none\") {\n          return false;\n        } else {\n          tile_type = $(source).val();\n        }\n\n        // Deselect tiles\n        $(\".mosaic-selected-tile\", $.mosaic.document)\n          .removeClass(\"mosaic-selected-tile\")\n          .children(\".mosaic-tile-content\").blur();\n\n        // Set actions\n        $.mosaic.options.panels.trigger(\"selectedtilechange\");\n\n        // Get tile config\n        for (x = 0; x < $.mosaic.options.tiles.length; x += 1) {\n          tile_group = $.mosaic.options.tiles[x];\n          for (y = 0; y < tile_group.tiles.length; y += 1) {\n            if (tile_group.tiles[y].name === tile_type) {\n              tile_config = tile_group.tiles[y];\n            }\n          }\n        }\n\n        // Create new app tile\n        if (tile_config.tile_type === 'textapp') {\n          // an app tile\n          // generate uid for it: http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n          var uid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n            return v.toString(16);\n          });\n\n          var tileUrl = $.mosaic.options.context_url + '/@@' + tile_type + '/' + uid;\n          var html = '<html><body>' + $.mosaic.getDefaultValue(tile_config) + '</body></html>';\n          $.mosaic.addAppTileHTML(tile_type, html, tileUrl);\n        }else if (tile_config.tile_type === 'app') {\n          // Load add form form selected tiletype\n          var initial = true;\n          utils.loading.show();\n          $.ajax({\n            type: \"GET\",\n            url: $.mosaic.options.context_url +\n              '/@@add-tile?tiletype=' + tile_type +\n              '&form.button.Create=Create',\n            success: function(value, xhr) {\n              utils.loading.hide();\n              var $value, action_url, authenticator, modalFunc;\n\n              // Read form\n              $value = $(value);\n              action_url = $value.find('#add_tile').attr('action');\n              authenticator = $value.find('[name=\"_authenticator\"]').val();\n              // Open add form in modal when requires user input\n              modalFunc = function(html) {\n                $.mosaic.overlay.app = new Modal($('.mosaic-toolbar'), {\n                  html: html,\n                  loadLinksWithinModal: true,\n                  buttons: '.formControls > input[type=\"submit\"], .actionButtons > input[type=\"submit\"]'\n                });\n                $.mosaic.overlay.app.$el.off('after-render');\n                $.mosaic.overlay.app.on(\n                  'after-render',\n                  function(event) {\n                    /* Remove field errors since the user has not actually\n                       been able to fill out the form yet */\n                    if(initial){\n                      $('.field.error', $.mosaic.overlay.app.$modal)\n                        .removeClass('error');\n                      $('.fieldErrorBox,.portalMessage', $.mosaic.overlay.app.$modal).remove();\n                      initial = false;\n                    }\n\n                    $('input[name*=\"cancel\"]',\n                      $.mosaic.overlay.app.$modal)\n                      .off('click').on('click', function() {\n                        // Close overlay\n                        $.mosaic.overlay.app.hide();\n                        $.mosaic.overlay.app = null;\n                    });\n                  }\n                );\n                $.mosaic.overlay.app.show();\n                $.mosaic.overlay.app.$el.off('formActionSuccess');\n                $.mosaic.overlay.app.on(\n                  'formActionSuccess',\n                  function (event, response, state, xhr) {\n                    var tileUrl = xhr.getResponseHeader('X-Tile-Url');\n                    if (tileUrl) {\n                      $.mosaic.addAppTileHTML(\n                        tile_type, response, tileUrl);\n                      $.mosaic.overlay.app.hide();\n                      $.mosaic.overlay.app = null;\n                    }\n                  }\n                );\n              };\n\n              // Auto-submit add-form when all required fields are filled\n              if ($(\"form .required\", $value).filter(function() {\n                  var val = $(this).parents(\".field\").first()\n                    .find(\"input, select, textarea\")\n                    .not('[type=\"hidden\"]').last().val();\n                  return val === null || val.length === 0; }).length > 0) {\n                modalFunc(value);\n              } else if (action_url) {\n                $(\"form\", $value).ajaxSubmit({\n                  type: \"POST\",\n                  url: action_url,\n                  data: {\n                    'buttons.save': 'Save',\n                    '_authenticator': authenticator\n                  },\n                  success: function(value, state, xhr) {\n                    var tileUrl = xhr.getResponseHeader('X-Tile-Url');\n                    if (tileUrl) {\n                      $.mosaic.addAppTileHTML(\n                        tile_type, value, tileUrl);\n                    } else {\n                      modalFunc(value);\n                    }\n                  }\n                });\n              }\n            }\n          });\n\n        } else {\n\n          // Add tile\n          $.mosaic.addTile(\n            tile_type, $.mosaic.getDefaultValue(tile_config));\n        }\n\n        // Reset menu\n        $(source).select2(\"val\", \"none\"); // $(source).val(\"none\");\n\n        // Normal exit\n        return true;\n      }\n    });\n\n    // Handle keypress event, check for shortcuts\n    $(document).keypress(function (e) {\n\n      // Action name\n      var action = \"\";\n\n      // Loop through shortcuts\n      $($.mosaic.actionManager.shortcuts).each(function () {\n\n        // Check if shortcut matched\n        if (((e.ctrlKey === this.ctrl) ||\n           (navigator.userAgent.toLowerCase()\n            .indexOf('macintosh') !== -1 &&\n            e.metaKey === this.ctrl)) &&\n          ((e.altKey === this.alt) || (e.altKey === undefined)) &&\n          (e.shiftKey === this.shift) &&\n          (e.charCode && String.fromCharCode(e.charCode)\n            .toUpperCase().charCodeAt(0) === this.charCode)) {\n\n          // Found action\n          action = this.action;\n        }\n      });\n\n      // Check if shortcut found\n      if (action !== \"\") {\n\n        // Exec actions\n        $.mosaic.actionManager.actions[action].exec();\n\n        // Prevent other actions\n        return false;\n      }\n\n      // Normal exit\n      return true;\n    });\n  };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++plone++mosaic/js/mosaic.actions.js?");

/***/ }),

/***/ "./.plone/++plone++mosaic/js/mosaic.core.js":
/*!**************************************************!*\
  !*** ./.plone/++plone++mosaic/js/mosaic.core.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * This plugin is used to define the mosaic namespace\n *\n * @author Rob Gietema\n * @licstart  The following is the entire license notice for the JavaScript\n *            code in this page.\n *\n * Copyright (C) 2010 Plone Foundation\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 2 of the License.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along with\n * this program; if not, write to the Free Software Foundation, Inc., 51\n * Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * @licend  The above is the entire license notice for the JavaScript code in\n *          this page.\n * @version 0.1\n */\n\n/* global window: false */\n/*jslint white: true, browser: true, onevar: true, nomen: true,\neqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true,\nimmed: true, strict: true, maxlen: 120, maxerr: 9999, quotmark: false */\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! pat-logger */ \"./.plone/++plone++static/components/patternslib/src/core/logger.js\"),\n  __webpack_require__(/*! underscore */ \"./.plone/++plone++static/components/underscore/underscore.js\"),\n  __webpack_require__(/*! mosaic-url/mosaic.tile */ \"./.plone/++plone++mosaic/js/mosaic.tile.js\"),\n  __webpack_require__(/*! mosaic-url/mosaic.panel */ \"./.plone/++plone++mosaic/js/mosaic.panel.js\"),\n  __webpack_require__(/*! mockup-patterns-modal */ \"./.plone/++resource++mockup/modal/pattern.js\"),\n  __webpack_require__(/*! mockup-utils */ \"./.plone/++resource++mockupjs/utils.js\"),\n  __webpack_require__(/*! mosaic-url/mosaic.toolbar */ \"./.plone/++plone++mosaic/js/mosaic.toolbar.js\"),\n  __webpack_require__(/*! mosaic-url/mosaic.layout */ \"./.plone/++plone++mosaic/js/mosaic.layout.js\"),\n  __webpack_require__(/*! mosaic-url/mosaic.actions */ \"./.plone/++plone++mosaic/js/mosaic.actions.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, logger, _, Tile, Panel, Modal, utils) {\n  \"use strict\";\n\n  var log = logger.getLogger('pat-mosaic');\n\n  // Create the mosaic namespace\n  if (typeof($.mosaic) === \"undefined\") {\n    $.mosaic = {};\n  }\n\n  // Set variables\n  $.mosaic.loaded = false;\n\n  // Define mosaic saving\n  $.mosaic.saving = false;\n\n  // Define UI templates\n  $.mosaic.selectLayoutTemplate = _.template('<div>' +\n    '<h1>Select Layout</h1>' +\n    '<div class=\"mosaic-select-layout\">' +\n      '<div class=\"global-layouts\">' +\n        '<ul>' +\n          '<% _.each(available_layouts, function(layout){ ' +\n            'var screenshot = layout.preview || layout.screenshot;' +\n            'if(!screenshot){' +\n              'screenshot = \"++plone++mosaic/img/default-layout-screenshot.png\";' +\n            '} %>' +\n            '<li><a href=\"#\" data-value=\"<%- layout.path %>\">' +\n              '<p><%- layout.title %></p>' +\n              '<p class=\"mosaic-select-layout-description\"><%- layout.description %></p>' +\n              '<img src=\"<%- portal_url %>/<%- screenshot %>\"></a></li>' +\n          '<% }); %>' +\n        '</ul>' +\n      '</div>' +\n      '<% if(user_layouts.length > 0){ %>' +\n        '<div class=\"user-layouts\">' +\n          '<h4>My Layouts</h4>' +\n          '<ul>' +\n            '<% _.each(user_layouts, function(layout){ ' +\n              'var screenshot = layout.preview || layout.screenshot;' +\n              'if(!screenshot){' +\n                'screenshot = \"++plone++mosaic/img/default-layout-screenshot.png\";' +\n              '} %>' +\n              '<li><a href=\"#\" data-value=\"<%- layout.path %>\">' +\n                '<p><%- layout.title %></p><img src=\"<%- portal_url %>/<%- screenshot %>\"></a></li>' +\n            '<% }); %>' +\n          '</ul>' +\n        '</div>' +\n      '<% } %>' +\n      '<% if(hasCustomLayouts && canChangeLayout) { %>' +\n        '<p class=\"manage-custom-layouts\"><a href=\"#\" class=\"plone-btn plone-btn-default\">Manage custom layouts</a></p>' +\n      '<% } %>' +\n    '</div>' +\n    '<div class=\"buttons\">' +\n      '<!-- <button class=\"plone-btn plone-btn-default\">Select</button> -->' +\n    '</div>' +\n  '</div>');\n\n  $.mosaic.saveLayoutTemplate = _.template('<div>' +\n    '<h1>Save Layout</h1>' +\n    '<div class=\"mosaic-save-layout\">' +\n      '<p>This process takes a copy of the existing layout and saves it to a new, ' +\n          'resuable layout.</p>' +\n      '<div class=\"form-group field\">' +\n        '<label for=\"layoutNameField\">Name</label>' +\n        '<input type=\"text\" name=\"name\" class=\"form-control\" id=\"layoutNameField\" />' +\n      '</div>' +\n      '<% if(canManageLayouts){ %>' +\n        '<div class=\"field form-group\">' +\n          '<span class=\"option\">' +\n            '<input id=\"globalLayout\" type=\"checkbox\">' +\n            '<label for=\"globalLayout\">' +\n              '<span class=\"label\">Global</span>' +\n            '</label>' +\n          '</span>' +\n          '<div class=\"formHelp\">Should this layout be available for all users on the site?</div>' +\n        '</div>' +\n      '<% } %>' +\n    '</div>' +\n    '<div class=\"buttons\">' +\n      '<button class=\"plone-btn plone-btn-primary\">Save</button>' +\n    '</div>' +\n  '</div>');\n\n  $.mosaic.manageLayoutsTemplate = _.template('<div>' +\n    '<h1>Manage custom layouts</h1>' +\n    '<div class=\"mosaic-manage-custom-layouts\">' +\n      '<table>' +\n        '<thead>' +\n          '<tr>' +\n            '<th>Name</th>' +\n            '<th>Path</th>' +\n            '<th>Actions</th>' +\n          '</tr>' +\n        '</thead>' +\n        '<tbody>' +\n          '<% _.each(available_layouts.concat(user_layouts), function(layout){ %>' +\n            '<% if(layout.path.indexOf(\"custom/\") !== -1){ %>' +\n              '<% if(layout.path.split(\"/\").length > 2 || canManageLayouts) { %>' +\n                '<tr>' +\n                  '<td><%- layout.title %></td>' +\n                  '<td><%- layout.path %></td>' +\n                  '<td>' +\n                    '<a href=\"#\" class=\"btn btn-danger delete-layout\" ' +\n                        'data-layout=\"<%- layout.path %>\">Delete</a>' +\n                  '</td>' +\n                '</tr>' +\n              '<% } %>' +\n            '<% } %>' +\n          '<% }); %>' +\n        '</tbody>' +\n      '</table>' +\n    '</div>' +\n  '</div>');\n\n  $.mosaic.deleteLayoutTemplate = _.template('<div>' +\n    '<h1>Delete layout</h1>' +\n    '<div class=\"mosaic-delete-layout\">' +\n      '<% if(existing.length === 0 && !selected){  %>' +\n        '<div class=\"portalMessage warning\">' +\n          '<strong>Warning</strong>' +\n          'Are you certain you want to delete this layout? This can not be undone.' +\n        '</div>' +\n      '<% } else { %>' +\n        '<div class=\"portalMessage error\">' +\n          '<strong>Warning</strong>' +\n          'Are you certain you want to delete this layout? This can not be undone. ' +\n          '<% if(existing.length > 0) { %>' +\n            'There are currently <%- existing.length %> items assigned to this layout. ' +\n          '<% } %>' +\n          'You need to provide a replacement layout for the existing items in order to ' +\n          'delete this for items currently assigned to this.' +\n        '</div>' +\n        '<div class=\"form-group field\">' +\n          '<label for=\"layoutField\">Replacement Layout</label>' +\n          '<select name=\"layout\" class=\"form-control\" id=\"layoutField\">' +\n            '<% _.each(available_layouts.concat(user_layouts), function(l){ %>' +\n              '<% if(l.path !== layout_deleting.path){ %>' +\n                '<option value=\"<%- l.path %>\"><%- l.title %></option>' +\n              '<% } %>' +\n            '<% }); %>' +\n          '</select>' +\n        '</div>' +\n      '<% } %>' +\n    '</div>' +\n    '<div class=\"buttons\">' +\n      '<button class=\"plone-btn plone-btn-danger delete\">Yes, delete</button>' +\n      '<button class=\"plone-btn plone-btn-default cancel\">No</button>' +\n    '</div>' +\n  '</div>');\n\n  /**\n   * Called upon full initialization (that is: when all tiles have\n   * been loaded).\n   * @id jQuery.mosaic.initialized\n   */\n  $.mosaic.initialized = function () {\n    if ($.mosaic.loaded) {\n      return;\n    }\n    $.mosaic.loaded = true;\n    utils.loading.hide();\n  };\n\n  /**\n   * Initialize the Mosaic\n   *\n   * @id jQuery.mosaic.init\n   * @param {Object} options Options used to initialize the UI\n   */\n  $.mosaic.init = function (options) {\n    options = $.extend({\n      url: window.document.location.href,\n      type: '',\n      ignore_context: false\n    }, options);\n\n    // Set document\n    $.mosaic.document = window.document;\n\n    // Local variables\n    var match;\n\n    // Initialize modules\n    $.mosaic.initActions();\n\n    // Get the url of the page\n    match = options.url.match(/^([\\w#!:.?+=&%@!\\-\\/]+)\\/edit$/);\n    if (match) {\n      options.url = match[1];\n    }\n\n    // Chop add\n    match = options.url\n      .match(/^([\\w#:.?=%@!\\-\\/]+)\\/\\+\\+add\\+\\+([\\w#!:.?+=&%@!\\-\\/]+)$/);\n    if (match) {\n      options.url = match[1];\n      options.type = match[2];\n      options.ignore_context = true;\n    }\n\n    // Add global options\n    $.mosaic.options = options.data;\n    $.mosaic.options.url = options.url;\n    $.mosaic.options.ignore_context = options.ignore_context;\n    $.mosaic.options.tileheadelements = [];\n    $.mosaic.hasContentLayout = true;\n\n    var contentLayout = $.mosaic.getSelectedContentLayout();\n    if(contentLayout){\n      $.mosaic.applyLayout(contentLayout);\n    }else{\n      var contentRaw = $($.mosaic.options.customContentLayout_field_selector).val();\n      if(!contentRaw){\n        $.mosaic.selectLayout(true);\n      }else{\n        var $content = $.mosaic.getDomTreeFromHtml(contentRaw);\n        if($content.attr('id') === \"no-layout\"){\n          $.mosaic.selectLayout(true);\n        }else{\n          $('body').addClass('mosaic-layout-customized');\n          $.mosaic.hasContentLayout = false;\n          $.mosaic._init($content);\n        }\n\n        // XXX There is a case where you can have an extraneous mid-edit tile\n        var $helper = $('.mosaic-helper-tile-new');\n        if($helper.length > 0){\n          $helper.parents('.mosaic-grid-row').remove();\n        }\n      }\n    }\n  };\n\n  $.mosaic.getSelectedContentLayout = function(){\n    return $($.mosaic.options.contentLayout_field_selector).val();\n  };\n\n  $.mosaic.setSelectedContentLayout = function(value){\n    if(value){\n      $.mosaic.hasContentLayout = true;\n      // Need to hide these buttons when not in custom content layout mode\n      $('.mosaic-toolbar-secondary-functions', $.mosaic.document).hide();\n      $('body').removeClass('mosaic-layout-customized');\n    }else{\n      $('body').addClass('mosaic-layout-customized');\n      $.mosaic.hasContentLayout = false;\n    }\n    return $($.mosaic.options.contentLayout_field_selector).attr('value', value);\n  };\n\n\n  $.mosaic._initPanels = function ($content){\n    $.mosaic.options.layout = $content.attr('data-layout');\n\n    // Drop panels within panels (only the top level panels are editable)\n    $('[data-panel] [data-panel]', $.mosaic.document)\n      .removeAttr('data-panel');\n\n    $content.find(\"[data-panel]\").each(function () {\n      var panel = new Panel(this);\n      panel.initialize($content);\n    });\n    // Pre-fill new panels from the layout\n    $(\"[data-panel]\", $.mosaic.document).each(function () {\n      var panel = new Panel(this);\n      panel.prefill();\n    });\n\n    // Init app tiles\n    $.mosaic.options.panels = $(\".mosaic-panel\", $.mosaic.document);\n\n    $.mosaic.options.panels.find(\"[data-tile]\").each(function () {\n      if(Tile.validTile(this)){\n        var tile = new Tile($(this).parent());\n        tile.initializeContent();\n      }\n    });\n  };\n\n  $.mosaic._init = function (content) {\n\n    $.mosaic._initPanels(content);\n\n    // Init overlay\n    $('.mosaic-original-content', $.mosaic.document).mosaicOverlay();\n\n    // Add toolbar div below menu\n    $(\"body\").prepend($(document.createElement(\"div\"))\n      .addClass(\"mosaic-toolbar\")\n    );\n\n    // Add the toolbar to the options\n    $.mosaic.options.toolbar = $(\".mosaic-toolbar\");\n\n    // Init toolbar\n    $.mosaic.options.toolbar.mosaicToolbar();\n\n    // Init layout\n    $.mosaic.options.panels.mosaicLayout();\n\n    // Add blur to the rest of the content\n    $(\"*\", $.mosaic.document).each(function () {\n\n      // Local variables\n      var obj;\n\n      obj = $(this);\n\n      // Check if block element\n      if (obj.css('display') === 'block' ||\n          obj.css('display') === 'flex') {\n\n        // Check if panel or toolbar\n        if (!obj.hasClass('mosaic-panel') &&\n          !obj.hasClass('mosaic-toolbar') &&\n          !obj.hasClass('mosaic-notifications') &&\n          !obj.hasClass('mosaic-modal-wrapper') &&\n          obj.attr('id') !== 'edit-zone') {\n\n          // Check if inside panel or toolbar\n          if (obj.parents('.mosaic-panel, .mosaic-toolbar')\n            .length === 0) {\n\n            // Check if parent of a panel or toolbar\n            if (obj.find('.mosaic-panel, .mosaic-toolbar')\n              .length === 0) {\n\n              // Check if parent has a child who is a\n              // panel or a toolbar\n              if (obj.parent()\n                .find('.mosaic-panel, .mosaic-toolbar')\n                .length !== 0) {\n\n                // Add blur class\n                obj.addClass('mosaic-blur');\n              }\n            }\n          }\n        }\n      }\n    });\n\n    // on enabling, add class, disable toolbar classes, hide toolbar\n    $('.pat-toolbar').hide();\n    var $body = $('body');\n    $body.addClass('mosaic-enabled');\n    $body[0].className.split(' ').forEach(function(className){\n      if(className.indexOf('plone-toolbar') !== -1){\n        $body.removeClass(className);\n      }\n    });\n\n    $.mosaic.initialized();\n  };\n\n  $.mosaic.applyLayout = function(layoutPath, callback){\n    if(callback === undefined){\n      callback = function(){};\n    }\n    utils.loading.show();\n    $.ajax({\n      url: $('body').attr('data-portal-url') + '/' + layoutPath,\n      cache: false\n    }).done(function(layoutHtml){\n      var $content = $.mosaic.getDomTreeFromHtml(layoutHtml);\n      $.mosaic.setSelectedContentLayout(layoutPath);\n      if($.mosaic.loaded){\n        // initialize panels\n        $.mosaic._initPanels($content);\n        // and setup layout for the new panels\n        $.mosaic.options.panels.mosaicLayout();\n      }else{\n        $.mosaic._init($content);\n      }\n    }).fail(function(xhr, type, status){\n      // use backup layout\n      if(status === 'Not Found'){\n        window.alert('Specified layout can not be found. Loading default layout.');\n      }else{\n        window.alert('Error loading layout specified for this content. Falling back to basic layout.');\n      }\n      $.mosaic.applyLayout('++contentlayout++default/basic.html');\n    }).always(function(){\n      utils.loading.hide();\n    });\n  };\n\n  var _hasCustomLayouts = function(){\n    if($.mosaic.options.user_layouts.length > 0){\n      return true;\n    }\n    return _.filter($.mosaic.options.available_layouts, function(layout){\n      return layout.path.indexOf('custom/') !== -1;\n    }).length > 0;\n  };\n\n  $.mosaic._deleteLayout = function(layout, existing, callback){\n    var $el = $('<div/>').appendTo('body');\n    var modal = new Modal($el, {\n      html: $.mosaic.deleteLayoutTemplate($.extend({}, true, {\n        existing: existing,\n        layout_deleting: layout,\n        selected: $.mosaic.getSelectedContentLayout() === '++contentlayout++' + layout.path\n      }, $.mosaic.options)),\n      content: null,\n      buttons: '.plone-btn'\n    });\n\n    modal.on('shown', function() {\n      $('button.delete:visible', modal.$modal).off('click').on('click', function(e){\n        e.preventDefault();\n        utils.loading.show();\n        var replacement = $('#layoutField', modal.$modal).val();\n        $.ajax({\n          url: $('body').attr('data-base-url') + '/@@manage-layouts-from-editor',\n          data: {\n            action: 'deletelayout',\n            layout: layout.path,\n            replacement: replacement,\n            _authenticator: utils.getAuthenticator()\n          }\n        }).done(function(data){\n          modal.hide();\n          callback(data);\n          if(replacement && $.mosaic.getSelectedContentLayout() === '++contentlayout++' + layout.path){\n            $.mosaic.applyLayout('++contentlayout++' + replacement);\n          }\n        }).fail(function(){\n          window.alert('Error deleting layout');\n        }).always(function(){\n          utils.loading.hide();\n        });\n      });\n      $('button.cancel:visible', modal.$modal).off('click').on('click', function(e){\n        e.preventDefault();\n        modal.hide();\n      });\n    });\n    modal.show();\n  };\n\n  $.mosaic.deleteLayout = function(layout, callback){\n    utils.loading.show();\n    $.ajax({\n      url: $('body').attr('data-base-url') + '/@@manage-layouts-from-editor',\n      data: {\n        action: 'existing',\n        layout: layout.path\n      }\n    }).done(function(data){\n      $.mosaic._deleteLayout(layout, data.data, callback);\n    }).fail(function(){\n      window.alert('Error loading data for existing assignments');\n    }).always(function(){\n      utils.loading.hide();\n    });\n  };\n\n  $.mosaic.manageCustomLayouts = function(){\n    var $el = $('<div/>').appendTo('body');\n    var modal = new Modal($el, {\n      html: $.mosaic.manageLayoutsTemplate($.extend({}, true, {\n\n      }, $.mosaic.options)),\n      content: null,\n      buttons: '.plone-btn'\n    });\n\n    modal.on('shown', function() {\n      $('.delete-layout', modal.$modal).off('click').on('click', function(e){\n        e.preventDefault();\n        var layout_id = $(this).attr('data-layout');\n        _.each($.mosaic.options.available_layouts.concat($.mosaic.options.user_layouts), function(l){\n          if(l.path === layout_id){\n            return $.mosaic.deleteLayout(l, function(data){\n              // callback for when the delete is complete and we need to reload data...\n              // reload it...\n              $.mosaic.options.available_layouts = data.available_layouts;\n              $.mosaic.options.user_layouts = data.user_layouts;\n              modal.hide();\n              $.mosaic.manageCustomLayouts();\n            });\n          }\n        });\n      });\n    });\n    modal.show();\n  };\n\n\n  $.mosaic.selectLayout = function(initial){\n    if(initial !== undefined && initial){\n      // check if there is only 1 available layout and auto select\n      // if that is the case.\n      if($.mosaic.options.available_layouts.length === 1){\n        var layout = $.mosaic.options.available_layouts[0];\n        var layoutPath = '++contentlayout++' + layout.directory + '/' + layout.file;\n        $.mosaic.applyLayout(layoutPath);\n        return;\n      }\n    }\n    if($.mosaic.options.available_layouts.length === 0){\n      // use backup layout\n      $.mosaic.applyLayout('++contentlayout++default/basic.html');\n      return;\n    }\n    var $el = $('<div/>').appendTo('body');\n    var modal = new Modal($el, {\n      html: $.mosaic.selectLayoutTemplate($.extend({}, true, {\n        hasCustomLayouts: _hasCustomLayouts(),\n        portal_url: $('body').attr('data-portal-url')\n      }, $.mosaic.options)),\n      content: null,\n      buttons: '.plone-btn'\n    });\n    modal.on('shown', function() {\n      $('.manage-custom-layouts a', modal.$modal).off('click').on('click', function(e){\n        e.preventDefault();\n        modal.hide();\n        $.mosaic.manageCustomLayouts();\n      });\n      $('li a', modal.$modal).off('click').on('click', function(e){\n        e.preventDefault();\n        var layout;\n        var layout_id = $(this).attr('data-value');\n        _.each($.mosaic.options.available_layouts.concat($.mosaic.options.user_layouts), function(l){\n          if(l.path === layout_id){\n            layout = l;\n          }\n        });\n        var layoutPath = '++contentlayout++' + layout.path;\n        modal.hide();\n        $.mosaic.applyLayout(layoutPath);\n      });\n    });\n    modal.show();\n  };\n\n  $.mosaic.saveLayout = function(initial){\n    var $el = $('<div/>').appendTo('body');\n    var modal = new Modal($el, {\n      html: $.mosaic.saveLayoutTemplate($.extend({}, true, {\n        hasCustomLayouts: _hasCustomLayouts()\n      }, $.mosaic.options)),\n      content: null,\n      buttons: '.plone-btn'\n    });\n    modal.on('shown', function() {\n      $('.plone-btn:visible', modal.$modal).off('click').on('click', function(e){\n        var layoutName = $('#layoutNameField', modal.$modal).val();\n        if(!layoutName){\n          return;\n        }\n        utils.loading.show();\n        e.preventDefault();\n        var globalLayout = 'false';\n        var $el = $('#globalLayout', modal.$modal);\n        if($el.size() > 0 && $el[0].checked){\n          globalLayout = 'true';\n        }\n        $.ajax({\n          url: $('body').attr('data-base-url') + '/@@manage-layouts-from-editor',\n          method: 'POST',\n          data: {\n            action: 'save',\n            _authenticator: utils.getAuthenticator(),\n            global: globalLayout,\n            name: layoutName,\n            layout: $.mosaic.getPageContent(true)\n          }\n        }).done(function(result){\n          if(result.success){\n            $.mosaic.options.available_layouts = result.available_layouts;\n            $.mosaic.options.user_layouts = result.user_layouts;\n            $.mosaic.applyLayout(result.layout);\n          }\n        }).fail(function(){\n          window.alert('Error saving layout');\n        }).always(function(){\n          utils.loading.hide();\n          modal.hide();\n        });\n      });\n    });\n    modal.show();\n  };\n\n  /**\n   * Get the dom tree of the specified content\n   *\n   * @id jQuery.mosaic.getDomTreeFromHtml\n   * @param {String} content Html content\n   * @return {Object} Dom tree of the html\n   */\n  $.mosaic.getDomTreeFromHtml = function (content) {\n\n    // Remove doctype and replace html, head and body tag since the are\n    // stripped when converting to jQuery object\n    content = content.replace(/<!DOCTYPE[\\w\\s\\- .\\/\\\":]+>/, '');\n    content = content.replace(/<html>/, \"<div class=\\\"temp_html_tag\\\">\");\n    content = content.replace(/<\\/html>/, \"</div>\");\n    content = content.replace(/<html\\s/, \"<div class=\\\"temp_html_tag\\\" \");\n    content = content.replace(/<\\/html\\s/, \"</div \");\n    content = content.replace(/<head>/, \"<div class=\\\"temp_head_tag\\\">\");\n    content = content.replace(/<\\/head>/, \"</div>\");\n    content = content.replace(/<head\\s/, \"<div class=\\\"temp_head_tag\\\" \");\n    content = content.replace(/<\\/head\\s/, \"</div \");\n    content = content.replace(/<body>/, \"<div class=\\\"temp_body_tag\\\">\");\n    content = content.replace(/<\\/body>/, \"</div>\");\n    content = content.replace(/<body\\s/, \"<div class=\\\"temp_body_tag\\\" \");\n    content = content.replace(/<\\/body\\s/, \"</div \");\n    return $($(content)[0]);\n  };\n\n  /**\n   * Remove head tags based on tile url\n   *\n   * @id jQuery.mosaic.removeHeadTags\n   * @param {String} url Url of the tile\n   */\n  $.mosaic.removeHeadTags = function (url) {\n    if(!url || url === 'undefined'){\n      return;\n    }\n\n    // Local variables\n    var tile_type_id, html_id, headelements, i;\n\n    // Calc delete url\n    url = url.split('?')[0];\n    url = url.split('@@');\n    tile_type_id = url[1].split('/');\n    url = url[0] + '@@delete-tile?type=' + tile_type_id[0] + '&id=' +\n      tile_type_id[1] + '&confirm=true';\n    html_id = tile_type_id[0].replace(/\\./g, '-') + '-' + tile_type_id[1];\n\n    // Remove head elements\n    headelements = $.mosaic.options.tileheadelements[html_id];\n    if(headelements){\n      for (i = 0; i < headelements.length; i += 1) {\n        $(headelements[i], $.mosaic.document).remove();\n      }\n    }\n    $.mosaic.options.tileheadelements[html_id] = [];\n  };\n\n  /**\n   * Add head tags based on tile url and dom\n   *\n   * @id jQuery.mosaic.addHeadTags\n   * @param {String} url Url of the tile\n   * @param {Object} dom Dom object of the tile\n   */\n  $.mosaic.addHeadTags = function (url, dom) {\n\n    // Local variables\n    var tile_type_id, html_id;\n\n    // Calc url\n    url = url.split('?')[0];\n    url = url.split('@@');\n    tile_type_id = url[1].split('/');\n    html_id = tile_type_id[0].replace(/\\./g, '-') + '-' + tile_type_id[1];\n    $.mosaic.options.tileheadelements[html_id] = [];\n\n    // Get head items\n    dom.find(\".temp_head_tag\").children().each(function () {\n\n      // Add element\n      $.mosaic.options.tileheadelements[html_id].push(this);\n\n      // Add head elements\n      $('head', $.mosaic.document).append(this);\n    });\n  };\n\n  /**\n   * Queue callback to be executed in serial to other queued\n   * functions\n   *\n   * Each callback should end its execution by calling the\n   * callback it gets as in\n   *\n   *   $.mosaic.queue(function(next) {\n   *     next();\n   *   })\n   *\n   * to allow execution of the next item in queue.\n   *\n   * @param {queueName} optional queue name\n   * @param {callback} callback fn to be called\n   */\n  $.mosaic.queue = function (queueName, callback) {\n    if (typeof callback === 'undefined') {\n        callback = queueName;\n        queueName = 'fx';  // 'fx' autoexecutes by default\n    }\n    $(window).queue(queueName, callback);\n  };\n\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++plone++mosaic/js/mosaic.core.js?");

/***/ }),

/***/ "./.plone/++plone++mosaic/js/mosaic.editor.js":
/*!****************************************************!*\
  !*** ./.plone/++plone++mosaic/js/mosaic.editor.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * This plugin is used to set an element to be editable.\n *\n * @author Rob Gietema\n * @version 0.1\n * @licstart  The following is the entire license notice for the JavaScript\n *            code in this page.\n *\n * Copyright (C) 2011 Plone Foundation\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 2 of the License.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along with\n * this program; if not, write to the Free Software Foundation, Inc., 51\n * Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * @licend  The above is the entire license notice for the JavaScript code in\n *          this page.\n */\n\n/*global jQuery: false, window: false */\n/*jslint white: true, browser: true, onevar: true, undef: true, nomen: true,\neqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true,\nimmed: true, strict: true, maxlen: 100, maxerr: 9999, quotmark: false */\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($) {\n  'use strict';\n\n  // Define mosaic namespace if it doesn't exist\n  if (typeof($.mosaic) === \"undefined\") {\n    $.mosaic = {};\n  }\n\n  // Define the editor namespace\n  $.mosaic.editor = {\n  };\n\n  /**\n   * Exec a command on the editor\n   *\n   * @id jQuery.mosaic.execCommand\n   * @param {String} command Command to execute\n   * @param {String} ui UI to use\n   * @param {String} value Vale of the command\n   */\n  $.mosaic.execCommand = function (command, ui, value) {\n\n    // Exec command\n    if (tinymce.activeEditor) {\n      tinymce.activeEditor.execCommand(command, ui, value);\n    }\n  };\n\n  /**\n   * Apply formatting to the current selection\n   *\n   * @id jQuery.mosaic.editor.applyFormat\n   * @param {String} format Name of the registered format to apply\n   */\n  $.mosaic.editor.applyFormat = function (format) {\n\n    // Apply format\n    if (tinymce.activeEditor) {\n      tinyMCE.activeEditor.formatter.apply(format);\n    }\n  };\n\n  /**\n   * Register format\n   *\n   * @id jQuery.mosaic.editor.registerFormat\n   * @param {String} name Name of the registered format to apply\n   * @param {Object} format Formatting object\n   */\n  $.mosaic.editor.registerFormat = function (name, format) {\n\n    // Apply format\n    if (tinymce.activeEditor) {\n      tinymce.activeEditor.formatter.register(name, format);\n    }\n  };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++plone++mosaic/js/mosaic.editor.js?");

/***/ }),

/***/ "./.plone/++plone++mosaic/js/mosaic.layout.js":
/*!****************************************************!*\
  !*** ./.plone/++plone++mosaic/js/mosaic.layout.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * This plugin is used to create a mosaic layout.\n *\n * @author Rob Gietema\n * @version 0.1\n * @licstart  The following is the entire license notice for the JavaScript\n *            code in this page.\n *\n * Copyright (C) 2010 Plone Foundation\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 2 of the License.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along with\n * this program; if not, write to the Free Software Foundation, Inc., 51\n * Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * @licend  The above is the entire license notice for the JavaScript code in\n *          this page.\n */\n\n/* global window: false, tinyMCE: false */\n/* jslint white: true, browser: true, onevar: true, nomen: true,\neqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true,\nimmed: true, strict: true, maxlen: 150, maxerr: 9999, quotmark: false */\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! mosaic-url/mosaic.tile */ \"./.plone/++plone++mosaic/js/mosaic.tile.js\"),\n  __webpack_require__(/*! pat-logger */ \"./.plone/++plone++static/components/patternslib/src/core/logger.js\"),\n  __webpack_require__(/*! underscore */ \"./.plone/++plone++static/components/underscore/underscore.js\"),\n  __webpack_require__(/*! pat-registry */ \"./.plone/++plone++static/components/patternslib/src/core/registry.js\"),\n  __webpack_require__(/*! mockup-patterns-modal */ \"./.plone/++resource++mockup/modal/pattern.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, Tile, logger, _, Registry, Modal) {\n  'use strict';\n\n\n  // Define mosaic namespace if it doesn't exist\n  if (typeof($.mosaic) === \"undefined\") {\n    $.mosaic = {};\n  }\n\n  // Define the layout namespace\n  $.mosaic.layout = {\n    widthClasses: ['mosaic-width-quarter', 'mosaic-width-third',\n             'mosaic-width-half', 'mosaic-width-two-thirds',\n             'mosaic-width-three-quarters', 'mosaic-width-full'],\n    positionClasses: ['mosaic-position-leftmost', 'mosaic-position-quarter',\n              'mosaic-position-third', 'mosaic-position-half',\n              'mosaic-position-two-thirds',\n              'mosaic-position-three-quarters']\n  };\n\n  /**\n  * Create a new instance of a mosaic layout.\n  *\n  * @constructor\n  * @id jQuery.fn.mosaicLayout\n  * @return {Object} Returns a new mosaic layout object.\n  */\n  $.fn.mosaicLayout = function () {\n\n    var DocumentKeyup = function (e) {\n      // Check if alt\n      if (e.keyCode === 18) {\n        var date = new Date()\n        var enabled = $(\".mosaic-panel\", $.mosaic.document).data('advanced-enabled');\n        var elapsed = date.getTime() - enabled\n        if (elapsed > 400){\n            $(\".mosaic-panel\", $.mosaic.document).removeClass('mosaic-advanced');\n        }\n      }\n      // Check if ctrl\n      if (e.keyCode === 17) {\n        $(\".mosaic-panel\", $.mosaic.document).removeClass('inner-subcolumn');\n      }\n\n    };\n\n    // Keydown handler\n    var DocumentKeydown = function (e) {\n\n      // Check if alt\n      if (e.keyCode === 18) {\n        if ($(\".mosaic-panel\", $.mosaic.document).hasClass('mosaic-advanced')){\n            $(\".mosaic-panel\", $.mosaic.document).removeClass('mosaic-advanced');\n        } else {\n            var date = new Date()\n            $(\".mosaic-panel\", $.mosaic.document).addClass('mosaic-advanced');\n            $(\".mosaic-panel\", $.mosaic.document).data('advanced-enabled', date.getTime());\n        }\n      }\n      // Check if ctrl\n      if (e.keyCode === 17) {\n        $(\".mosaic-panel\", $.mosaic.document).addClass('inner-subcolumn');\n      }\n\n      // Check if esc\n      if (e.keyCode === 27) {\n\n        // Check if dragging\n        var original_tile = $(\".mosaic-original-tile\", $.mosaic.document);\n        if (original_tile.length > 0) {\n          original_tile.each(function () {\n            $(this).addClass(\"mosaic-drag-cancel\");\n            if ($(this).hasClass(\"mosaic-helper-tile-new\")) {\n              $(document).trigger(\"mousedown\");\n            } else {\n              $(document).trigger(\"mouseup\");\n            }\n          });\n        // Deselect tile\n        } else {\n          $(\".mosaic-selected-tile\", $.mosaic.document).each(function(){\n            var tile = new Tile(this);\n            tile.blur();\n          });\n        }\n\n        // Find resize helper\n        $(\".mosaic-resize-handle-helper\",\n          $.mosaic.document).each(function () {\n\n          // Remove resizing state\n          $(this).parents(\"[data-panel]\")\n            .removeClass(\"mosaic-panel-resizing\");\n          $(this).parent().removeClass(\"mosaic-row-resizing\");\n          $(this).parent().children(\".mosaic-resize-placeholder\")\n            .remove();\n\n          // Remove helper\n          $(this).remove();\n        });\n\n        // Hide overlay\n        if ($.mosaic.overlay.app) {\n          $.mosaic.overlay.app.hide();\n          // $.mosaic.overlay.$el.trigger('destroy.modal.patterns');;\n        }\n      }\n    };\n\n    // Bind event and add to array\n    $($.mosaic.document).off('keydown').on('keydown', DocumentKeydown);\n    $($.mosaic.document).off('keyup').on('keyup', DocumentKeyup);\n\n    // Add deselect\n    var DocumentMousedown = function (e) {\n\n      // Get element\n      var elm;\n      if (e.target) {\n        elm = e.target;\n      } else if (e.srcElement) {\n        elm = e.srcElement;\n      }\n\n      // If clicked TinyMCE toolbar\n      if ($(elm).parents(\".mce-panel\").length > 0) {\n        return;\n      }\n\n      // If clicked outside a tile\n      if ($(elm).parents(\".mosaic-tile\").length === 0) {\n\n        // Check if outside toolbar\n        if ($(elm).parents(\".mosaic-toolbar\").length === 0) {\n\n          // Deselect tiles\n          $(\".mosaic-selected-tile\", $.mosaic.document)\n            .removeClass(\"mosaic-selected-tile\")\n            .children(\".mosaic-tile-content\").blur();\n\n          // Set actions\n          $.mosaic.options.toolbar.trigger(\"selectedtilechange\");\n          $.mosaic.options.panels.mosaicSetResizeHandleLocation();\n        }\n      }\n\n      // Find resize helper\n      var new_tile = $(\".mosaic-helper-tile-new\", $.mosaic.document);\n      if (new_tile.length > 0) {\n        new_tile.each(function () {\n\n          // Handle drag end\n          $(this).mosaicHandleDragEnd();\n        });\n      }\n    };\n\n    // Bind event and add to array\n    $($.mosaic.document).off('mousedown').on('mousedown', DocumentMousedown);\n\n    // Handle mouse move event\n    var DocumentMousemove = function (e) {\n\n      // Find resize helper\n      $(\".mosaic-helper-tile-new\", $.mosaic.document).each(function () {\n\n        // Get offset\n        var offset = $(this).parent().offset();\n\n        // Get mouse x\n        $(this).css(\"top\", e.pageY + 3 - offset.top);\n        $(this).css(\"left\", e.pageX + 3 - offset.left);\n      });\n\n      // Find resize helper\n      $(\".mosaic-resize-handle-helper\", $.mosaic.document).each(function () {\n        var columns;\n\n        var cur_snap_offset;\n\n        // Get helper\n        var helper = $(this);\n\n        // Get row\n        var row = helper.parent();\n\n        // Get mouse x\n        var mouse_x = parseFloat(e.pageX - row.offset().left - 4);\n\n        // Get mouse percentage\n        var mouse_percentage = (mouse_x / helper.data(\"row_width\")) * 100;\n\n        // Get closest snap location\n        var snap = 25;\n        var snap_offset = 1000;\n        $([25, 33, 50, 67, 75]).each(function () {\n          cur_snap_offset = Math.abs(this - mouse_percentage);\n          if (cur_snap_offset < snap_offset) {\n            snap = this;\n            snap_offset = cur_snap_offset;\n          }\n        });\n\n        // If 2 columns\n        if (helper.data(\"nr_of_columns\") === 2) {\n\n          // Check if resize\n          if (helper.data(\"column_sizes\").split(\" \")[0] !== snap) {\n\n            // Loop through columns\n            row.children(\".mosaic-resize-placeholder\").each(function (i) {\n\n              // First column\n              if (i === 0) {\n\n                // Set new width and position\n                $(this)\n                  .removeClass($.mosaic.layout.widthClasses.join(\" \"))\n                  .addClass(GetWidthClassByInt(parseInt(snap, 10)));\n\n              // Second column\n              } else {\n\n                // Set new width and position\n                $(this)\n                  .removeClass($.mosaic.layout.positionClasses.join(\" \").replace(/position/g, \"resize\"))\n                  .removeClass($.mosaic.layout.widthClasses.join(\" \"))\n                  .addClass(GetWidthClassByInt(parseInt(100 - snap, 10)))\n                  .addClass(GetPositionClassByInt(parseInt(snap, 10)).replace(\"position\", \"resize\"));\n\n                // Set helper\n                helper\n                  .removeClass($.mosaic.layout.positionClasses.join(\" \").replace(/position/g, \"resize\"))\n                  .addClass(GetPositionClassByInt(parseInt(snap, 10)).replace(\"position\", \"resize\"));\n              }\n            });\n\n            // Set new size\n            $(this).data(\"column_sizes\", snap + \" \" + (100 - snap));\n          }\n\n        // Else 3 columns\n        } else {\n\n          // Get resize handle index\n          var resize_handle_index = $(this).data(\"resize_handle_index\");\n\n          // Check if first resize handle\n          if (resize_handle_index === 1) {\n\n            // Check if resize\n            if ((helper.data(\"column_sizes\").split(\" \")[$(this).data(\"resize_handle_index\") - 1] !== snap) &&\n                (parseInt(snap, 10) <= 50)) {\n\n              // Get columns\n              columns = row.children(\".mosaic-resize-placeholder\");\n\n              // Remove position and width classes\n              columns\n                .removeClass($.mosaic.layout.positionClasses.join(\" \").replace(/position/g, \"resize\"))\n                .removeClass($.mosaic.layout.widthClasses.join(\" \"));\n              helper\n                .removeClass($.mosaic.layout.positionClasses.join(\" \").replace(/position/g, \"resize\"))\n                .addClass(GetPositionClassByInt(parseInt(snap, 10)).replace(\"position\", \"resize\"));\n\n              // Get layout\n              switch (parseInt(snap, 10)) {\n              case 25:\n                $(columns.get(0)).addClass(GetPositionClassByInt(0).replace(\"position\", \"resize\") + \" \" + GetWidthClassByInt(25));\n                $(columns.get(1)).addClass(GetPositionClassByInt(25).replace(\"position\", \"resize\") + \" \" + GetWidthClassByInt(50));\n                $(columns.get(2)).addClass(GetPositionClassByInt(75).replace(\"position\", \"resize\") + \" \" + GetWidthClassByInt(25));\n                helper.data(\"column_sizes\", \"25 50 25\");\n                break;\n              case 33:\n                $(columns.get(0)).addClass(GetPositionClassByInt(0).replace(\"position\", \"resize\") + \" \" + GetWidthClassByInt(33));\n                $(columns.get(1)).addClass(GetPositionClassByInt(33).replace(\"position\", \"resize\") + \" \" + GetWidthClassByInt(33));\n                $(columns.get(2)).addClass(GetPositionClassByInt(66).replace(\"position\", \"resize\") + \" \" + GetWidthClassByInt(33));\n                helper.data(\"column_sizes\", \"33 33 33\");\n                break;\n              case 50:\n                $(columns.get(0)).addClass(GetPositionClassByInt(0).replace(\"position\", \"resize\") + \" \" + GetWidthClassByInt(50));\n                $(columns.get(1)).addClass(GetPositionClassByInt(50).replace(\"position\", \"resize\") + \" \" + GetWidthClassByInt(25));\n                $(columns.get(2)).addClass(GetPositionClassByInt(75).replace(\"position\", \"resize\") + \" \" + GetWidthClassByInt(25));\n                helper.data(\"column_sizes\", \"50 25 25\");\n                break;\n              }\n            }\n\n          // Else second resize handle\n          } else {\n\n            // Check if resize\n            if ((helper.data(\"column_sizes\").split(\" \")[$(this).data(\"resize_handle_index\")] !== (100 - snap)) &&\n                (parseInt(snap, 10) >= 50)) {\n\n              // Get columns\n              columns = row.children(\".mosaic-resize-placeholder\");\n\n              // Remove position and width classes\n              columns\n                .removeClass($.mosaic.layout.positionClasses.join(\" \").replace(/position/g, \"resize\"))\n                .removeClass($.mosaic.layout.widthClasses.join(\" \"));\n              helper\n                .removeClass($.mosaic.layout.positionClasses.join(\" \").replace(/position/g, \"resize\"))\n                .addClass(GetPositionClassByInt(parseInt(snap, 10)).replace(\"position\", \"resize\"));\n\n              // Get layout\n              switch (parseInt(snap, 10)) {\n              case 50:\n                $(columns.get(0)).addClass(GetPositionClassByInt(0).replace(\"position\", \"resize\") + \" \" + GetWidthClassByInt(25));\n                $(columns.get(1)).addClass(GetPositionClassByInt(25).replace(\"position\", \"resize\") + \" \" + GetWidthClassByInt(25));\n                $(columns.get(2)).addClass(GetPositionClassByInt(50).replace(\"position\", \"resize\") + \" \" + GetWidthClassByInt(50));\n                helper.data(\"column_sizes\", \"25 25 50\");\n                break;\n              case 66:\n              case 67:\n                $(columns.get(0)).addClass(GetPositionClassByInt(0).replace(\"position\", \"resize\") + \" \" + GetWidthClassByInt(33));\n                $(columns.get(1)).addClass(GetPositionClassByInt(33).replace(\"position\", \"resize\") + \" \" + GetWidthClassByInt(33));\n                $(columns.get(2)).addClass(GetPositionClassByInt(66).replace(\"position\", \"resize\") + \" \" + GetWidthClassByInt(33));\n                helper.data(\"column_sizes\", \"33 33 33\");\n                break;\n              case 75:\n                $(columns.get(0)).addClass(GetPositionClassByInt(0).replace(\"position\", \"resize\") + \" \" + GetWidthClassByInt(25));\n                $(columns.get(1)).addClass(GetPositionClassByInt(25).replace(\"position\", \"resize\") + \" \" + GetWidthClassByInt(50));\n                $(columns.get(2)).addClass(GetPositionClassByInt(75).replace(\"position\", \"resize\") + \" \" + GetWidthClassByInt(25));\n                helper.data(\"column_sizes\", \"25 50 25\");\n                break;\n              }\n            }\n          }\n        }\n      });\n    };\n\n    // Bind event and add to array\n    $($.mosaic.document).off('mousemove').on('mousemove', DocumentMousemove);\n    $($.mosaic.document).off('dragover').on('dragover', DocumentMousemove);\n\n    // Handle mouse up event\n    var DocumentMouseup = function (e) {\n\n      // Find resize helper\n      $(\".mosaic-resize-handle-helper\", $.mosaic.document).each(function () {\n\n        // Get panel\n        var panel = $(this).parents(\"[data-panel]\");\n\n        // Get column sizes\n        var column_sizes = $(this).data(\"column_sizes\").split(\" \");\n\n        // Set column sizes\n        $(this).parent().children(\".mosaic-grid-cell\").each(function (i) {\n          var offset_x = 0;\n          for (var j = 0; j < i; j += 1) {\n            offset_x += parseInt(column_sizes[j], 10);\n          }\n          $(this)\n            .removeClass($.mosaic.layout.positionClasses.join(\" \"))\n            .removeClass($.mosaic.layout.widthClasses.join(\" \"))\n            .addClass(GetPositionClassByInt(offset_x) + \" \" + GetWidthClassByInt(parseInt(column_sizes[i], 10)));\n        });\n\n        // Remove resizing state\n        panel.removeClass(\"mosaic-panel-resizing\");\n        $(this).parent().removeClass(\"mosaic-row-resizing\");\n        $(this).parent().children(\".mosaic-resize-placeholder\").remove();\n\n        // Set resize handles\n        $(this).parent().mosaicSetResizeHandles();\n        panel.mosaicSetResizeHandleLocation();\n        var $tile = panel.find(\".mosaic-selected-tile\");\n        if($tile.size() > 0){\n          var tile = new Tile($tile);\n          tile.select();\n        }\n        // Remove helper\n        $(this).remove();\n      });\n    };\n\n    // Bind event and add to array\n    $($.mosaic.document).off('mouseup').on('mouseup', DocumentMouseup);\n\n    // Handle mousemove on tile\n    var TileMousemove = function (e) {\n\n      // Check if dragging\n      if ($(this).parents(\"[data-panel]\").hasClass(\"mosaic-panel-dragging\")) {\n\n        // Hide all dividers\n        $(\".mosaic-selected-divider\", $.mosaic.document)\n          .removeClass(\"mosaic-selected-divider\");\n\n        // Don't show dividers if above original or floating tile\n        if (($(this).hasClass(\"mosaic-original-tile\") === false) &&\n          ($(this).hasClass(\"mosaic-tile-align-left\") === false) &&\n          ($(this).hasClass(\"mosaic-tile-align-right\") === false)) {\n\n          // Get direction\n          var dir = $(this).mosaicGetDirection(e);\n          var divider = $(this).children(\".mosaic-divider-\" + dir);\n\n          // Check if left or right divider\n          if ((dir === \"left\") || (dir === \"right\")) {\n            var row = divider.parent().parent().parent();\n\n            if (row.children(\".mosaic-grid-cell\").length >= $('.mosaic-panel').data('max-columns')) {\n                // This row already up to the max amount of columns allowed for this layout\n                // do not allow this item to be dropped alingside any elements in this row\n                return;\n            }\n\n            // If row has multiple columns\n            if (row.children(\".mosaic-grid-cell\").length > 1) {\n              divider.height(row.height() + 5);\n              divider.css('top', (row.offset().top - divider.parent().offset().top) - 5);\n            } else {\n              divider.height(divider.parent().height() + 5);\n              divider.css('top', -5);\n            }\n          }\n\n          // Show divider\n          divider.addClass(\"mosaic-selected-divider\");\n        }\n      }\n    };\n\n    // Bind events\n    $($.mosaic.document).off(\"mousemove\", \".mosaic-tile\").on(\"mousemove\", \".mosaic-tile\", TileMousemove);\n    $($.mosaic.document).off(\"dragover\", \".mosaic-tile\").on(\"dragover\", \".mosaic-tile\", TileMousemove);\n\n    // On click select the current tile\n    $($.mosaic.document).off(\"click\", \".mosaic-tile\").on(\"click\", \".mosaic-tile\", function () {\n      if($(\".mosaic-helper-tile-new\", $.mosaic.document).length === 0){\n        // only if not dropping tile\n        var tile = new Tile(this);\n        tile.select();\n      }\n    });\n\n    var applyCustomCss = function (e) {\n      if ($(e.target).attr('id') === 'custom-css-input-box'){\n        return;\n      }\n      $.each($(\"div.mosaic-set-custom-css\"), function (){\n        var parent = $(this).parent();\n        var base_css = 'mosaic-grid-row';\n        if (parent.hasClass('mosaic-innergrid-row')){\n          base_css = 'mosaic-grid-row mosaic-innergrid-row';\n        }\n        var classes = $(this).find(\"input#custom-css-input-box\").val();\n        base_css += ' ' + classes;\n        parent.attr('class', base_css);\n        $(this).remove();\n      });\n    };\n\n    var CustomCSSOnDblClick = function (e) {\n      // Only do this for \"mosaic-grid-row\" if advanced mode is enabled\n      var target = $(e.target);\n      var obj = target.parents(\"[data-panel]\");\n      if (obj.hasClass('mosaic-advanced') && target.hasClass('mosaic-grid-row')){\n        // Check we don't have an input field already\n        if ($(target).find(\".mosaic-set-custom-css\").length > 0){\n          return;\n        }\n\n        // We are in advance mode\n        var custom_classes = [];\n        $.each(target.attr('class').split(' '), function () {\n          if ((this !== undefined) && (this !== 'mosaic-grid-row') && (this !== 'mosaic-innergrid-row')){\n            custom_classes.push(this);\n          }\n        });\n        var input = $(\"<input type='text' id='custom-css-input-box'></input>\").val(custom_classes.join(' '));\n        var div = $(\"<div></div>\")\n                  .addClass(\"mosaic-set-custom-css\")\n                  .append($(\"<label>Custom CSS for this row:</label>\"))\n                  .append(input);\n        target.append(div);\n      }\n\n    };\n\n    $($.mosaic.document).on('dblclick', '.mosaic-grid-row', CustomCSSOnDblClick);\n    $($.mosaic.document).on('click', applyCustomCss);\n\n    // Loop through matched elements\n    var total = this.length;\n    return this.each(function (i) {\n\n      // Get current object\n      var obj = $(this);\n\n      // Add icons and dividers\n      obj.find('.mosaic-tile').each(function(){\n        var tile = new Tile(this);\n        tile.initialize();\n        tile.scanRegistry();\n      });\n      obj.find('.mosaic-tile').mosaicAddDrag();\n      obj.mosaicAddEmptyRows();\n      obj.children('.mosaic-grid-row').mosaicSetResizeHandles();\n      if (i === (total - 1)) {\n\n        // Get biggest panel\n        var width = 0;\n        var index = 0;\n        $.mosaic.options.panels.each(function (j) {\n          if ($(this).width() > width) {\n            width = $(this).width();\n            index = j;\n          }\n        });\n\n        // Select first tile in biggest panel\n        var $tile = $.mosaic.options.panels.eq(index).find('.mosaic-tile:first');\n        if($tile.size() > 0){\n          var tile = new Tile($tile);\n          tile.select();\n        }\n      }\n\n      obj.find('.mosaic-innergrid-row').each(function(){\n        $(this).mosaicAddMouseMoveInnergridRow();\n        $(this).mosaicSetResizeHandles();\n        var that = $(this);\n        _.each(['top', 'bottom'], function(pos){\n          that.append(\n            $($.mosaic.document.createElement(\"div\"))\n            .addClass(\"mosaic-divider mosaic-divider-\" + pos)\n            .append(\n                $($.mosaic.document.createElement(\"div\"))\n                    .addClass(\"mosaic-divider-dot\")\n            )\n          );\n        });\n      });\n\n    });\n\n  };\n\n  /**\n   * Add mouse move handler to empty rows\n   *\n   * @id jQuery.mosaicAddMouseMoveEmptyRow\n   * @return {Object} jQuery object\n   */\n  $.fn.mosaicAddMouseMoveEmptyRow = function () {\n\n    // Loop through matched elements\n    return this.each(function () {\n\n      // Mouse move event\n      $(this).mousemove(function (/* e */) {\n\n        // Get layout object\n        var obj = $(this).parents(\"[data-panel]\");\n\n        // Check if dragging\n        if (obj.hasClass(\"mosaic-panel-dragging\")) {\n\n          // Hide all dividers\n          $(\".mosaic-selected-divider\", $.mosaic.document)\n            .removeClass(\"mosaic-selected-divider\");\n          $(this).children(\"div\").addClass(\"mosaic-selected-divider\");\n        }\n      });\n    });\n  };\n\n  /**\n   * Add mouse move handler to inner grid rows\n   *\n   * @id jQuery.mosaicAddMouseMoveInnergridRow\n   * @return {Object} jQuery object\n   */\n  $.fn.mosaicAddMouseMoveInnergridRow = function () {\n\n    // Loop through matched elements\n    return this.each(function () {\n\n      // Mouse move event\n      $(this).mousemove(function (e) {\n\n        // Get layout object\n        var obj = $(this).parents(\"[data-panel]\");\n\n        // Check if dragging\n        if (obj.hasClass(\"mosaic-panel-dragging\")) {\n\n          // Hide all dividers\n          $(\".mosaic-selected-divider\", $.mosaic.document)\n            .removeClass(\"mosaic-selected-divider\");\n\n          // Get direction\n          var dir = $(this).mosaicGetDirection(e);\n          var divider = $(this).children(\".mosaic-divider-\" + dir);\n\n          // Show divider\n          divider.addClass(\"mosaic-selected-divider\");\n        }\n      });\n    });\n  };\n\n  /**\n   * Add empty rows\n   *\n   * @id jQuery.mosaicAddEmptyRows\n   * @return {Object} jQuery object\n   */\n  $.fn.mosaicAddEmptyRows = function () {\n\n    // Loop through matched elements\n    return this.each(function () {\n\n      // Loop through rows\n      $(this).find(\".mosaic-grid-row:not(.mosaic-innergrid-row)\").each(function (i) {\n        $(this).before(\n          $($.mosaic.document.createElement(\"div\"))\n            .addClass(\"mosaic-grid-row mosaic-empty-row\")\n            .append($($.mosaic.document.createElement(\"div\"))\n              .addClass(\"mosaic-grid-cell mosaic-width-full mosaic-position-leftmost\")\n              .append($($.mosaic.document.createElement(\"div\"))\n                .append($($.mosaic.document.createElement(\"div\"))\n                  .addClass(\"mosaic-tile-outer-border\")\n                  .append(\n                    $($.mosaic.document.createElement(\"div\"))\n                      .addClass(\"mosaic-divider-dot\")\n                  )\n                )\n              )\n            )\n            .mosaicAddMouseMoveEmptyRow()\n        );\n        if ($(this).nextAll(\".mosaic-grid-row\").length === 0) {\n          $(this).after(\n            $($.mosaic.document.createElement(\"div\"))\n              .addClass(\"mosaic-grid-row mosaic-empty-row\")\n              .append($($.mosaic.document.createElement(\"div\"))\n                .addClass(\"mosaic-grid-cell mosaic-width-full mosaic-position-leftmost\")\n                .append($($.mosaic.document.createElement(\"div\"))\n                  .append($($.mosaic.document.createElement(\"div\"))\n                    .addClass(\"mosaic-tile-outer-border\")\n                    .append(\n                      $($.mosaic.document.createElement(\"div\"))\n                        .addClass(\"mosaic-divider-dot\")\n                    )\n                  )\n                )\n              )\n              .mosaicAddMouseMoveEmptyRow()\n          );\n        }\n      });\n\n      if ($(this).find(\".mosaic-grid-row:not(.mosaic-innergrid-row)\").length === 0) {\n        $(this).append(\n          $($.mosaic.document.createElement(\"div\"))\n            .addClass(\"mosaic-grid-row mosaic-empty-row\")\n            .append($($.mosaic.document.createElement(\"div\"))\n              .addClass(\"mosaic-grid-cell mosaic-width-full mosaic-position-leftmost\")\n              .append($($.mosaic.document.createElement(\"div\"))\n                .append($($.mosaic.document.createElement(\"div\"))\n                  .addClass(\"mosaic-tile-outer-border\")\n                  .append($($.mosaic.document.createElement(\"div\"))\n                      .addClass(\"mosaic-divider-dot\")\n                  )\n                )\n              )\n            )\n            .mosaicAddMouseMoveEmptyRow()\n        );\n      }\n    });\n  };\n\n  /**\n   * Get the width class of the matched elements\n   *\n   * @id jQuery.mosaicGetWidthClass\n   * @return {String} Name of the width class\n   */\n  $.fn.mosaicGetWidthClass = function () {\n\n    var x;\n\n    // Loop through width classes\n    for (x in $.mosaic.layout.widthClasses) {\n\n      if ($.mosaic.layout.widthClasses.hasOwnProperty(x)) {\n\n        // If class found\n        if ($(this).hasClass($.mosaic.layout.widthClasses[x])) {\n\n          // Return the width class\n          return $.mosaic.layout.widthClasses[x];\n        }\n      }\n    }\n\n    // Loop through width classes\n    for (x in $.mosaic.layout.widthClasses) {\n\n      if ($.mosaic.layout.widthClasses.hasOwnProperty(x)) {\n        // If class found\n        if ($(this).hasClass($.mosaic.layout.widthClasses[x].replace(\"position\", \"resize\"))) {\n\n          // Return the width class\n          return $.mosaic.layout.widthClasses[x];\n        }\n      }\n    }\n\n    // Fallback\n    return $.mosaic.layout.widthClasses[0];\n  };\n\n  /**\n   * Get the position class of the matched elements\n   *\n   * @id jQuery.mosaicGetPositionClass\n   * @return {String} Name of the position class\n   */\n  $.fn.mosaicGetPositionClass = function () {\n\n    var x;\n\n    // Loop through position classes\n    for (x in $.mosaic.layout.positionClasses) {\n\n      // If class found\n      if ($(this).hasClass($.mosaic.layout.positionClasses[x])) {\n\n        // Return the position class\n        return $.mosaic.layout.positionClasses[x];\n      }\n    }\n\n    // Loop through resize classes\n    for (x in $.mosaic.layout.positionClasses) {\n\n      // If class found\n      if ($(this).hasClass($.mosaic.layout.positionClasses[x].replace(\"position\", \"resize\"))) {\n\n        // Return the position class\n        return $.mosaic.layout.positionClasses[x];\n      }\n    }\n\n    // Fallback\n    return $.mosaic.layout.positionClasses[0];\n  };\n\n  /**\n   * Add draggable to matched elements\n   *\n   * @id jQuery.mosaicAddDrag\n   * @return {Object} jQuery object\n   */\n  $.fn.mosaicAddDrag = function () {\n\n    // Loop through matched elements\n    return this.each(function () {\n\n      var tile = $(this);\n\n      var DragMove = function (event) {\n        var helper = $('.mosaic-helper-tile', $.mosaic.document);\n        var offset = helper.parents(\"[data-panel]\").offset();\n        helper.css(\"top\", event.pageY + 3 - offset.top);\n        helper.css(\"left\", event.pageX + 3 - offset.left);\n      };\n      var DragStop = function () {\n        var helper = $('.mosaic-helper-tile', $.mosaic.document);\n        $($.mosaic.document)\n          .unbind('mousemove', DragMove)\n          .unbind('mouseup', DragStop);\n\n        // Handle drag end\n        helper.mosaicHandleDragEnd();\n        helper.remove();\n      };\n      return tile.each(function () {\n        tile.find('div.mosaic-drag-handle')\n          .unbind('mousedown')\n          .bind('mousedown', function (event) {\n\n          var downX = event.pageX;\n          var downY = event.pageY;\n          var DragCheckMove = function (event) {\n            if (Math.max(\n              Math.abs(downX - event.pageX),\n              Math.abs(downY - event.pageY)\n            ) >= 1) {\n\n              // Add dragging class to content area\n              $.mosaic.options.panels.addClass(\"mosaic-panel-dragging\");\n              $(\".mosaic-selected-tile\", $.mosaic.document)\n                .removeClass(\"mosaic-selected-tile\")\n                .children(\".mosaic-tile-content\").blur();\n\n              var originaltile = $(event.target).parents(\".mosaic-tile\");\n\n              var clone = originaltile.clone(true);\n              originaltile.addClass(\"mosaic-original-tile\");\n\n              originaltile.parents(\"[data-panel]\").append(clone);\n              clone\n                .css({\n                  \"width\": originaltile.width(),\n                  \"position\": \"absolute\",\n                  \"opacity\": 0.5\n                })\n                .addClass(\"mosaic-helper-tile\");\n              $($.mosaic.document).mousemove(DragMove);\n              $($.mosaic.document).mouseup(DragStop);\n              $($.mosaic.document).unbind('mousemove', DragCheckMove);\n            }\n          };\n          $($.mosaic.document).bind('mousemove', DragCheckMove);\n          $($.mosaic.document).bind('mouseup', function () {\n            $($.mosaic.document).unbind('mousemove', DragCheckMove);\n          });\n        });\n      });\n    });\n  };\n\n  /**\n   * Event handler for drag end\n   *\n   * @id jQuery.mosaicHandleDragEnd\n   * @return {Object} jQuery object\n   */\n  $.fn.mosaicHandleDragEnd = function () {\n    // Get layout object\n    var obj = $(this).parents(\"[data-panel]\");  // jshint ignore:line\n\n    // Remove dragging class from content\n    $.mosaic.options.panels.removeClass(\"mosaic-panel-dragging mosaic-panel-dragging-new\");\n\n    // Get direction\n    var divider = $(\".mosaic-selected-divider\", $.mosaic.document);\n    var drop = divider.parent();\n    var dir = \"\";\n    _.each(['top', 'bottom', 'left', 'right'], function(_dir){\n      if(divider.hasClass(\"mosaic-divider-\" + _dir)){\n        dir = _dir;\n      }\n    });\n    divider.removeClass(\"mosaic-selected-divider\");\n\n    // True if new tile is inserted\n    var new_tile = $(\".mosaic-helper-tile-new\", $.mosaic.document).length > 0;\n    var original_tile = $(\".mosaic-original-tile\", $.mosaic.document);\n\n    // If divider is not found or not sane drop, act like esc is pressed\n    if (divider.length === 0 || drop.hasClass('mosaic-helper-tile')) {\n      original_tile.addClass(\"mosaic-drag-cancel\");\n    }\n\n    // Check if esc is pressed\n    if (original_tile.hasClass(\"mosaic-drag-cancel\")) {\n\n      // Remove cancel class\n      original_tile.removeClass(\"mosaic-drag-cancel\");\n\n      // Check if new tile\n      if (!new_tile) {\n\n        // Make sure the original tile doesn't get removed\n        original_tile\n          .removeClass(\"mosaic-original-tile\")\n          .addClass(\"mosaic-new-tile\");\n      }\n\n    // Dropped on empty row\n    } else if (drop.hasClass(\"mosaic-empty-row\")) {\n\n      // Replace empty with normal row class\n      drop\n        .removeClass(\"mosaic-empty-row\")\n        .attr('class', original_tile.parents('.mosaic-grid-row').first().attr('class'))\n        .unbind('mousemove');\n\n      // Clean cell\n      drop.children(\".mosaic-grid-cell\")\n        .children(\"div\").remove();\n\n      // Add tile to empty row\n      drop.children(\".mosaic-grid-cell\")\n        .append(original_tile\n          .clone(true)\n          .removeClass(\"mosaic-original-tile mosaic-helper-tile mosaic-helper-tile-new mosaic-tile-align-right mosaic-tile-align-left\")\n          .css({width: \"\", left: \"\", top: \"\"})\n          .mosaicAddDrag()\n          .addClass(\"mosaic-new-tile\")\n      );\n\n    // Not dropped on tile\n    } else if (drop.hasClass(\"mosaic-tile\") === false && drop.hasClass(\"mosaic-innergrid-row\") === false) {\n\n      // Check if new tile\n      if (!new_tile) {\n\n        // Make sure the original tile doesn't get removed\n        original_tile\n          .removeClass(\"mosaic-original-tile\")\n          .addClass(\"mosaic-new-tile\");\n      }\n    // Check if max columns rows is reached\n    } else if ((drop.parent().parent().children(\".mosaic-grid-cell\").length >= obj.data('max-columns')) && (dir === \"left\" || dir === \"right\")) {\n\n      // Check if new tile\n      if (!new_tile) {\n\n        // Make sure the original tile doesn't get removed\n        original_tile\n          .removeClass(\"mosaic-original-tile\")\n          .addClass(\"mosaic-new-tile\");\n      }\n\n    // Dropped on row or below an inner grid\n    } else {\n\n        /* When the layout object has the special class (Assigned in line 82), wrap\n           the tile in a div.mosaic-grid-cell so it would create an inner column */\n        var tile_to_drop = original_tile\n                            .clone(true)\n                            .removeClass(\"mosaic-original-tile mosaic-helper-tile mosaic-helper-tile-new mosaic-tile-align-right mosaic-tile-align-left\")\n                            .css({width: \"\", left: \"\", top: \"\"})\n                            .mosaicAddDrag()\n                            .addClass(\"mosaic-new-tile\")\n        if (obj.hasClass('inner-subcolumn')){\n            tile_to_drop = $($.mosaic.document.createElement(\"div\"))\n                            .addClass(\"mosaic-grid-row mosaic-innergrid-row\")\n                            .append($($.mosaic.document.createElement(\"div\"))\n                              .addClass(\"mosaic-grid-cell mosaic-width-full mosaic-position-leftmost\")\n                              .append($($.mosaic.document.createElement(\"div\"))\n                                .append($($.mosaic.document.createElement(\"div\"))\n                                  .addClass(\"mosaic-innergrid-outer-border\")\n                                )\n                              ).append(tile_to_drop)\n                            )\n                            .mosaicAddMouseMoveInnergridRow();\n            _.each(['top', 'bottom'], function(pos){\n              tile_to_drop.append(\n                $($.mosaic.document.createElement(\"div\"))\n                .addClass(\"mosaic-divider mosaic-divider-\" + pos)\n                .append(\n                    $($.mosaic.document.createElement(\"div\"))\n                        .addClass(\"mosaic-divider-dot\")\n                )\n              );\n            });\n        };\n\n      // If top\n      if (dir === \"top\") {\n        // Add tile before\n        drop.before(tile_to_drop);\n\n      // If bottom\n      } else if (dir === \"bottom\") {\n        // Add tile after\n        drop.after(tile_to_drop);\n\n      // If left\n      } else if ((dir === \"left\") || (dir === \"right\")) {\n\n        // Check if only 1 column in the row\n        if (drop.parent().parent().children(\".mosaic-grid-cell\").length === 1) {\n\n          // Put tiles above dropped tile in a new row above\n          var prev_elms = drop.prevAll();\n          if (prev_elms.length > 0) {\n            drop.parent().parent()\n              .before($($.mosaic.document.createElement(\"div\"))\n                .addClass(\"mosaic-grid-row\")\n                .append($($.mosaic.document.createElement(\"div\"))\n                  .addClass(\"mosaic-grid-cell mosaic-width-full mosaic-position-leftmost\")\n                  .append($(prev_elms.get().reverse()).clone(true).mosaicAddDrag())\n                )\n              );\n            prev_elms.remove();\n          }\n\n          // Put tiles below dropped tile in a new row below\n          var next_elms = drop.nextAll();\n          if (next_elms.length > 0) {\n            drop.parent().parent()\n              .after($($.mosaic.document.createElement(\"div\"))\n                .addClass(\"mosaic-grid-row\")\n                .append($($.mosaic.document.createElement(\"div\"))\n                  .addClass(\"mosaic-grid-cell mosaic-width-full mosaic-position-leftmost\")\n                  .append(next_elms.clone(true).mosaicAddDrag())\n                )\n              );\n            next_elms.remove();\n          }\n\n          // Resize current column\n          drop.parent()\n            .removeClass($.mosaic.layout.widthClasses.join(\" \"))\n            .removeClass($.mosaic.layout.positionClasses.join(\" \"))\n            .addClass(\"mosaic-width-half\");\n\n          // Create column with dragged tile in it\n          if (dir === \"left\") {\n            drop.parent()\n              .addClass(\"mosaic-position-half\")\n              .before($($.mosaic.document.createElement(\"div\"))\n                .addClass(\"mosaic-grid-cell mosaic-width-half mosaic-position-leftmost\")\n                .append(\n                  original_tile\n                    .clone(true)\n                    .removeClass(\"mosaic-original-tile mosaic-helper-tile mosaic-helper-tile-new mosaic-tile-align-right mosaic-tile-align-left\")  // jshint ignore:line\n                    .css({width: \"\", left: \"\", top: \"\"})\n                    .mosaicAddDrag()\n                    .addClass(\"mosaic-new-tile\")\n                )\n            );\n          } else {\n            drop.parent()\n              .addClass(\"mosaic-position-leftmost\")\n              .after($($.mosaic.document.createElement(\"div\"))\n                .addClass(\"mosaic-grid-cell mosaic-width-half mosaic-position-half\")\n                .append(\n                  original_tile\n                    .clone(true)\n                    .removeClass(\"mosaic-original-tile mosaic-helper-tile mosaic-helper-tile-new mosaic-tile-align-right mosaic-tile-align-left\")  // jshint ignore:line\n                    .css({width: \"\", left: \"\", top: \"\"})\n                    .mosaicAddDrag()\n                    .addClass(\"mosaic-new-tile\")\n                )\n            );\n          }\n\n          // Add resize handles\n          drop.parent().parent().mosaicSetResizeHandles();\n\n        // Dropped inside column\n        } else {\n\n          // Create new column\n          if (dir === \"left\") {\n            drop.parent()\n              .before($($.mosaic.document.createElement(\"div\"))\n                .addClass(\"mosaic-grid-cell\")\n                .append(\n                  original_tile\n                    .clone(true)\n                    .removeClass(\"mosaic-original-tile mosaic-helper-tile mosaic-helper-tile-new mosaic-tile-align-right mosaic-tile-align-left\")  // jshint ignore:line\n                    .css({width: \"\", left: \"\", top: \"\"})\n                    .mosaicAddDrag()\n                    .addClass(\"mosaic-new-tile\")\n                  )\n              );\n          } else {\n            drop.parent()\n              .after($($.mosaic.document.createElement(\"div\"))\n                .addClass(\"mosaic-grid-cell\")\n                .append(\n                  original_tile\n                    .clone(true)\n                    .removeClass(\"mosaic-original-tile mosaic-helper-tile mosaic-helper-tile-new mosaic-tile-align-right mosaic-tile-align-left\")  // jshint ignore:line\n                    .css({width: \"\", left: \"\", top: \"\"})\n                    .mosaicAddDrag()\n                    .addClass(\"mosaic-new-tile\")\n                  )\n              );\n          }\n\n          // Resize columns\n          drop.parent().parent().mosaicSetColumnSizes();\n\n          // Add resize handles\n          drop.parent().parent().mosaicSetResizeHandles();\n        }\n      }\n    }\n\n    // Remove original tile\n    var original_row = original_tile.parent().parent();\n    $(\".mosaic-original-tile\", $.mosaic.document).remove();\n\n    // Remove remaining empty rows\n    $.mosaic.options.panels.find(\".mosaic-grid-row:not(:has(.mosaic-tile))\").remove();\n    $.mosaic.options.panels.find(\".mosaic-empty-row\").remove();\n\n    // Cleanup original row\n    original_row.mosaicCleanupRow();\n\n    // Add empty rows\n    $.mosaic.options.panels.mosaicAddEmptyRows();\n\n    var $tile = $(\".mosaic-new-tile\", $.mosaic.document);\n    $tile.removeClass(\"mosaic-new-tile\");\n\n    var tile = new Tile($tile);\n\n    var $content = original_tile.find('.mosaic-tile-content');\n    if($content.size() > 0 && $content[0]._preScanHTML){\n      /* set the correct, pre-registry html so tiles render correctly */\n      tile.cacheHtml($content[0]._preScanHTML);\n    }\n\n    // Re-init rich text editor after tile has been moved in DOM\n    if(!tile.isRichText()){\n      tile.scanRegistry();\n    }\n\n    // when a tile with tinymce is dragged, you need to reload the tinymce editor\n    // for all tiles edited over it... This is nasty but seems to be needed.\n    // If not done, those *other* tiles will not be editable\n    $('.mosaic-tile:not(\".mosaic-helper-tile\") .mosaic-tile-content.mosaic-rich-text').each(function(){\n      var atile = new Tile($(this).parent());\n      atile.setupWysiwyg();\n    });\n\n    tile.blur();\n\n    // Select new tile\n    if (new_tile) {\n      tile.focus();\n    }\n  };\n\n  /**\n   * Set the sizes of the column\n   *\n   * @id jQuery.mosaicSetColumnSizes\n   * @return {Object} jQuery object\n   */\n  $.fn.mosaicSetColumnSizes = function () {\n\n    // Loop through matched elements\n    return this.each(function () {\n\n      // Resize columns in the row\n      var nr_of_columns = $(this).children(\".mosaic-grid-cell\").length;\n      $(this)\n        .children(\".mosaic-grid-cell\").each(function (i) {\n          $(this)\n            .removeClass($.mosaic.layout.widthClasses.join(\" \"))\n            .removeClass($.mosaic.layout.positionClasses.join(\" \"));\n\n          // Set width / position\n          switch (nr_of_columns) {\n\n          // 1 column\n          case 1:\n            $(this).addClass(\"mosaic-width-full mosaic-position-leftmost\");\n            break;\n\n          // 2 columns\n          case 2:\n            switch (i) {\n            case 0:\n              $(this).addClass(\"mosaic-width-half mosaic-position-leftmost\");\n              break;\n            case 1:\n              $(this).addClass(\"mosaic-width-half mosaic-position-half\");\n              break;\n            }\n            break;\n\n          // 3 columns\n          case 3:\n            switch (i) {\n            case 0:\n              $(this).addClass(\"mosaic-width-third mosaic-position-leftmost\");\n              break;\n            case 1:\n              $(this).addClass(\"mosaic-width-third mosaic-position-third\");\n              break;\n            case 2:\n              $(this).addClass(\"mosaic-width-third mosaic-position-two-thirds\");\n              break;\n            }\n            break;\n\n          // 4 columns\n          case 4:\n            switch (i) {\n            case 0:\n              $(this).addClass(\"mosaic-width-quarter mosaic-position-leftmost\");\n              break;\n            case 1:\n              $(this).addClass(\"mosaic-width-quarter mosaic-position-quarter\");\n              break;\n            case 2:\n              $(this).addClass(\"mosaic-width-quarter mosaic-position-half\");\n              break;\n            case 3:\n              $(this).addClass(\"mosaic-width-quarter mosaic-position-three-quarters\");\n              break;\n            }\n            break;\n          }\n        });\n    });\n  };\n\n  /**\n   * Add new resize handlers\n   *\n   * @id jQuery.mosaicSetResizeHandles\n   * @return {Object} jQuery object\n   */\n  $.fn.mosaicSetResizeHandles = function () {\n\n    // Loop through matched elements\n    return this.each(function () {\n\n      // Remove resize handles\n      $(this).children(\".mosaic-resize-handle\").remove();\n\n      // Check number of columns\n      var nr_of_columns = $(this).children(\".mosaic-grid-cell\").length;\n      switch (nr_of_columns) {\n      case 2:\n        $(this).append($($.mosaic.document.createElement(\"div\"))\n          .addClass(\"mosaic-resize-handle mosaic-resize-handle-center mosaic-resize-handle-one \" + $($(this).children(\".mosaic-grid-cell\").get(1))  // jshint ignore:line\n            .mosaicGetPositionClass().replace(\"position\", \"resize\")\n          )\n        );\n        break;\n      case 3:\n        $(this).append($($.mosaic.document.createElement(\"div\"))\n          .addClass(\"mosaic-resize-handle mosaic-resize-handle-center mosaic-resize-handle-one \" + $($(this).children(\".mosaic-grid-cell\").get(1))  // jshint ignore:line\n            .mosaicGetPositionClass().replace(\"position\", \"resize\")\n          )\n        );\n        $(this).append($($.mosaic.document.createElement(\"div\"))\n          .addClass(\"mosaic-resize-handle mosaic-resize-handle-center mosaic-resize-handle-two \" + $($(this).children(\".mosaic-grid-cell\").get(2))  // jshint ignore:line\n            .mosaicGetPositionClass().replace(\"position\", \"resize\")\n          )\n        );\n        break;\n      }\n\n      // Mouse down handler on resize handle\n      $(this).children(\".mosaic-resize-handle\").mousedown(function (/* e */) {\n\n        // Get number of columns and current sizes\n        var column_sizes = [];\n        $(this).parent().children(\".mosaic-grid-cell\").each(function () {\n\n          // Add column size\n          switch ($(this).mosaicGetWidthClass()) {\n          case \"mosaic-width-half\":\n            column_sizes.push(\"50\");\n            break;\n          case \"mosaic-width-quarter\":\n            column_sizes.push(\"25\");\n            break;\n          case \"mosaic-width-third\":\n            column_sizes.push(\"33\");\n            break;\n          case \"mosaic-width-two-thirds\":\n            column_sizes.push(\"66\");\n            break;\n          case \"mosaic-width-three-quarters\":\n            column_sizes.push(\"75\");\n            break;\n          }\n\n          // Add placeholder\n          $(this).parent().append($($.mosaic.document.createElement(\"div\"))\n            .addClass(\"mosaic-resize-placeholder \" + $(this).mosaicGetWidthClass() + \" \" + $(this).mosaicGetPositionClass().replace(\"position\", \"resize\"))  // jshint ignore:line\n            .append($($.mosaic.document.createElement(\"div\"))\n              .addClass(\"mosaic-resize-placeholder-inner-border\")\n            )\n          );\n        });\n\n        // Get resize handle index\n        var resize_handle_index = 1;\n        if ($(this).hasClass(\"mosaic-resize-handle-two\")) {\n          resize_handle_index = 2;\n        }\n\n        // Add helper\n        $(this).parent().append($($.mosaic.document.createElement(\"div\"))\n          .addClass(\"mosaic-resize-handle mosaic-resize-handle-helper\")\n          .addClass($(this).mosaicGetPositionClass().replace(\"position\", \"resize\"))\n          .data(\"row_width\", $(this).parent().width())\n          .data(\"nr_of_columns\", $(this).parent().children(\".mosaic-grid-cell\").length)\n          .data(\"column_sizes\", column_sizes.join(\" \"))\n          .data(\"resize_handle_index\", resize_handle_index)\n        );\n\n        // Set resizing state\n        $(this).parents(\"[data-panel]\").addClass(\"mosaic-panel-resizing\");\n        $(this).parent().addClass(\"mosaic-row-resizing\");\n        $(\".mosaic-selected-tile\", $.mosaic.document).children(\".mosaic-tile-content\").blur();\n\n        // Prevent drag event\n        return false;\n      });\n    });\n  };\n\n  /**\n   * Cleanup row after tiles added or removed from the row\n   *\n   * @id jQuery.mosaicCleanupRow\n   * @return {Object} jQuery object\n   */\n  $.fn.mosaicCleanupRow = function () {\n\n    // Loop through matched elements\n    return this.each(function () {\n\n      // Get original row\n      var original_row = $(this);\n\n      // Remove empty columns\n      original_row.children(\".mosaic-grid-cell\").each(function () {\n        if ($(this).children().length === 0) {\n          $(this).remove();\n\n          // Resize columns\n          original_row.mosaicSetColumnSizes();\n        }\n      });\n\n      // Remove row if no tiles inside\n      if (original_row.find(\".mosaic-tile\").length === 0) {\n        var del_row = original_row;\n\n        // Check if next row available\n        if (original_row.nextAll(\".mosaic-grid-row\").length > 0) {\n          original_row = original_row.next(\".mosaic-grid-row\");\n\n        // Check if prev row available\n        } else if (original_row.prevAll(\".mosaic-grid-row\").length > 0) {\n          original_row = original_row.prev(\".mosaic-grid-row\");\n\n        // This is the last row\n        } else {\n          original_row.remove();\n          return;\n        }\n\n        // Remove current row\n        del_row.remove();\n      }\n\n      // XXX ROW MERGING COMMENTED OUT FOR NOW\n      // Check if prev row exists and if both rows only have 1 column\n      // if ((original_row.prevAll(\".mosaic-grid-row\").length > 0) && (original_row.children(\".mosaic-grid-cell\").length === 1) &&\n      //     (original_row.prev().children(\".mosaic-grid-cell\").length === 1)) {\n      //\n      //   // Merge rows\n      //   original_row.children(\".mosaic-grid-cell\").prepend(\n      //     original_row.prev().children(\".mosaic-grid-cell\").children(\".mosaic-tile\")\n      //       .clone(true)\n      //       .mosaicAddDrag()\n      //   );\n      //   original_row.prev().remove();\n      // }\n      //\n      // // Check if next row exists and if both rows only have 1 column\n      // if ((original_row.nextAll(\".mosaic-grid-row\").length > 0) && (original_row.children(\".mosaic-grid-cell\").length === 1) &&\n      //     (original_row.next().children(\".mosaic-grid-cell\").length === 1)) {\n      //\n      //   // Merge rows\n      //   original_row.children(\".mosaic-grid-cell\").append(\n      //     original_row.next().children(\".mosaic-grid-cell\").children(\".mosaic-tile\")\n      //       .clone(true)\n      //       .mosaicAddDrag()\n      //   );\n      //   original_row.next().remove();\n      // }\n\n      // Set resize handles\n      original_row.mosaicSetResizeHandles();\n    });\n  };\n\n  /**\n   * Set the location of the resize handle (left, right or center)\n   *\n   * @id jQuery.mosaicSetResizeHandleLocation\n   * @return {Object} jQuery object\n   */\n  $.fn.mosaicSetResizeHandleLocation = function () {\n\n    // Get panel\n    var obj = $(this);\n\n    // Loop through rows\n    obj.children(\".mosaic-grid-row\").each(function () {\n\n      // Get row\n      var row = $(this);\n\n      // Get cells\n      var cells = row.children(\".mosaic-grid-cell\");\n\n      // Check if 2 or 3 columns\n      if ((cells.length === 2) || (cells.length === 3)) {\n\n        // Remove location classes\n        row.children(\".mosaic-resize-handle\").removeClass(\"mosaic-resize-handle-left mosaic-resize-handle-center mosaic-resize-handle-right\");\n\n        // Check if first column is selected\n        if ($(cells.get(0)).children(\".mosaic-tile\").hasClass(\"mosaic-selected-tile\")) {\n\n          // Set location\n          row.children(\".mosaic-resize-handle-one\").addClass(\"mosaic-resize-handle-left\");\n          row.children(\".mosaic-resize-handle-two\").addClass(\"mosaic-resize-handle-center\");\n\n        // Check if second columns is selected\n        } else if ($(cells.get(1)).children(\".mosaic-tile\").hasClass(\"mosaic-selected-tile\")) {\n\n          // Set location\n          row.children(\".mosaic-resize-handle-one\").addClass(\"mosaic-resize-handle-right\");\n          row.children(\".mosaic-resize-handle-two\").addClass(\"mosaic-resize-handle-left\");\n\n        // Check if third column is selected\n        } else if (cells.length === 3 && $(cells.get(2)).children(\".mosaic-tile\").hasClass(\"mosaic-selected-tile\")) {\n\n          // Set location\n          row.children(\".mosaic-resize-handle-one\").addClass(\"mosaic-resize-handle-center\");\n          row.children(\".mosaic-resize-handle-two\").addClass(\"mosaic-resize-handle-right\");\n\n        // No tile selected\n        } else {\n\n          // Set location\n          row.children(\".mosaic-resize-handle-one\").addClass(\"mosaic-resize-handle-center\");\n          row.children(\".mosaic-resize-handle-two\").addClass(\"mosaic-resize-handle-center\");\n        }\n      }\n    });\n  };\n\n  /**\n   * Get the direction based on the tile size and relative x and y coords of the cursor\n   *\n   * @id jQuery.mosaicGetDirection\n   * @param {Object} e Event object\n   * @return {String} Direction of the cursor relative to the tile\n   */\n  $.fn.mosaicGetDirection = function (e) {\n\n    // Calculate x, y, width and height\n    var width = parseFloat($(this).width());\n    var height = parseFloat($(this).height());\n    var x = parseFloat((e.pageX - $(this).offset().left) - (width / 2));\n    var y = parseFloat((e.pageY - $(this).offset().top) - (height / 2));\n    var halfwidth = width / 2;\n    var halfheight = height / 2;\n\n    // If left of center\n    if (x < 0) {\n\n      // If above center\n      if (y < 0) {\n        if ((x / y) < ((-1 * halfwidth) / (-1 * halfheight))) {\n          return \"top\";\n        } else {\n          return \"left\";\n        }\n      // Below center\n      } else {\n        if ((x / y) < ((-1 * halfwidth) / (halfheight))) {\n          return \"left\";\n        } else {\n          return \"bottom\";\n        }\n      }\n\n    // Right of center\n    } else {\n\n      // If above center\n      if (y < 0) {\n        if ((x / y) < ((1 * halfwidth) / (-1 * halfheight))) {\n          return \"right\";\n        } else {\n          return \"top\";\n        }\n      // Below center\n      } else {\n        if ((x / y) < ((halfwidth) / (halfheight))) {\n          return \"bottom\";\n        } else {\n          return \"right\";\n        }\n      }\n    }\n  };\n\n  /**\n   * Disable edit html source\n   *\n   * @id jQuery.mosaic.disableEditHtmlSource\n   */\n  $.mosaic.disableEditHtmlSource = function () {\n\n    // Find rich text textareas\n    $(\".mosaic-rich-text-textarea\", $.mosaic.document).each(function () {\n\n      // Local variables\n      var tilecontent, text;\n\n      // Get text and tilecontent\n      text = $(this).val();\n      tilecontent = $(this).parent();\n      tilecontent.html(text);\n      var tile = new Tile($(this).parent());\n      tile.setupWysiwyg();\n    });\n  };\n\n\n  /**\n   * Add an apptile with the given value\n   *\n   * @id jQuery.mosaic.addAppTile\n   * @param {String} type Type of the application tile\n   * @param {String} url Url of the application tile\n   * @param {String} id Id of the application tile\n   */\n  $.mosaic.addAppTile = function (type, url /*, id */) {\n\n    // Close overlay\n    if ($.mosaic.overlay.app) {\n      $.mosaic.overlay.app.hide();\n      // $.mosaic.overlay.trigger('destroy.modal.patterns');\n    }\n\n    // Get value\n    $.ajax({\n      type: \"GET\",\n      url: url,\n      success: function (value) {\n\n        // Get dom tree\n        value = $.mosaic.getDomTreeFromHtml(value);\n\n        // Add head tags\n        $.mosaic.addHeadTags(url, value);\n\n        // Add tile\n        $.mosaic.addTile(type, value.find('.temp_body_tag').html(), url);\n      }\n    });\n  };\n\n  /**\n   * Add an apptile with the given value\n   *\n   * @id jQuery.mosaic.addAppTile\n   * @param {String} type Type of the application tile\n   * @param {String} response HTML code to show\n   * @param {String} url Url of the application tile\n   * @param {String} id Id of the application tile\n   */\n  $.mosaic.addAppTileHTML = function (type, response, url) {\n    var value;\n\n    value = $.mosaic.getDomTreeFromHtml(response);\n    $.mosaic.addHeadTags(url, value);\n    $.mosaic.addTile(type, value.find('.temp_body_tag').html(), url);\n  };\n\n\n  /**\n   * Edit an apptile with the given value\n   *\n   * @id jQuery.mosaic.editAppTile\n   * @param {String} type Type of the application tile\n   * @param {String} url Url of the application tile\n   * @param {String} id Id of the application tile\n   */\n  $.mosaic.editAppTile = function (url) {\n\n    // Close overlay\n    $.mosaic.overlay.close();\n\n    // Focus on current window\n    window.parent.focus();\n\n    // Get new value\n    $.ajax({\n      type: \"GET\",\n      url: url,\n      success: function (value) {\n\n        // Get dom tree\n        value = $.mosaic.getDomTreeFromHtml(value);\n\n        // Remove head tags\n        $.mosaic.removeHeadTags(url);\n\n        // Add head tags\n        $.mosaic.addHeadTags(url, value);\n\n        // Update tile\n        var $tile = $('.mosaic-selected-tile .mosaic-tile-content', $.mosaic.document);\n        $tile.html(value.find('.temp_body_tag').html());  // jshint ignore:line\n        $tile.attr('data-tileUrl', url.replace(/&/gim, '&amp;'));\n      }\n    });\n  };\n\n  /**\n   * Add a tile with the given value\n   *\n   * @id jQuery.mosaic.addTile\n   * @param {String} type Type of the application tile\n   * @param {String} value Value of the application tile\n   */\n  $.mosaic.addTile = function (type, value, tileUrl) {\n    // Set dragging state\n    $.mosaic.options.panels.addClass(\"mosaic-panel-dragging mosaic-panel-dragging-new\");\n\n    // Add helper\n    $($.mosaic.options.panels.get(0)).append(\n      $($.mosaic.document.createElement(\"div\"))\n        .addClass(\"mosaic-grid-row\")\n        .append($($.mosaic.document.createElement(\"div\"))\n          .addClass(\"mosaic-grid-cell mosaic-width-half mosaic-position-leftmost\")\n          .append($($.mosaic.document.createElement(\"div\"))\n            .addClass(\"movable removable mosaic-tile mosaic-\" + type + \"-tile\")\n            .append($($.mosaic.document.createElement(\"div\"))\n              .addClass(\"mosaic-tile-content\").attr('data-tileUrl', tileUrl && tileUrl.replace(/&/gim, '&amp;'))\n              .html(value)\n            )\n            .addClass(\"mosaic-helper-tile mosaic-helper-tile-new mosaic-original-tile\")\n          )\n        )\n    );\n\n    // Set helper min size\n    var helper = $.mosaic.options.panels.find(\".mosaic-helper-tile-new\");\n\n    // Get max width\n    var width = 0;\n    $.mosaic.options.panels.each(function () {\n      if ($(this).width() > width) {\n        width = $(this).width();\n      }\n    });\n\n    // Set width\n    if (helper.width() < (width / 4)) {\n      helper.width(width / 4);\n    } else {\n      helper.width(helper.width());\n    }\n\n    var tile = new Tile(helper);\n    tile.initialize();\n    tile.cacheHtml();\n    tile.scanRegistry();\n  };\n\n  /**\n   * Get the default value of the given tile\n   *\n   * @id jQuery.mosaic.getDefaultValue\n   * @param {Object} tile_config Configuration options of the tile\n   * @return {String} Default value of the given tile\n   */\n  $.mosaic.getDefaultValue = function (tile_config) {\n    var editor_id, editor, start, end;\n\n    // Wrap title and description fields for proper styles\n    if (tile_config.name === 'IDublinCore-title') {\n      start = '<h1 class=\"documentFirstHeading\">';\n      end = '</h1>';\n    } else if (tile_config.name === 'IDublinCore-description') {\n      start = '<p class=\"documentDescription\">';\n      end = '</p>';\n    } else {\n      start = '<div>';\n      end = '</div>';\n    }\n\n    switch (tile_config.tile_type) {\n    case \"field\":\n      switch (tile_config.widget) {\n      case \"z3c.form.browser.text.TextWidget\":\n      case \"z3c.form.browser.text.TextFieldWidget\":\n        return start + $(\"#\" + tile_config.id, $.mosaic.document).find('input').attr('value') + end;\n      case \"z3c.form.browser.textarea.TextAreaWidget\":\n      case \"z3c.form.browser.textarea.TextAreaFieldWidget\":\n      case \"z3c.form.browser.textlines.TextLinesWidget\":\n      case \"z3c.form.browser.textlines.TextLinesFieldWidget\":\n        var lines = $(\"#\" + tile_config.id, $.mosaic.document).find('textarea').val().split('\\n');\n        var return_string = \"\";\n        for (var i = 0; i < lines.length; i += 1) {\n          return_string += lines[i] + \"<br/>\";\n        }\n        return start + return_string + end;\n      case \"plone.app.z3cform.widget.RichTextFieldWidget\":\n      case \"plone.app.z3cform.wysiwyg.widget.WysiwygWidget\":\n      case \"plone.app.z3cform.wysiwyg.widget.WysiwygFieldWidget\":\n      case \"plone.app.widgets.dx.RichTextWidget\":\n        editor_id = $('#' + tile_config.id).find('textarea').attr('id');\n        editor = tinymce.get(editor_id);\n        if (editor) {\n          try {\n              return editor.getContent();\n          } catch (e) {\n              return '<div class=\"discreet\">Placeholder for field:<br/><b>' + tile_config.label + '</b></div>';\n          }\n        } else {\n          return '';\n        }\n        break;\n      default:\n        return '<div class=\"discreet\">Placeholder for field:<br/><b>' + tile_config.label + '</b></div>';\n      }\n      break;\n    default:\n      return tile_config.default_value;\n    }\n  };\n\n\n  /**\n   * Get the content of the page which can be saved\n   *\n   * @id jQuery.mosaic.getPageContent\n   * @return {String} Full content of the page\n   */\n  $.mosaic.getPageContent = function (exportLayout) {\n    var getLayoutRow = function(obj){\n        var body = \"\";\n\n        // Check if not an empty row\n        if ($(obj).hasClass(\"mosaic-empty-row\") === false &&\n            $(obj).find('.mosaic-tile').length >= 0) {\n\n            // Add row open tag\n            classNames = $(obj).attr(\"class\");\n            body += '      <div class=\"' + classNames + '\">\\n';\n\n            // Loop through rows\n            $(obj).children(\".mosaic-grid-cell\").each(function () {\n\n                // Add column size\n                switch ($(this).mosaicGetPositionClass()) {\n                    case \"mosaic-position-leftmost\":\n                    position = 1;\n                    break;\n                    case \"mosaic-position-quarter\":\n                    position = 4;\n                    break;\n                    case \"mosaic-position-third\":\n                    position = 5;\n                    break;\n                    case \"mosaic-position-half\":\n                    position = 7;\n                    break;\n                    case \"mosaic-position-two-thirds\":\n                    position = 9;\n                    break;\n                    case \"mosaic-position-three-quarters\":\n                    position = 10;\n                    break;\n                }\n\n                // Add column size\n                switch ($(this).mosaicGetWidthClass()) {\n                    case \"mosaic-width-half\":\n                    size = 6;\n                    break;\n                    case \"mosaic-width-quarter\":\n                    size = 3;\n                    break;\n                    case \"mosaic-width-third\":\n                    size = 4;\n                    break;\n                    case \"mosaic-width-two-thirds\":\n                    size = 8;\n                    break;\n                    case \"mosaic-width-three-quarters\":\n                    size = 9;\n                    break;\n                    case \"mosaic-width-full\":\n                    size = 12;\n                    break;\n                }\n\n                // Add cell start tag\n                body += '        <div class=\"' + $(this).attr(\"class\") + '\">\\n';  // jshint ignore:line\n\n\n                $(this).children().each(function () {\n                    if ($(this).hasClass(\"mosaic-tile\")){\n                        var tile = new Tile(this);\n                        body += tile.getHtmlBody(exportLayout);\n                    } else if ($(this).hasClass(\"mosaic-innergrid-row\")){\n                        body += getLayoutRow(this);\n                    }\n\n                });\n\n                // Add cell end tag\n                body += '        </div>\\n';\n            });\n\n            // Add row close tag\n            body += '      </div>\\n';\n        }\n        return body;\n    };\n\n    // Content\n    var content,\n      position = 1,\n      size = 12,\n      body = \"\",\n      classNames = \"\";\n\n    // Disable edit html source\n    $.mosaic.disableEditHtmlSource();\n\n    // Add body tag\n    body += \"  <body>\\n\";\n\n    // Loop through panels\n    $(\"[data-panel]\", $.mosaic.document).each(function () {\n\n      // Add open panel tag\n      body += '    <div data-panel=\"' + $(this).data(\"panel\") + '\"';\n      body += '         data-max-columns=\"' + $(this).data(\"max-columns\") + '\">\\n';\n\n      $(this).children().each(function () {\n        if ($(this).hasClass(\"mosaic-grid-row\")){\n            body += getLayoutRow(this);\n        }\n      });\n\n      // Add close panel tag\n      body += '    </div>\\n';\n    });\n\n    // Add close tag\n    body += \"  </body>\\n\";\n\n    content = '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\" data-layout=\"' + $.mosaic.options.layout + '\">\\n';  // jshint ignore:line\n    content += body;\n    content += '</html>\\n';\n    return content;\n  };\n\n  $.mosaic.saveTileFormData = function(){\n    $(\"[data-panel]\", $.mosaic.document).each(function () {\n      $(this).find(\".mosaic-tile\").each(function () {\n        var tile = new Tile(this);\n        tile.saveForm();\n      });\n    });\n  };\n\n  $.mosaic.saveLayoutToForm = function(){\n    $.mosaic.saveTileFormData();\n\n    var $customLayout = $(\"#form-widgets-ILayoutAware-customContentLayout, \" +\n                          \"[name='form.widgets.ILayoutAware.customContentLayout']\");\n    if($.mosaic.hasContentLayout){\n      $customLayout.val('');\n    }else{\n      $customLayout.val($.mosaic.getPageContent());\n    }\n  };\n\n  /**\n   * Get the name of the width class of the given integer\n   *\n   * @id GetWidthClassByInt\n   * @param {Integer} column_width Percentage of the column width\n   * @return {String} Classname of the width class of the given integer\n   */\n  function GetWidthClassByInt(column_width) {\n    switch (column_width) {\n    case 25:\n      return \"mosaic-width-quarter\";\n    case 33:\n      return \"mosaic-width-third\";\n    case 50:\n      return \"mosaic-width-half\";\n    case 66:\n    case 67:\n      return \"mosaic-width-two-thirds\";\n    case 75:\n      return \"mosaic-width-three-quarters\";\n    case 100:\n      return \"mosaic-width-full\";\n    }\n\n    // Fallback\n    return \"mosaic-width-full\";\n  }\n\n  /**\n   * Get the name of the position class of the given integer\n   *\n   * @id GetPositionClassByInt\n   * @param {Integer} position Percentage of the column position\n   * @return {String} Classname of the position class of the given integer\n   */\n  function GetPositionClassByInt(position) {\n    switch (position) {\n    case 0:\n      return \"mosaic-position-leftmost\";\n    case 25:\n      return \"mosaic-position-quarter\";\n    case 33:\n      return \"mosaic-position-third\";\n    case 50:\n      return \"mosaic-position-half\";\n    case 66:\n    case 67:\n      return \"mosaic-position-two-thirds\";\n    case 75:\n      return \"mosaic-position-three-quarters\";\n    }\n\n    // Fallback\n    return \"mosaic-position-leftmost\";\n  }\n\n\n  return {\n    Tile: Tile\n  };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++plone++mosaic/js/mosaic.layout.js?");

/***/ }),

/***/ "./.plone/++plone++mosaic/js/mosaic.overlay.js":
/*!*****************************************************!*\
  !*** ./.plone/++plone++mosaic/js/mosaic.overlay.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * This plugin is used to display an overlay\n *\n * @author Rob Gietema\n * @licstart  The following is the entire license notice for the JavaScript\n *            code in this page.\n *\n * Copyright (C) 2010 Plone Foundation\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 2 of the License.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along with\n * this program; if not, write to the Free Software Foundation, Inc., 51\n * Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * @licend  The above is the entire license notice for the JavaScript code in\n *          this page.\n * @version 0.1\n */\n\n/* global window: false */\n/*jslint white: true, browser: true, onevar: true, nomen: true,\neqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true,\nimmed: true, strict: true, maxlen: 150, maxerr: 9999, quotmark: false */\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($) {\n  'use strict';\n\n  // Define mosaic namespace if it doesn't exist\n  if (typeof($.mosaic) === \"undefined\") {\n    $.mosaic = {};\n  }\n\n  // Define the overlay namespace\n  $.mosaic.overlay = {\n  };\n\n  /**\n   * Create a new instance of a mosaic overlay.\n   *\n   * @constructor\n   * @id jQuery.fn.mosaicOverlay\n   * @return {Object} Returns a jQuery object of the matched elements.\n   */\n  $.fn.mosaicOverlay = function () {\n\n    if (typeof($.mosaic.overlay_hide_fields) === \"undefined\") {\n      $.mosaic.overlay_hide_fields = true;\n    }\n\n    // Loop through matched elements\n    return this.each(function () {\n\n      // Get current object\n      var $el = $(this);\n      var $form = $('form', $el);\n      var $h1 = $('h1', $el);\n\n      // Init overlay\n      var $modalStructure = $(\n        '<div class=\"plone-modal-wrapper mosaic-overlay\">' +\n          '<div class=\"mosaic-modal fade in\" style=\"position: absolute; padding: 20px;\">' +\n            '<div class=\"plone-modal-dialog\">' +\n              '<div class=\"plone-modal-content\">' +\n                '<div class=\"plone-modal-header\"><a class=\"plone-modal-close\">×</a></div>' +\n                '<div class=\"plone-modal-body\"></div>' +\n                '<div class=\"plone-modal-footer\">' +\n                  '<div class=\"pattern-modal-buttons\"></div>' +\n                '</div>' +\n              '</div>' +\n            '</div>' +\n          '</div>' +\n        '</div>');\n\n      // Destroy possible TinyMCE patterns before DOM move\n      $('.pat-tinymce', $form).each(function () {\n        if ($(this).data('pattern-tinymce')) {\n          try { $(this).data('pattern-tinymce').destroy(); }\n          catch (e) {}\n        }\n      });\n\n      $('.plone-modal-header', $modalStructure).append('<h2>' + $h1.text() + '</h2>');\n      $('.plone-modal-body', $modalStructure).append($form);\n      $(document.body, $.mosaic.document).append($modalStructure);\n\n      // Re-initialize possible TinyMCE patterns after DOM move\n      $('.pat-tinymce', $form).each(function () {\n        if ($(this).data('pattern-tinymce')) {\n          try { $(this).data('pattern-tinymce').init(); }\n          catch (e) {}\n        }\n      });\n      try { $('.pat-textareamimetypeselector').change(); }\n      catch (e) {}\n\n      // we don't want to show the original el.\n      $el.hide();\n\n      // Add lightbox\n      $(document.body, $.mosaic.document)\n        .prepend($(document.createElement(\"div\"))\n          .addClass(\"mosaic-overlay-blocker\")\n      );\n\n    });\n  };\n\n  /**\n   * Open the overlay\n   *\n   * @id jQuery.mosaic.overlay.open\n   * @param {String} mode Mode of the overlay\n   * @param {Object} tile_config Configuration of the tile\n   */\n  $.mosaic.overlay.open = function (mode, tile_config) {\n\n    // Local variables\n    var form, formtabs, tile_group, x, visible_tabs,\n      field_tile, field, fieldset;\n\n    // Expand the overlay\n    $('.mosaic-overlay').show().addClass('active');\n    $('.mosaic-overlay-blocker').show();\n    $('body').addClass('plone-modal-open');\n\n    // Get form\n    form = $(\".mosaic-overlay\").find(\"form\");\n\n    // Clear actions\n    if ($(\".mosaic-overlay-ok-button\").length === 0) {\n      $(\".mosaic-overlay .formControls\").children(\"input\").hide();\n      $(\".mosaic-overlay .pattern-modal-buttons\").append(\n        $(document.createElement(\"input\")).attr({\n          'type': 'button',\n          'value': 'Done'\n        })\n        .addClass('mosaic-overlay-ok-button plone-btn plone-btn-primary')\n        .click(function () {\n          $.mosaic.overlay.close();\n        })\n      );\n      $(\".mosaic-overlay .plone-modal-close\").off('click').on('click', function (e) {\n        e.preventDefault();\n        $.mosaic.overlay.close();\n      });\n\n      $(\".mosaic-overlay .plone-modal-header h2\").html('Properties');\n    }\n\n    if (mode === 'all' && $.mosaic.overlay_hide_fields) {\n\n      // Get form tabs\n      formtabs = form.find(\"nav\");\n\n      // Show form tabs\n      formtabs.removeClass('mosaic-hidden');\n\n      // Show all fields\n      form.find(\"fieldset\").children().removeClass('mosaic-hidden');\n\n      // Hide all fieldsets\n      form.find('fieldset').removeClass('active');\n\n      // Deselect all tabs\n      formtabs.find('a').removeClass('active');\n\n      // Hide layout field\n      form.find($.mosaic.options.customContentLayout_selector).addClass('mosaic-hidden');\n      form.find($.mosaic.options.contentLayout_selector).addClass('mosaic-hidden');\n\n      // Hide title and description\n      if($('.mosaic-IDublinCore-title-tile').size() > 0){\n        form.find('#formfield-form-widgets-IDublinCore-title')\n          .addClass('mosaic-hidden');\n      }else{\n        form.find('#formfield-form-widgets-IDublinCore-title')\n          .removeClass('mosaic-hidden');\n      }\n      if($('.mosaic-IDublinCore-description-tile').size() > 0){\n        form.find('#formfield-form-widgets-IDublinCore-description')\n          .addClass('mosaic-hidden');\n      }else{\n        form.find('#formfield-form-widgets-IDublinCore-description')\n          .removeClass('mosaic-hidden');\n      }\n\n      // Hide field which are on the wysiwyg area\n      for (x = 0; x < $.mosaic.options.tiles.length; x += 1) {\n        if ($.mosaic.options.tiles[x].name === 'fields') {\n          tile_group = $.mosaic.options.tiles[x];\n        }\n      }\n      for (x = 0; x < tile_group.tiles.length; x += 1) {\n        field_tile = tile_group.tiles[x];\n        if ($.mosaic.options.panels\n          .find(\".mosaic-\" + field_tile.name + \"-tile\")\n            .length !== 0) {\n          $($.mosaic.document.getElementById(field_tile.id))\n            .addClass('mosaic-hidden');\n        }\n      }\n\n      // Hide tab if fieldset has no visible items\n      form.find(\"fieldset\").each(function () {\n        if ($(this).children(\"div:not(.mosaic-hidden)\").length === 0) {\n          $('a[href=#fieldsetlegend-' +\n            $(this).attr('id').split('-')[1] + ']')\n            .addClass('mosaic-hidden');\n        }\n      });\n\n      // Get visible tabs\n      visible_tabs = formtabs.children(':not(.mosaic-hidden)');\n\n      // Select first tab\n      visible_tabs.eq(0).addClass('active');\n      var $fieldset = form.find('#fieldset-' +\n          visible_tabs.eq(0).attr('href').split('-')[1]);\n      if($fieldset.size() === 0){\n          $fieldset = form.find(\n              'fieldset:not(.mosaic-hidden)').eq(0);\n      }\n      $fieldset.addClass('active');\n    } else if (mode === 'field') {\n\n      // Get fieldset and field\n      field = $(\"#\" + tile_config.id);\n      fieldset = field.parents(\"fieldset\");\n\n      // Hide all fieldsets\n      form.find('fieldset').removeClass('active');\n\n      // Show current fieldset\n      fieldset.addClass('active');\n\n      // Hide all fields in current fieldset\n      fieldset.children().addClass('mosaic-hidden');\n\n      // Show current field\n      field.removeClass('mosaic-hidden');\n\n      // Hide form tabs\n      form.find(\"nav\").addClass('mosaic-hidden');\n    }\n  };\n\n  /**\n   * Close the overlay\n   *\n   * @id jQuery.mosaic.overlay.close\n   */\n  $.mosaic.overlay.close = function () {\n\n    // Hide overlay\n    $('.mosaic-overlay').hide().removeClass('active');\n    $('.mosaic-overlay-blocker').hide();\n    $('body').removeClass('plone-modal-open');\n  };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++plone++mosaic/js/mosaic.overlay.js?");

/***/ }),

/***/ "./.plone/++plone++mosaic/js/mosaic.panel.js":
/*!***************************************************!*\
  !*** ./.plone/++plone++mosaic/js/mosaic.panel.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* jslint white: true, browser: true, onevar: true, nomen: true,\neqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true,\nimmed: true, strict: true, maxlen: 150, maxerr: 9999, quotmark: false */\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! pat-logger */ \"./.plone/++plone++static/components/patternslib/src/core/logger.js\"),\n  __webpack_require__(/*! underscore */ \"./.plone/++plone++static/components/underscore/underscore.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, logger, _) {\n  'use strict';\n\n  var log = logger.getLogger('pat-mosaic');\n\n  /* Panel class */\n  var Panel = function(el){\n    this.$el = $(el);\n  };\n\n  Panel.prototype.initialize = function($content){\n    // Local variables\n    var panel_id = this.$el.data(\"panel\"), panel_attr_id,\n        target = $(\"[data-panel=\" + panel_id + \"]\", $.mosaic.document),\n        max_columns = (this.$el.data('max-columns') || 4);\n\n    // Implicitly initialize required panels with id matching element\n    if (panel_id === 'content' && target.length === 0) {\n      $('#' + panel_id, $.mosaic.document).each(function() {\n        target = $(this);\n        target.attr('data-panel', panel_id);\n      });\n    }\n\n    // If content, create a new div since the form data is in\n    // this panel\n    if (panel_id === 'content') {\n      panel_attr_id = target.attr('id');\n      if($('.mosaic-original-content', $.mosaic.document).size() === 0){\n        target.before($(document.createElement(\"div\"))\n            .attr(\"id\", panel_attr_id)\n            .attr(\"class\", target.attr(\"class\"))\n            .addClass('mosaic-panel')\n            .attr('data-panel', 'content')\n            .attr('data-max-columns', max_columns)\n            .html($content.find(\"[data-panel=\" + panel_id + \"]\").html()));\n        target\n            .removeAttr('data-panel')\n            .removeAttr('id')\n            .addClass('mosaic-original-content');\n      }else{\n        // re-initializing, so we just have to replace existing\n        target.replaceWith($(document.createElement(\"div\"))\n            .attr(\"id\", panel_attr_id)\n            .attr(\"class\", target.attr(\"class\"))\n            .addClass('mosaic-panel')\n            .attr('data-panel', 'content')\n            .attr('data-max-columns', max_columns)\n            .html($content.find(\"[data-panel=\" + panel_id + \"]\").html()));\n      }\n    } else {\n      target.attr(\"class\",\n          $content.find(\"[data-panel=\" + panel_id + \"]\").attr(\"class\"));\n      target.addClass('mosaic-panel');\n      target.html($content.find(\"[data-panel=\" +\n          panel_id + \"]\").html());\n    }\n  };\n\n  Panel.prototype.prefill = function(){\n    if (!this.$el.hasClass('mosaic-panel')) {\n      log.info($(this));\n      $(this).addClass('mosaic-panel');\n      $(this).children().wrap($(\n        '<div class=\"mosaic-grid-row\">' +\n          '<div class=\"mosaic-grid-cell mosaic-width-full mosaic-position-leftmost\">' +\n            '<div class=\"movable removable mosaic-tile mosaic-text-tile\">' +\n              '<div class=\"mosaic-tile-content\">' +\n              '</div>' +\n            '</div>' +\n          '</div>' +\n        '</div>'\n      ));\n    }\n  };\n\n  return Panel;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++plone++mosaic/js/mosaic.panel.js?");

/***/ }),

/***/ "./.plone/++plone++mosaic/js/mosaic.tile.js":
/*!**************************************************!*\
  !*** ./.plone/++plone++mosaic/js/mosaic.tile.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* jslint white: true, browser: true, onevar: true, nomen: true,\neqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true,\nimmed: true, strict: true, maxlen: 150, maxerr: 9999, quotmark: false */\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! pat-logger */ \"./.plone/++plone++static/components/patternslib/src/core/logger.js\"),\n  __webpack_require__(/*! underscore */ \"./.plone/++plone++static/components/underscore/underscore.js\"),\n  __webpack_require__(/*! mockup-utils */ \"./.plone/++resource++mockupjs/utils.js\"),\n  __webpack_require__(/*! pat-registry */ \"./.plone/++plone++static/components/patternslib/src/core/registry.js\"),\n  __webpack_require__(/*! mockup-patterns-tinymce */ \"./.plone/++resource++mockup/tinymce/pattern.js\"),\n  __webpack_require__(/*! tinymce */ \"./.plone/++plone++static/components/tinymce-builded/js/tinymce/tinymce.js\"),\n  __webpack_require__(/*! mockup-patterns-modal */ \"./.plone/++resource++mockup/modal/pattern.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, logger, _, utils, Registry, TinyMCE, tinymce, Modal) {\n  'use strict';\n\n  // so we don't get spammed with missing tile warnings\n  var _missing_tile_configs = [];\n\n  var log = logger.getLogger('pat-mosaic');\n\n  var _positionTimeout = 0;\n  var positionActiveTinyMCE = function(){\n    clearTimeout(_positionTimeout);\n    _positionTimeout = setTimeout(_positionActiveTinyMCE, 50);\n  };\n\n  var _positionActiveTinyMCE = function(){\n    /* XXX warning, this needs to be split into a filter call for some reason.\n       one selector bombs out */\n    var $toolbar = $('.mosaic-selected-tile .mosaic-rich-text-toolbar').filter(':visible');\n    if($toolbar.size() === 0 || $toolbar.find('.mce-first').size() === 0){\n      /* make sure it actually has a toolbar */\n      return;\n    }\n\n    var $tile = $toolbar.parent();\n    // detect if tile is more on the right side of the screen\n    // than the left, if it is, align it right\n    $toolbar.removeClass('right');\n    if($tile.offset().left >= ($(window).width() / 2)){\n      $toolbar.addClass('right');\n    }\n\n    // calculate if toolbar has been scrolled out of view.\n    // we calculate the top divider since when we move to\n    // make the tiny toolbar sticky, it'll get shifted\n    var $window = $(window);\n\n    // Will include the mosaic toolbar height\n    var mosaic_toolbar_height = $(\".mosaic-toolbar\").height();\n\n    if(($tile.offset().top - $toolbar.height()) < ($window.scrollTop() + mosaic_toolbar_height)){\n      // just checking if we reached the top of the tile + size of toolbar\n      if(!$toolbar.hasClass('sticky')){\n        $('body').addClass('mce-sticky');\n        // only need to calculate once and then leave alone\n        $toolbar.addClass('sticky');\n        // right under mosaic toolbar\n        var attrs = {\n          top: $('.mosaic-toolbar').height() + $toolbar.height()\n        };\n        if($toolbar.hasClass('right')){\n          attrs.right = $toolbar.offset().right;\n        }else{\n          attrs.left = $toolbar.offset().left;\n        }\n        $toolbar.css(attrs);\n      }\n    }else{\n      $toolbar.removeClass('sticky');\n      $toolbar.removeAttr('style');\n      $('body').removeClass('mce-sticky');\n    }\n  };\n\n  $(window).off('scroll', positionActiveTinyMCE).on('scroll', positionActiveTinyMCE);\n\n  /* Tile class */\n  var Tile = function(el){\n    var that = this;\n    that.tinymce = null;\n    that.$el = $(el);\n    if(!that.$el.is('.mosaic-tile')){\n      // XXX we need to get the outer-most container of the node here always\n      that.$el = that.$el.parents('.mosaic-tile');\n    }\n    that.focusCheckCount = 0;\n\n    that.$el.children(\".mosaic-tile-content\").off('blur').on('blur', function(){\n      var tile_config = that.getConfig();\n      if(tile_config && tile_config.tile_type === 'textapp'){\n        var edit_url = that.getEditUrl();\n        if(edit_url){\n          var currentData = that.getHtmlContent();\n          if(currentData === that.$el.data('lastSavedData')){\n            // not dirty, do not save\n            return;\n          }\n          // we also need to prevent double saving, conflict errors\n          if(that.$el.data('activeSave')){\n            return;\n          }\n          that.$el.data('activeSave', true);\n          var data = {\n            _authenticator: utils.getAuthenticator(),\n            'buttons.save': 'Save'\n          };\n          data[tile_config.name + '.content'] = currentData;\n          // need to save tile\n          $.mosaic.queue(function(next){\n            $.ajax({\n              url: edit_url,\n              method: 'POST',\n              data: data\n            }).always(function(){\n              that.$el.data('lastSavedData', currentData);\n              that.$el.data('activeSave', false);\n              next();\n            });\n          });\n        }\n      }\n    });\n  };\n\n  Tile.prototype.getDataTileEl = function(html, tileUrl){\n    return this.$el.find('[data-tile]');\n  };\n\n  Tile.prototype.getContentEl = function(html, tileUrl){\n    return this.$el.children(\".mosaic-tile-content\");\n  };\n\n  Tile.prototype.getHtmlContent = function(){\n    return this.getContentEl().html();\n  };\n\n  Tile.prototype.getEditUrl = function(){\n    var tile_url = this.getUrl();\n    if(!tile_url){\n      return;\n    }\n    tile_url = tile_url.replace(/@@/, '@@edit-tile/');\n    if(!tile_url){\n      return;\n    }\n    // Calc absolute edit url\n    if (tile_url.match(/^\\.\\/.*/)) {\n      tile_url = $.mosaic.options.context_url + tile_url.replace(/^\\./, '');\n    }\n    return tile_url;\n  };\n\n  Tile.prototype.getDeleteUrl = function(){\n    var tile_url = this.getUrl();\n    // Calc delete url\n    var url = tile_url.split('?')[0];\n    url = url.split('@@');\n    var tile_type_id = url[1].split('/');\n    url = url[0] + '@@delete-tile/' + tile_type_id[0] + '/' + tile_type_id[1];\n    // Calc absolute delete url\n    if (url.match(/^\\.\\/.*/)) {\n      url = $.mosaic.options.context_url + url.replace(/^\\./, '');\n    }\n    return url;\n  };\n\n  Tile.prototype.getUrl = function(){\n    var tile_url = this.$el.find('.tileUrl').html();\n    if(!tile_url){\n      var $tileUrlEl = this.$el.find('[data-tileUrl]');\n      if($tileUrlEl.size() > 0){\n        tile_url = $tileUrlEl.attr('data-tileUrl');\n      }\n    }\n    if (!tile_url) {\n      tile_url = this.$el.find('[data-tile]').attr('data-tile');\n    }\n    if(tile_url){\n      tile_url = tile_url.replace($.mosaic.options.context_url, './');\n      tile_url = tile_url.replace(/^\\.\\/\\//, './');\n      if($.mosaic.hasContentLayout){\n        if(tile_url.indexOf('X-Tile-Persistent') === -1){\n          if(tile_url.indexOf('?') === -1){\n            tile_url += '?';\n          }else{\n            tile_url += '&';\n          }\n          tile_url += 'X-Tile-Persistent=yes';\n        }\n      }else if(tile_url.indexOf('X-Tile-Persistent') !== -1){\n        tile_url = tile_url.replace('X-Tile-Persistent=yes', '').replace('&&', '&');\n      }\n      while(tile_url.indexOf('&_layouteditor=true') !== -1){\n        // clean out urls with _layouteditor in them\n        tile_url = tile_url.replace('&_layouteditor=true', '');\n      }\n    }\n    return tile_url;\n  };\n\n  Tile.prototype.getType = function(){\n    // previously $.mosaic.getTileType\n    var tiletype = '';\n    var $el = this.$el;\n    var classNames = $el.attr('class');\n    var classes = [];\n    if(classNames){\n      classes = $el.attr('class').split(\" \");\n      $(classes).each(function () {\n        // Local variables\n        var classname;\n\n        classname = this.match(/^mosaic-([\\w.\\-]+)-tile$/);\n        if (classname !== null) {\n          if ((classname[1] !== 'selected') &&\n              (classname[1] !== 'new') &&\n              (classname[1] !== 'read-only') &&\n              (classname[1] !== 'helper') &&\n              (classname[1] !== 'original') &&\n              (classname[1] !== 'edited')) {\n            tiletype = classname[1];\n          }\n        }\n      });\n    }\n\n    if(!tiletype){\n      log.error('Could not find tile type on element with classes: ' + classes.join(', '));\n    }\n\n    return tiletype;\n  };\n\n  Tile.prototype.deprecatedHTMLTiles = [\n    'table',\n    'numbers',\n    'bullets',\n    'text',\n    'subheading',\n    'heading'\n  ];\n\n  Tile.prototype.getConfig = function(){\n    var tile_config;\n    var tiletype = this.getType();\n    // Get tile config\n    for (var x = 0; x < $.mosaic.options.tiles.length; x += 1) {\n      var found = false;\n      var tile_group = $.mosaic.options.tiles[x];\n      for (var y = 0; y < tile_group.tiles.length; y += 1) {\n        // Set settings value\n        if (tile_group.tiles[y].tile_type === 'field') {\n          var widget = tile_group.tiles[y].widget.split('.');\n          widget = widget[widget.length - 1];\n          switch(widget) {\n          case \"TextWidget\":\n          case \"TextFieldWidget\":\n          case \"TextAreaWidget\":\n          case \"TextAreaFieldWidget\":\n          case \"TextLinesWidget\":\n          case \"TextLinesFieldWidget\":\n          case \"WysiwygWidget\":\n          case \"WysiwygFieldWidget\":\n          case \"RichTextWidget\":\n          case \"RichTextFieldWidget\":\n            tile_group.tiles[y].settings = false;\n            break;\n          default:\n            tile_group.tiles[y].settings = true;\n          }\n        }\n        if (tile_group.tiles[y].name === tiletype) {\n          tile_config = tile_group.tiles[y];\n          found = true;\n          break;\n        }\n      }\n      if(found){\n        break;\n      }\n    }\n\n    if(!tile_config){\n      // dive out of here, something went wrong finding tile config\n      if(_missing_tile_configs.indexOf(tiletype) === -1){\n        log.error('Could not load tile config for tile type: ' + tiletype +\n                  ' falling back to b/w compatible tile type.');\n        _missing_tile_configs.push(tiletype);\n      }\n      tile_config = {\n        tile_type: 'app',\n        name: tiletype,\n        label: 'Unknown',\n        read_only: true,\n        favorite: false,\n        settings: false,\n        weight: 0,\n        rich_text: false\n      };\n      if(this.deprecatedHTMLTiles.indexOf(tiletype) !== -1){\n        // deprecated html tile type, provide b/w compat config\n        tile_config.category = 'structure';\n        tile_config.read_only = false;\n        tile_config.label = tiletype;\n        tile_config.tile_type = 'text';\n        tile_config.rich_text = true;\n      }\n    }\n    return tile_config;\n  };\n\n  Tile.prototype.getHtmlBody = function(exportLayout){\n    var body = '';\n    // Get tile type\n    var tiletype = '',\n        classes = this.$el.attr('class').split(\" \");\n\n    tiletype = this.getType();\n    classes = $(classes).filter(function() {\n      switch (this) {\n        case \"mosaic-new-tile\":\n        case \"mosaic-helper-tile\":\n        case \"mosaic-original-tile\":\n        case \"mosaic-selected-tile\":\n        case \"mosaic-edited-tile\":\n          return false;\n        default:\n          return true;\n      }\n    }).toArray();\n\n    // Get tile config\n    var tile_config = this.getConfig();\n    var editor;\n\n    // Predefine vars\n    switch (tile_config.tile_type) {\n      case \"text\":\n        editor = tinymce.get(this.$el.children(\".mosaic-tile-content\").attr('id'));\n        body += '          <div class=\"' + classes.join(' ') + '\">\\n';\n        body += '          <div class=\"mosaic-tile-content\">\\n';\n        body += (editor ? editor.getContent() : this.$el.children(\".mosaic-tile-content\").html()).replace(/^\\s+|\\s+$/g, '') + \"\\n\";\n        body += '          </div>\\n';\n        body += '          </div>\\n';\n        break;\n      case \"app\":\n      case \"textapp\":\n        var url = this.getUrl();\n        if(exportLayout){\n          // we want to provide default value here for exporting this layout\n          editor = tinymce.get(this.$el.children(\".mosaic-tile-content\").attr('id'));\n          var data = (editor ? editor.getContent() : this.$el.children(\".mosaic-tile-content\").html()).replace(/^\\s+|\\s+$/g, '') + \"\\n\";\n          // convert to url valid value\n          if(url.indexOf('?') === -1){\n            url += '?';\n          }else{\n            url += '&';\n          }\n          url += 'content=' + encodeURI(data);\n        }\n        body += '          <div class=\"' + classes.join(' ') + '\">\\n';\n        body += '          <div class=\"mosaic-tile-content\">\\n';\n        body += '          <div data-tile=\"' + url + '\"></div>\\n';\n        body += '          </div>\\n';\n        body += '          </div>\\n';\n        break;\n      case \"field\":\n        body += '          <div class=\"' + classes.join(' ') + '\">\\n';\n        body += '          <div class=\"mosaic-tile-content\">\\n';\n\n        // Calc url\n        var tile_url = './@@plone.app.standardtiles.field?field=' + tiletype;\n\n        // ability to provide a few additional settings for field tiles\n        // can be useful in formatting field tiles in python\n        // subfield is meant for relation fields\n        var subfield = this.getValueFromClasses(classes, 'mosaic-subfield-');\n        if(subfield){\n          tile_url += '&subfield=' + subfield;\n        }\n        var format = this.getValueFromClasses(classes, 'mosaic-format-');\n        if(format){\n          tile_url += '&format=' + format;\n        }\n\n        body += '          <div data-tile=\"' + tile_url + '\"></div>\\n';\n        body += '          </div>\\n';\n        body += '          </div>\\n';\n\n        // Update field values if type is rich text\n        this.saveForm();\n        break;\n      }\n      return body;\n    };\n\n    Tile.prototype.isRichText = function(tile_config){\n      if(tile_config === undefined){\n        tile_config = this.getConfig();\n      }\n      if (tile_config && this.$el.hasClass('mosaic-read-only-tile') === false &&\n          ((tile_config.tile_type === 'text' && tile_config.rich_text) ||\n           (tile_config.tile_type === 'textapp' && tile_config.rich_text) ||\n           (tile_config.tile_type === 'app' && tile_config.rich_text) ||\n           (tile_config.tile_type === 'field' && tile_config.read_only === false &&\n            (tile_config.widget === 'z3c.form.browser.text.TextWidget' ||\n             tile_config.widget === 'z3c.form.browser.text.TextFieldWidget' ||\n             tile_config.widget === 'z3c.form.browser.textarea.TextAreaWidget' ||\n             tile_config.widget === 'z3c.form.browser.textarea.TextAreaFieldWidget' ||\n             tile_config.widget === 'z3c.form.browser.textlines.TextLinesWidget' ||\n             tile_config.widget === 'z3c.form.browser.textlines.TextLinesFieldWidget' ||\n             tile_config.widget === 'plone.app.z3cform.widget.RichTextFieldWidget' ||\n             tile_config.widget === 'plone.app.z3cform.wysiwyg.widget.WysiwygWidget' ||\n             tile_config.widget === 'plone.app.z3cform.wysiwyg.widget.WysiwygFieldWidget' ||\n             tile_config.widget === 'plone.app.widgets.dx.RichTextWidget')))) {\n        return true;\n      }else{\n        return false;\n      }\n    };\n\n    Tile.prototype.initialize = function(){\n      var tile_config = this.getConfig();\n\n      // Check read only\n      if (tile_config && tile_config.read_only) {\n        // Set read only\n        this.$el.addClass(\"mosaic-read-only-tile\");\n      }\n\n      // Init rich text\n      if (this.isRichText()) {\n        // Init rich editor\n        this.setupWysiwyg();\n      }\n\n      // Add border divs\n      this.$el.prepend(\n        $($.mosaic.document.createElement(\"div\"))\n          .addClass(\"mosaic-tile-outer-border\")\n          .append(\n            $($.mosaic.document.createElement(\"div\"))\n              .addClass(\"mosaic-tile-inner-border\")\n            )\n      );\n\n      // Add label\n      if (tile_config) {\n        this.$el.prepend(\n          $($.mosaic.document.createElement(\"div\"))\n              .addClass(\"mosaic-tile-control mosaic-tile-label\")\n              .append(\n              $($.mosaic.document.createElement(\"div\"))\n                  .addClass(\"mosaic-tile-label-content\")\n                  .html(tile_config.label)\n          )\n              .append(\n              $($.mosaic.document.createElement(\"div\"))\n                  .addClass(\"mosaic-tile-label-left\")\n          )\n        );\n      }\n\n      this.makeMovable();\n      this.initializeButtons();\n\n      var that = this;\n      _.each(['top', 'bottom', 'right', 'left'], function(pos){\n        that.$el.prepend(\n            $($.mosaic.document.createElement(\"div\"))\n            .addClass(\"mosaic-divider mosaic-divider-\" + pos)\n            .append(\n                $($.mosaic.document.createElement(\"div\"))\n                    .addClass(\"mosaic-divider-dot\")\n            )\n        );\n      });\n    };\n\n    Tile.prototype.initializeButtons = function(){\n      var buttons = [];\n      var tile_config = this.getConfig();\n\n      // reinitialize buttons every time\n      this.$el.find('.mosaic-tile-buttons').remove();\n\n      var _addButton = function(label, name, click){\n        var btn = document.createElement(\"button\");\n        btn.className = \"mosaic-btn-\" + name;\n        btn.textContent = label;\n        buttons.push(btn);\n        $(btn).on('click', click);\n        return btn;\n      };\n\n      // Add settings icon\n      if (tile_config && tile_config.settings &&\n            this.$el.hasClass('mosaic-read-only-tile') === false) {\n        _addButton('Edit', 'settings', this.settingsClicked.bind(this));\n      }\n\n      if(!$.mosaic.hasContentLayout){\n        _addButton('Delete', 'delete', this.deleteClicked.bind(this));\n        var confirmBtn = _addButton('Confirm delete', 'confirm', this.confirmClicked.bind(this));\n        $(confirmBtn).hide();\n        var btn = _addButton('Cancel', 'cancel', this.cancelClicked.bind(this));\n        $(btn).hide();\n      }\n\n      if(buttons.length > 0){\n        var $btns = $($.mosaic.document.createElement(\"div\"))\n                 .addClass(\"mosaic-tile-control mosaic-tile-buttons\");\n        this.$el.prepend($btns);\n        buttons.forEach(function($btn){\n          $btns.append($btn);\n        });\n      }\n    };\n\n    Tile.prototype.cancelClicked = function(e){\n      e.preventDefault();\n      $('.mosaic-btn-settings,.mosaic-btn-delete', this.$el).show();\n      $('.mosaic-btn-cancel,.mosaic-btn-confirm', this.$el).hide();\n    };\n\n    Tile.prototype.deleteClicked = function(e){\n      e.preventDefault();\n      $('.mosaic-btn-settings,.mosaic-btn-delete', this.$el).hide();\n      $('.mosaic-btn-cancel,.mosaic-btn-confirm', this.$el).show();\n    };\n\n    Tile.prototype.confirmClicked = function(e){\n      e.preventDefault();\n\n      var self = this;\n      var tileConfig = this.getConfig();\n\n      // Check if app tile\n      if (tileConfig.tile_type === 'app' ||\n          tileConfig.tile_type === 'textapp') {\n\n        // Get url\n        var tile_url = this.getUrl();\n\n        if(tile_url && tile_url !== 'undefined'){\n          // Remove tags\n          $.mosaic.removeHeadTags(tile_url);\n\n          // Ajax call to remove tile\n          $.mosaic.queue(function(next){\n            $.ajax({\n              type: \"POST\",\n              url: self.getDeleteUrl(),\n              data: {\n                'buttons.delete': 'Delete',\n                '_authenticator': utils.getAuthenticator()\n              }\n            }).always(function(){\n              next();\n            });\n          });\n        }\n      }\n\n      // Remove empty rows\n      $.mosaic.options.panels.find(\".mosaic-empty-row\").remove();\n\n      // Get original row\n      var $originalRow = this.$el.parent().parent();\n\n      // Save tile value\n      this.saveForm();\n\n      // Remove current tile\n      this.$el.remove();\n\n      // Cleanup original row\n      $originalRow.mosaicCleanupRow();\n\n      // Add empty rows\n      $.mosaic.options.panels.mosaicAddEmptyRows();\n\n      // Set toolbar\n      $.mosaic.options.toolbar.trigger(\"selectedtilechange\");\n      $.mosaic.options.toolbar.mosaicSetResizeHandleLocation();\n    };\n\n    Tile.prototype.settingsClicked = function(e){\n      e.preventDefault();\n      var that = this;\n\n      // Get tile config\n      var tile_config = that.getConfig();\n\n      // Check if application tile\n      if (tile_config.tile_type === 'app') {\n\n        // Get url\n        var tile_url = that.getEditUrl();\n\n\n        // Open overlay\n        $.mosaic.overlay.app = new Modal($('.mosaic-toolbar'), {\n          ajaxUrl: tile_url,\n          loadLinksWithinModal: true,\n          buttons: '.formControls > input[type=\"submit\"], .actionButtons > input[type=\"submit\"]'\n        });\n        $.mosaic.overlay.app.$el.off('after-render');\n        $.mosaic.overlay.app.on('after-render', function(event) {\n          $('input[name*=\"cancel\"]',\n            $.mosaic.overlay.app.$modal)\n            .off('click').on('click', function() {\n              // Close overlay\n              $.mosaic.overlay.app.hide();\n              $.mosaic.overlay.app = null;\n          });\n          if($.mosaic.hasContentLayout){\n            // not a custom layout, make sure the form knows\n            $('form', $.mosaic.overlay.app.$modal).append($('<input type=\"hidden\" name=\"X-Tile-Persistent\" value=\"yes\" />'));\n          }\n        });\n        $.mosaic.overlay.app.show();\n        $.mosaic.overlay.app.$el.off('formActionSuccess');\n        $.mosaic.overlay.app.on('formActionSuccess', function (event, response, state, xhr, form) {\n          var tileUrl = xhr.getResponseHeader('X-Tile-Url'),\n            value = $.mosaic.getDomTreeFromHtml(response);\n          if (tileUrl) {\n            // Remove head tags\n            $.mosaic.removeHeadTags(tileUrl);\n\n            // Add head tags\n            $.mosaic.addHeadTags(tileUrl, value);\n            var tileHtml = value.find('.temp_body_tag').html();\n            that.fillContent(tileHtml, tileUrl);\n\n            // Close overlay\n            $.mosaic.overlay.app.hide();\n            $.mosaic.overlay.app = null;\n          }\n        });\n      } else {\n\n        // Edit field\n        $.mosaic.overlay.open('field', tile_config);\n      }\n    };\n\n    Tile.prototype.makeMovable = function(){\n      // If the tile is movable\n      if (this.$el.hasClass(\"movable\") && $.mosaic.options.canChangeLayout &&\n          !$.mosaic.hasContentLayout) {\n        // Add drag handle\n        this.$el.prepend(\n          $($.mosaic.document.createElement(\"div\"))\n              .addClass(\"mosaic-tile-control mosaic-drag-handle\")\n        );\n      }\n    };\n\n    Tile.prototype.getValueFromClasses = function(classes, name){\n      var value;\n      classes.forEach(function(className){\n        if(className.indexOf(name) !== -1){\n          value = className.replace(name, '');\n        }\n      });\n      return value;\n    };\n\n\n    Tile.prototype.initializeContent = function(){\n      var that = this;\n\n      // Local variables\n      var url, start, end, fieldhtml, lines;\n\n      var base = $('body', $.mosaic.document).attr('data-base-url');\n      if(!base){\n        base = $('head > base', $.mosaic.document).attr('href');\n      }\n      var href = this.getUrl();\n\n      // Get tile type\n      var tile_config = this.getConfig();\n\n      // Check if a field tile\n      if (tile_config.tile_type === 'field') {\n\n        fieldhtml = '';\n\n        // Wrap title and description fields for proper styles\n        if (tile_config.name === 'IDublinCore-title') {\n          start = '<h1 class=\"documentFirstHeading\">';\n          end = '</h1>';\n        } else if (tile_config.name === 'IDublinCore-description') {\n          start = '<p class=\"documentDescription\">';\n          end = '</p>';\n        } else {\n          start = '<div>';\n          end = '</div>';\n        }\n\n        switch (tile_config.widget) {\n        case \"z3c.form.browser.text.TextWidget\":\n        case \"z3c.form.browser.text.TextFieldWidget\":\n          fieldhtml = start +\n              $(\"#\" + tile_config.id)\n                    .find('input').attr('value') + end;\n          break;\n        case \"z3c.form.browser.textarea.TextAreaWidget\":\n        case \"z3c.form.browser.textarea.TextAreaFieldWidget\":\n        case \"z3c.form.browser.textlines.TextLinesWidget\":\n        case \"z3c.form.browser.textlines.TextLinesFieldWidget\":\n          lines = $(\"#\" + tile_config.id)\n                      .find('textarea')\n                      .val().split('\\n');\n          fieldhtml += start;\n          for (var i = 0; i < lines.length; i += 1) {\n              fieldhtml += lines[i] + '<br/>';\n          }\n          fieldhtml += end;\n          break;\n        case \"plone.app.z3cform.widget.RichTextFieldWidget\":\n        case \"plone.app.z3cform.wysiwyg.widget.WysiwygWidget\":\n        case \"plone.app.z3cform.wysiwyg.widget.WysiwygFieldWidget\":\n        case \"plone.app.widgets.dx.RichTextWidget\":\n          fieldhtml = $(\"#\" + tile_config.id)\n                          .find('textarea').val();\n          break;\n        default:\n          fieldhtml = '<div class=\"discreet\">Placeholder ' +\n              'for field:<br/><b>' + tile_config.label +\n              '</b></div>';\n          break;\n        }\n        that.fillContent(fieldhtml);\n      // Get data from app tile\n      } else if (tile_config) {\n        that.$el.addClass('mosaic-tile-loading');\n        url = base ? [base, href].join('/')\n                                 .replace(/\\/+\\.\\//g, '/') : href;\n        var original_url = url;\n        // in case tile should be rendered differently for layout editor\n        if(url.indexOf('?') === -1){\n          url += '?';\n        }else{\n          url += '&';\n        }\n        if(url.indexOf('_layouteditor') === -1){\n          url += '_layouteditor=true';\n        }\n        $.ajax({\n          type: \"POST\",\n          url: url,\n          success: function (value) {\n            that.$el.removeClass('mosaic-tile-loading');\n            // Get dom tree\n            value = $.mosaic.getDomTreeFromHtml(value);\n\n            // Add head tags\n            $.mosaic.addHeadTags(href, value);\n            var tileHtml = value.find('.temp_body_tag').html();\n            that.fillContent(tileHtml, original_url);\n\n            var tiletype = that.getType();\n            if(tiletype === 'plone.app.standardtiles.html'){\n              // a little gymnastics to make wysiwyg work here\n              // Init rich editor\n              if(!that.$el.data('lastSavedData')){\n                // save initial state\n                that.$el.data('lastSavedData', that.getHtmlContent());\n              }\n            }\n          },\n          error: function(){\n            that.$el.removeClass('mosaic-tile-loading');\n            log.error('Error getting data for the tile ' + tile_config.label +\n                      '(' + tile_config.name + '). Please read documentation ' +\n                      'on how to correctly register tiles: https://pypi.python.org/pypi/plone.tiles');\n          }\n        });\n      }\n    };\n\n    Tile.prototype.fillContent = function(html, tileUrl){\n      // need to replace the data-tile node here\n      var $el = this.getDataTileEl();\n      var $content;\n      if($el.length > 0){\n        // only available on initialization\n        $el.parent().html(html);\n        $content = this.getContentEl();\n      }else{\n        // otherwise, we use content to fill html\n        $content = this.getContentEl();\n        $content.html(html);\n      }\n      if(tileUrl && $content.size() > 0){\n        tileUrl = tileUrl.replace(/&/gim, '&amp;');\n        // also need to fix duplicate &amp;\n        while(tileUrl.indexOf('&amp;&amp;') !== -1){\n          tileUrl = tileUrl.replace('&amp;&amp;', '&amp;');\n        }\n        $content.attr('data-tileUrl', tileUrl);\n      }\n      this.cacheHtml(html);\n      this.scanRegistry();\n    };\n\n    Tile.prototype.cacheHtml = function(html) {\n      /* Cache html on the tile element.\n         This is only used by the scanRegistry method so\n         we can reset the html of the html when running the pattern registry.\n         */\n      if (this.isRichText()) {\n        return;  // no patterns, ignore this\n      }\n      var $content = this.$el.children(\".mosaic-tile-content\");\n      if($content.size() === 0){\n        return;\n      }\n      if(html === undefined){\n        html = $content.html();\n      }\n      $content[0]._preScanHTML = html;\n    };\n\n    Tile.prototype.scanRegistry = function(){\n      /*\n        A bit tricky here because tiles can contain patterns.\n        Pay attention to the use of _preScanHTML.\n        If we do not do this, tiles do not render correctly when\n        adding, dragging and dropping.\n      */\n      if (this.isRichText()) {\n        return;  // no patterns, ignore this\n      }\n      var $el = this.$el.find(\".mosaic-tile-content\");\n      if($el.size() === 0){\n        return;\n      }\n      if($el[0]._preScanHTML){\n        /* reset html because transform has happened */\n        $el.html($el[0]._preScanHTML);\n      }\n      Registry.scan($el);\n\n      // also check the content of the tile and override link handling...\n      $('a', $el).on('click', function(e){\n        e.preventDefault();\n        e.stopPropagation();\n      });\n    };\n\n    Tile.prototype.select = function(){\n      var that = this;\n      if (this.$el.hasClass(\"mosaic-selected-tile\") === false &&\n          this.$el.hasClass(\"mosaic-read-only-tile\") === false) {\n        // un-select existing\n        var $tile = $(\".mosaic-selected-tile\", $.mosaic.document);\n        if($tile.size() === 1){\n          var tile = new Tile($tile);\n          tile.blur();\n        }\n\n        this.focus();\n      }\n    };\n\n    Tile.prototype._change = function(){\n      // Set actions\n      $.mosaic.options.toolbar.trigger(\"selectedtilechange\");\n      $.mosaic.options.panels.mosaicSetResizeHandleLocation();\n      this.saveForm();\n    };\n\n    Tile.prototype.blur = function(){\n      this.$el.removeClass(\"mosaic-selected-tile\").children(\".mosaic-tile-content\").blur();\n      this.$el.find('.mce-edit-focus').removeClass('mce-edit-focus');\n      this._change();\n    };\n\n    Tile.prototype._focus = function(){\n      var that = this;\n      this.$el.addClass(\"mosaic-selected-tile\");\n      this.$el.children(\".mosaic-tile-content\").focus();\n      this._change();\n      this.initializeButtons();\n\n      var _checkForTinyFocus = function(){\n        if(that.focusCheckTimeout){\n          clearTimeout(that.focusCheckTimeout);\n        }\n        that.focusCheckTimeout = setTimeout(function(){\n          that.focusCheckCount += 1;\n          if(!that.$el.hasClass('mosaic-selected-tile')){\n            // no longer selected, dive\n            return;\n          }\n          var $container = that.$el.find('.mosaic-rich-text');\n          if(!$container.hasClass('mce-edit-focus')){\n            that.$el.removeClass(\"mosaic-selected-tile\").children(\".mosaic-tile-content\").blur();\n            that.$el.find('.mce-edit-focus').removeClass('mce-edit-focus');\n            that._focus();\n          }\n        }, 50);\n      };\n      if(that.isRichText() && that.focusCheckCount < 30){\n        _checkForTinyFocus();\n      }\n    };\n\n    Tile.prototype.focus = function(){\n      if(this.isRichText() && this.$el.data('tinymce-loaded') !== true){\n        this.$el.data('delayed-focus', true);\n      }else{\n        this._focus();\n      }\n    };\n\n    Tile.prototype.saveForm = function(){\n      var tiletype = this.getType();\n      var tile_config = this.getConfig();\n\n      var editor_id, editor, value, newline;\n      // Update field values if type is rich text\n      if (tile_config && tile_config.tile_type === 'field' &&\n        tile_config.read_only === false &&\n        (tile_config.widget === 'z3c.form.browser.text.TextWidget' ||\n         tile_config.widget === 'z3c.form.browser.text.TextFieldWidget' ||\n         tile_config.widget === 'z3c.form.browser.textarea.TextAreaWidget' ||\n         tile_config.widget === 'z3c.form.browser.textarea.TextAreaFieldWidget' ||\n         tile_config.widget === 'z3c.form.browser.textlines.TextLinesWidget' ||\n         tile_config.widget === 'z3c.form.browser.textlines.TextLinesFieldWidget' ||\n         tile_config.widget === 'plone.app.z3cform.widget.RichTextFieldWidget' ||\n         tile_config.widget === 'plone.app.z3cform.wysiwyg.widget.WysiwygWidget' ||\n         tile_config.widget === 'plone.app.z3cform.wysiwyg.widget.WysiwygFieldWidget' ||\n         tile_config.widget === 'plone.app.widgets.dx.RichTextWidget')) {\n        switch (tile_config.widget) {\n        case \"z3c.form.browser.text.TextWidget\":\n        case \"z3c.form.browser.text.TextFieldWidget\":\n          var $el = $('.mosaic-panel .mosaic-' + tiletype + '-tile', $.mosaic.document);\n          if($el.size() > 1){\n            // XXX weird case here.\n            // if you use content tile, it'll render a title field tile that matches this\n            // and you get weird issues saving data. This is to distinguish this case\n            $el = $el.filter(function(){\n              return $('.mosaic-tile-control', this).length > 0;\n            });\n          }\n          var val = $el.find('.mosaic-tile-content > *').text();\n          $(\"#\" + tile_config.id).find('input').val(val);\n          break;\n        case \"z3c.form.browser.textarea.TextAreaWidget\":\n        case \"z3c.form.browser.textarea.TextAreaFieldWidget\":\n        case \"z3c.form.browser.textlines.TextLinesWidget\":\n        case \"z3c.form.browser.textlines.TextLinesFieldWidget\":\n          value = \"\";\n          $('.mosaic-panel .mosaic-' + tiletype + '-tile', $.mosaic.document).find('.mosaic-tile-content > *').each(function () {\n            value += $(this).text();\n          });\n          value = value.replace(/^\\s+|\\s+$/g, '');\n          $(\"#\" + tile_config.id).find('textarea').val(value);\n          break;\n        case \"plone.app.z3cform.widget.RichTextFieldWidget\":\n        case \"plone.app.z3cform.wysiwyg.widget.WysiwygWidget\":\n        case \"plone.app.z3cform.wysiwyg.widget.WysiwygFieldWidget\":\n        case \"plone.app.widgets.dx.RichTextWidget\":\n          var $textarea = $(document.getElementById(tile_config.id)).find('textarea');\n          editor_id = $textarea.attr('id');\n          editor = tinymce.get(editor_id);\n          var content = $('.mosaic-' + tiletype + '-tile', $.mosaic.document).find('.mosaic-tile-content').html();\n          $textarea.val(content);\n          if (editor) {\n            editor.setContent(content);\n          }\n          break;\n        }\n      }\n    };\n\n    Tile.prototype.setupWysiwyg = function(){\n      var that = this;\n      var pattern;\n\n      // Get element\n      var $content = that.$el.find('.mosaic-tile-content');\n\n      // Remove existing pattern\n      try{\n        $content.data(\"pattern-tinymce\").destroy();\n        $content.removeData(\"pattern-tinymce\");\n        that.$el.data('tinymce-loaded', false);\n      }catch(e){\n          // this can fail...\n      }\n\n      // Generate random id to make sure TinyMCE is unique\n      var random_id = 1 + Math.floor(100000 * Math.random());\n      while ($(\"#mosaic-rich-text-init-\" + random_id,\n             $.mosaic.document).length > 0) {\n        random_id = 1 + Math.floor(100000 * Math.random());\n      }\n      var id = 'mosaic-rich-text-init-' + random_id;\n      $content.attr('id', id);\n      $content.siblings('.mosaic-rich-text-toolbar').remove();\n      var $editorContainer = $('<div class=\"mosaic-rich-text-toolbar\"></div>')\n        .attr('id', $content.attr('id') + '-panel');\n      $content.before($editorContainer);\n\n      // Build toolbar and contextmenu\n      var actions, group, x, y,\n          toolbar, cmenu;\n\n      // Get tiletype\n      var tiletype = that.getType();\n      if(this.deprecatedHTMLTiles.indexOf(tiletype) !== -1){\n        // these tiles are deprecated but we still need to be able to edit\n        // them... Yes this is a bit ugly but I think it is probably the best\n        // way right now.\n        tiletype = 'plone.app.standardtiles.html';\n      }\n\n      // Get actions\n      actions = $.mosaic.options.default_available_actions;\n      for (x = 0; x < $.mosaic.options.tiles.length; x += 1) {\n        group = $.mosaic.options.tiles[x];\n        for (y = 0; y < group.tiles.length; y += 1) {\n          if (group.tiles[y].name === tiletype) {\n            actions = actions\n              .concat(group.tiles[y].available_actions);\n          }\n        }\n      }\n\n      // Build toolbar\n      toolbar = [];\n      for (x = 0; x < $.mosaic.options.richtext_toolbar.length; x += 1) {\n        group = $.mosaic.options.richtext_toolbar[x];\n        for (y = 0; y < group.actions.length; y += 1) {\n          if ($.inArray(group.actions[y].name, actions) > -1) {\n            toolbar.push(group.actions[y].action);\n          }\n        }\n        if (toolbar.length && toolbar[toolbar.length - 1] != '|') {\n          toolbar.push('|');\n        }\n      }\n      if (toolbar.length && toolbar[toolbar.length - 1] == '|') {\n        toolbar.pop();\n      }\n\n      // Build contextmenu\n      cmenu = [];\n      for (x = 0; x < $.mosaic.options.richtext_contextmenu.length; x += 1) {\n        group = $.mosaic.options.richtext_contextmenu[x];\n        for (y = 0; y < group.actions.length; y += 1) {\n          if ($.inArray(group.actions[y].name, actions) > -1) {\n            cmenu.push(group.actions[y].action);\n          }\n        }\n        if (cmenu.length && cmenu[cmenu.length - 1] != '|') {\n          cmenu.push('|');\n        }\n      }\n      if (cmenu.length && cmenu[cmenu.length - 1] == '|') {\n        cmenu.pop();\n      }\n\n      // Define placeholder updater\n      var _placeholder = function() {\n        var $inside = $content.find('p > *');\n        if (($inside.length === 0 || ($inside.length === 1 && $inside.is('br'))) &&\n            $content.text().replace(/^\\s+|\\s+$/g, '').length === 0) {\n          $content.addClass('mosaic-tile-content-empty');\n          if($content.find('p').length === 0){\n            $content.empty().append('<p></p>');\n          }\n        } else {\n          $content.removeClass('mosaic-tile-content-empty');\n        }\n      };\n      var timeout = 0;\n      var placeholder = function(){\n        clearTimeout(timeout);\n        timeout = setTimeout(_placeholder, 100);\n      };\n\n      var paste_as_text = $.mosaic.options.tinymce.tiny.paste_as_text || false;\n      if(toolbar.length === 0){\n        paste_as_text = true;\n      }\n      // Init rich editor\n      pattern = new TinyMCE($content, $.extend(\n        true, {}, $.mosaic.options.tinymce, { inline: false, tiny: {\n        body_id: id,\n        selector: \"#\" + id,\n        inline: true,\n        paste_as_text: paste_as_text,\n        fixed_toolbar_container: '#' + $editorContainer.attr('id'),\n        theme_advanced_toolbar_align: \"right\",\n        menubar: false,\n        toolbar: toolbar.join(' ') || false,\n        statusbar: false,\n        contextmenu: cmenu.join(' ') || false,\n        plugins: $.mosaic.options.tinymce.tiny.plugins.concat(\n          cmenu.length ? ['contextmenu'] : []\n        ),\n        setup: function(editor) {\n          that.tinymce = editor;\n          editor.on('focus', function(e) {\n            if (e.target.id) {\n              if($('.mosaic-helper-tile').length === 0){\n                that.select();\n                positionActiveTinyMCE();\n              }else{\n                // XXX this is such a hack..\n                // SOMETHING is causing tinymce to focus *after* it has been blurred\n                // from dragging. It's a weird state where it think it is focused\n                // but it's dragging. This fixes it, sort of. Sometimes you can\n                // still detect a flicker when the modes are switching\n                setTimeout(function(){\n                  $('.mce-edit-focus').each(function(){\n                    var tile = new Tile($(this).parent());\n                    tile.blur();\n                    var tiny = window.tinyMCE.get(this.getAttribute('id'));\n                    if(tiny){\n                      tiny.hide();\n                    }\n                  });\n                }, 10);\n              }\n            }\n          });\n\n          if(toolbar.length === 0){\n            editor.on('keydown', function(e){\n              if(e.keyCode === 13){\n                e.preventDefault();\n                return;\n              }\n            });\n          }\n\n          // `change` event doesn't fire all the time so we do both here...\n          editor.on('keyup change', placeholder);\n          placeholder();\n\n          editor.on('init', function(){\n            /*\n              since focusing on a rich text tile before tinymce is initialized\n              can cause some very weird issues where the toolbar won't show,\n              we need to delay focus on rich text tiles\n            */\n            that.$el.data('tinymce-loaded', true);\n            if(that.$el.data('delayed-focus') === true){\n              that.$el.data('delayed-focus', false);\n              setTimeout(function(){\n                that._focus();\n              }, 100);\n            }\n          });\n        }\n      }}));\n\n      // Set editor class\n      $content.addClass('mosaic-rich-text');\n    };\n\n    Tile.validTile = function(el){\n      var $el = $(el);\n      if($el.is('.mosaic-tile')){\n        return true;\n      }\n      if($el.parents('.mosaic-tile').size() > 0){\n        return true;\n      }\n      return false;\n    };\n\n    return Tile;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++plone++mosaic/js/mosaic.tile.js?");

/***/ }),

/***/ "./.plone/++plone++mosaic/js/mosaic.toolbar.js":
/*!*****************************************************!*\
  !*** ./.plone/++plone++mosaic/js/mosaic.toolbar.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * This plugin is used to create a mosaic toolbar.\n *\n * @author Rob Gietema\n * @version 0.1\n * @licstart  The following is the entire license notice for the JavaScript\n *            code in this page.\n *\n * Copyright (C) 2010 Plone Foundation\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation; either version 2 of the License.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more details.\n *\n * You should have received a copy of the GNU General Public License along with\n * this program; if not, write to the Free Software Foundation, Inc., 51\n * Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * @licend  The above is the entire license notice for the JavaScript code in\n *          this page.\n */\n\n/* global window: false */\n/*jslint white: true, browser: true, onevar: true, nomen: true,\neqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true,\nimmed: true, strict: true, maxlen: 140, maxerr: 9999, quotmark: false */\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! jquery */ \"./.plone/++plone++static/components/jquery/dist/jquery.min.js\"),\n  __webpack_require__(/*! mosaic-url/mosaic.tile */ \"./.plone/++plone++mosaic/js/mosaic.tile.js\"),\n  __webpack_require__(/*! mosaic-url/mosaic.layout */ \"./.plone/++plone++mosaic/js/mosaic.layout.js\")\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function($, Tile) {\n  'use strict';\n\n  // Define mosaic namespace if it doesn't exist\n  if (typeof($.mosaic) === \"undefined\") {\n    $.mosaic = {};\n  }\n\n  var normalizeClass = function(val){\n    return val.replace(/(_|\\.|\\/)/g, \"-\").toLowerCase();\n  };\n\n  /**\n   * Adds a control to the toolbar\n   *\n   * @id AddControl\n   * @param {Object} parent Parent object to append control to\n   * @param {Object} action Object of the action\n   */\n  function AddControl(parent, action) {\n\n    var $el;\n\n    // Check if button or menu\n    if ((typeof (action.menu) !== undefined) && (action.menu)) {\n\n      // Check if icon menu\n      if (action.icon) {\n        $el = $(document.createElement(\"label\"));\n        // Create menu\n        parent.append($el\n          .addClass(\"mosaic-icon-menu mosaic-icon-menu-\" +\n                normalizeClass(action.name) + ' mosaic-icon')\n          .html(action.label)\n          .attr(\"title\", action.label)\n          .append($(document.createElement(\"select\"))\n            .addClass(\"mosaic-menu-\" + normalizeClass(action.name))\n            .data(\"action\", action.action)\n            .change(function () {\n              $(this).mosaicExecAction();\n            })\n            .each(function () {\n\n              // Local variables\n              var z, elm, y;\n\n              for (z in action.items) {\n\n                // Check if child objects\n                if (action.items[z].items !== undefined) {\n                  $(this).append($(document.createElement(\"optgroup\"))\n                    .addClass(\"mosaic-option-group mosaic-option-group-\" +\n                          normalizeClass(action.items[z].value))\n                    .attr(\"label\", action.items[z].label)\n                  );\n                  elm = $(this).find(\".mosaic-option-group-\" +\n                             normalizeClass(action.items[z].value));\n\n                  // Add child nodes\n                  for (y in action.items[z].items) {\n                    elm.append(\n                      $(document.createElement(\"option\"))\n                        .attr('value', action.items[z].items[y].value)\n                        .addClass('mosaic-option mosaic-option-' +\n                              normalizeClass(action.items[z].items[y].value))\n                        .html(action.items[z].items[y].label)\n                    );\n                  }\n\n                // Else no child objects\n                } else {\n                  $(this).append(\n                    $(document.createElement(\"option\"))\n                      .attr('value', action.items[z].value)\n                      .addClass('mosaic-option mosaic-option-' + normalizeClass(action.items[z].value))\n                      .html(action.items[z].label)\n                  );\n                }\n              }\n            })\n          )\n        );\n\n      // Else text menu\n      } else {\n        $el = $(document.createElement(\"select\"));\n        // Create menu\n        parent.append($el\n          .addClass(\"mosaic-menu mosaic-menu-\" +\n                action.name.replace(/_/g, \"-\"))\n          .data(\"action\", action.action)\n          .change(function () {\n            $(this).mosaicExecAction();\n          })\n          .each(function () {\n\n            // Local variables\n            var z, elm, y;\n            for (z = 0; z < action.items.length; z += 1) {\n\n              // Check if child objects\n              if (action.items[z].items !== undefined) {\n                $(this).append($(document.createElement(\"optgroup\"))\n                  .addClass(\"mosaic-option-group mosaic-option-group-\" +\n                         normalizeClass(action.items[z].value))\n                  .attr(\"label\", action.items[z].label)\n                );\n                elm = $(this).find(\".mosaic-option-group-\" + normalizeClass(action.items[z].value));\n\n                // Add child nodes\n                for (y in action.items[z].items) {\n                  elm.append(\n                    $(document.createElement(\"option\"))\n                      .attr('value', action.items[z].items[y].value)\n                      .addClass('mosaic-option mosaic-option-' + normalizeClass(action.items[z].items[y].value))\n                      .html(action.items[z].items[y].label)\n                  );\n                }\n\n              // Else no child objects\n              } else {\n                $(this).append(\n                  $(document.createElement(\"option\"))\n                    .attr('value', action.items[z].value)\n                    .addClass('mosaic-option mosaic-option-' + normalizeClass(action.items[z].value))\n                    .html(action.items[z].label)\n                );\n              }\n            }\n          })\n        );\n      }\n\n    } else {\n      $el = $(document.createElement(\"button\"));\n      // Create button\n      parent.append($el\n        .addClass(\"mosaic-button mosaic-button-\" + normalizeClass(action.name) + (action.icon ? ' mosaic-icon' : ''))\n        .html(action.label)\n        .attr(\"title\", action.label)\n        .attr(\"type\", \"button\")\n        .data(\"action\", action.action)\n        .mousedown(function () {\n          $(this).mosaicExecAction();\n        })\n      );\n    }\n    if($.mosaic.actionManager.actions[action.name]){\n      if(!$.mosaic.actionManager.actions[action.name].visible()){\n        // hide it\n        $el.hide();\n      }\n    }\n  }\n\n  $.fn._mosaicToolbarLayoutEditor = function(actions){\n    $('.mosaic-toolbar-secondary-functions', this).show();\n\n    var x, y, action_group, elm_action_group;\n    // Add formats to toolbar\n    if ($.mosaic.options.formats !== undefined) {\n      for (x = 0; x < $.mosaic.options.formats.length; x += 1) {\n        action_group = $.mosaic.options.formats[x];\n        actions.primary_actions.append(\n          $(document.createElement(\"fieldset\"))\n            .addClass(\n                \"mosaic-button-group mosaic-button-group-\" +\n                normalizeClass(action_group.name))\n        );\n        elm_action_group = actions.primary_actions.children(\n          \".mosaic-button-group-\" +\n          action_group.name.replace(/_/g, \"-\"));\n        for (y = 0; y < action_group.actions.length; y += 1) {\n          if (action_group.actions[y].favorite) {\n\n            // Add control\n            AddControl(elm_action_group,\n                   action_group.actions[y]);\n          }\n        }\n        if (elm_action_group.children().length === 0) {\n          elm_action_group.remove();\n        }\n      }\n    }\n\n    // Add items to the insert menu\n    if ($.mosaic.options.tiles !== undefined) {\n      var elm_select_insert = actions.secondary_actions.find(\n        \".mosaic-menu-insert\");\n      for (x = 0; x < $.mosaic.options.tiles.length; x += 1) {\n        action_group = $.mosaic.options.tiles[x];\n        elm_select_insert.append($(document.createElement(\"optgroup\"))\n          .addClass(\"mosaic-option-group mosaic-option-group-\" + normalizeClass(action_group.name))\n          .attr(\"label\", action_group.label)\n        );\n        elm_action_group = actions.secondary_actions.find(\".mosaic-option-group-\" + normalizeClass(action_group.name));\n        for (y = 0; y < action_group.tiles.length; y += 1) {\n          var tile = action_group.tiles[y];\n          elm_action_group.append($(document.createElement(\"option\"))\n            .addClass(\"mosaic-option mosaic-option-\" + normalizeClass(tile.name))\n            .attr(\"value\", tile.name)\n            .html(tile.label)\n          );\n        }\n        if (elm_action_group.children().length === 0) {\n          elm_action_group.remove();\n        }\n      }\n    }\n\n    // Add items to the format menu\n    if ($.mosaic.options.formats !== undefined) {\n      var elm_select_format = actions.secondary_actions.find(\".mosaic-menu-format\");\n      for (x = 0; x < $.mosaic.options.formats.length; x += 1) {\n        action_group = $.mosaic.options.formats[x];\n        elm_select_format.append($(document.createElement(\"optgroup\"))\n          .addClass(\"mosaic-option-group mosaic-option-group-\" + normalizeClass(action_group.name))\n          .attr(\"label\", action_group.label)\n        );\n        elm_action_group = actions.secondary_actions.find(\".mosaic-option-group-\" + normalizeClass(action_group.name));\n        for (y = 0; y <  action_group.actions.length; y += 1) {\n          var action = action_group.actions[y];\n          if (action.favorite === false) {\n            elm_action_group.append($(document.createElement(\"option\"))\n              .addClass(\"mosaic-option mosaic-option-\" + normalizeClass(action.name))\n              .attr(\"value\", action.name)\n              .html(action.label)\n              .data(\"action\", action.action)\n            );\n          }\n        }\n        if (elm_action_group.children().length === 0) {\n          elm_action_group.remove();\n        }\n      }\n    }\n  };\n\n  /**\n   * Create a new instance of a mosaic toolbar.\n   *\n   * @constructor\n   * @id jQuery.fn.mosaicToolbar\n   * @return {Object} Returns a jQuery object of the matched elements.\n   */\n  $.fn.mosaicToolbar = function () {\n\n    // Loop through matched elements\n    return this.each(function () {\n\n      // Local variables\n      var obj, content, actions, a, x, action_group, elm_action_group, y,\n      RepositionToolbar, SelectedTileChange;\n\n      // Get current object\n      obj = $(this);\n\n      // Empty object\n      obj.html(\"\");\n\n      // Add mosaic toolbar class\n      obj.append($(document.createElement(\"div\"))\n        .addClass(\"mosaic-inline-toolbar\")\n      );\n      obj = obj.children(\".mosaic-inline-toolbar\");\n\n      // Add content\n      obj.append($(document.createElement(\"div\"))\n        .addClass(\"mosaic-toolbar-content\")\n      );\n      content = obj.children(\".mosaic-toolbar-content\");\n\n      // Add primary and secondary function div's\n      actions = {};\n      content.append($(document.createElement(\"div\"))\n        .addClass(\"mosaic-toolbar-primary-functions\")\n      );\n      actions.primary_actions =\n        content.children(\".mosaic-toolbar-primary-functions\");\n      content.append($(document.createElement(\"div\"))\n        .addClass(\"mosaic-toolbar-secondary-functions\")\n      );\n      actions.secondary_actions =\n        content.children(\".mosaic-toolbar-secondary-functions\");\n\n      // Loop through action groups\n      for (a in actions) {\n\n        // Add actions to toolbar\n        for (x = 0; x < $.mosaic.options[a].length; x += 1) {\n\n          // If single action\n          if ($.mosaic.options[a][x].actions === undefined) {\n\n            // Add control\n            AddControl(actions[a], $.mosaic.options[a][x]);\n\n          // If fieldset\n          } else {\n            action_group = $.mosaic.options[a][x];\n            var classNamePart = normalizeClass($.mosaic.options[a][x].name);\n            var $group = $(document.createElement(\"div\"))\n                         .addClass(\"mosaic-button-group mosaic-button-group-\" +\n                          classNamePart);\n            $group.append(AddControl($group, $.extend({}, true, action_group, {\n              action: action_group.name.toLowerCase(),\n              name: action_group.name.toLowerCase()\n            })));\n            var $btnContainer = $(document.createElement(\"div\")).addClass('btn-container');\n            $group.append($btnContainer);\n            actions[a].append($group);\n            for (y = 0; y < action_group.actions.length; y += 1) {\n              // Add control\n              AddControl($btnContainer, action_group.actions[y]);\n            }\n          }\n        }\n      }\n\n      obj._mosaicToolbarLayoutEditor(actions);\n      if($.mosaic.hasContentLayout){\n        // hide these options if static\n        $('.mosaic-toolbar-secondary-functions', this).hide();\n      }\n\n      // Reposition toolbar on scroll\n      RepositionToolbar = function () {\n\n        // Local variables\n        var left;\n\n        if (parseInt($(window).scrollTop(), 10) >\n          parseInt(obj.parent().offset().top, 10)) {\n          if (obj.hasClass(\"mosaic-inline-toolbar\")) {\n            left = obj.offset().left;\n\n            obj\n              .width(obj.width())\n              .css({\n                'left': left,\n                'margin-left': '0px'\n              })\n              .removeClass(\"mosaic-inline-toolbar\")\n              .addClass(\"mosaic-external-toolbar\")\n              .parent().height(obj.height());\n          }\n        } else {\n          if (obj.hasClass(\"mosaic-external-toolbar\")) {\n            obj\n              .css({\n                'width': '',\n                'left': '',\n                'margin-left': ''\n              })\n              .removeClass(\"mosaic-external-toolbar\")\n              .addClass(\"mosaic-inline-toolbar\")\n              .parent().css('height', '');\n          }\n        }\n      };\n\n      // Bind method and add to array\n      $(window).bind('scroll', RepositionToolbar);\n\n      // Bind selected tile change event\n      SelectedTileChange = function () {\n        // Local variables\n        var obj, tiletype, actions, x,\n        tile_group, y;\n\n        // Disable edit html source\n        $.mosaic.disableEditHtmlSource();\n\n        // Get object\n        obj = $(this);\n\n        var $selected_tile = $(\".mosaic-selected-tile\", $.mosaic.document);\n        if($selected_tile.length > 0){\n          var tile = new Tile($selected_tile);\n          tiletype = tile.getType();\n        }\n\n        // Get actions\n        actions = $.mosaic.options.default_available_actions;\n        for (x = 0; x < $.mosaic.options.tiles.length; x += 1) {\n          tile_group = $.mosaic.options.tiles[x];\n          for (y = 0; y <  tile_group.tiles.length; y += 1) {\n            if (tile_group.tiles[y].name === tiletype) {\n              actions = actions\n                .concat(tile_group.tiles[y].available_actions);\n            }\n          }\n        }\n        if (!$selected_tile.hasClass('removable')) {\n          actions = $(actions).filter(function() {\n            return this !== 'remove';\n          });\n        }\n\n        // Show option groups\n        obj.find(\".mosaic-option-group\").show();\n\n        // Hide all actions (but not complete menus)\n        obj.find(\".mosaic-button\").hide();\n        obj.find(\".mosaic-menu-format\").find(\".mosaic-option\")\n          .hide()\n          .attr(\"disabled\", \"disabled\");\n        $(obj.find(\".mosaic-menu-format\")\n          .find(\".mosaic-option\").get(0))\n          .show()\n          .removeAttr(\"disabled\");\n\n        // Show actions\n        $(actions).each(function (i, val) {\n          if($.mosaic.actionManager.actions[val]){\n            if(!$.mosaic.actionManager.actions[val].visible()){\n              return;\n            }\n          }\n          obj.find(\".mosaic-button-\" + val).show();\n          obj.find(\".mosaic-icon-menu-\" + val).show();\n          obj.find(\".select2-container.mosaic-menu-\" + val).show();\n          obj.find(\".mosaic-option-\" + val)\n            .show()\n            .removeAttr(\"disabled\");\n        });\n        if($.mosaic.actionManager.actions.layout.visible()){\n          $('.mosaic-button-layout').show();\n        }\n\n        // Disable used field tiles\n        obj.find(\".mosaic-menu-insert\")\n          .children(\".mosaic-option-group-fields\")\n          .children().each(function () {\n          if ($.mosaic.options.panels\n            .find(\".mosaic-\" + $(this).attr(\"value\") + \"-tile\")\n            .length === 0) {\n            $(this).show().removeAttr(\"disabled\");\n          } else {\n            $(this).hide().attr(\"disabled\", \"disabled\");\n          }\n        });\n\n        // Hide option group if no visible items\n        obj.find(\".mosaic-option-group\").each(function () {\n          if ($(this).children(\":enabled\").length === 0) {\n            $(this).hide();\n          }\n        });\n\n        if(!$.mosaic.hasContentLayout && $.mosaic.options.canChangeLayout){\n          $('.mosaic-button-savelayout').show();\n        }else{\n          $('.mosaic-button-savelayout').hide();\n        }\n      };\n\n      // Bind method and add to array\n      $(this).bind(\"selectedtilechange\", SelectedTileChange);\n\n      // Set default actions\n      $(this).trigger(\"selectedtilechange\");\n\n      // Apply select2 for menus\n      $(\".mosaic-menu\").each(function() {\n        $(this).select2({\n          width: 'style',\n          dropdownCssClass: 'mosaic-dropdown mosaic-dropdown-' + $(this).data(\"action\"),\n          dropdownAutoWidth: true,\n          minimumResultsForSearch: 99\n        });\n      });\n\n      // Trigger inline validation draft auto save\n      var lastChange = (new Date()).getTime();\n      $(this).on('selectedtilechange', function () {\n        if ($.mosaic.overlay.app) { return; }\n        if ($.mosaic.saving) { return; }  // skip when saving\n        if ($.mosaic.modal) { return; }  // skip when there's modal\n        if ((new Date()).getTime() - lastChange > 6000) {\n          $.mosaic.queue(function(next){\n            $.mosaic.saveLayoutToForm();\n            $(\"#form-widgets-ILayoutAware-customContentLayout, \" +\n              \"[name='form.widgets.ILayoutAware.customContentLayout']\").blur();\n            next();\n          });\n          lastChange = (new Date()).getTime();\n        }\n      });\n    });\n  };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++plone++mosaic/js/mosaic.toolbar.js?");

/***/ }),

/***/ "./.plone/++resource++mockup/base/pattern.js":
/*!***************************************************!*\
  !*** ./.plone/++resource++mockup/base/pattern.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* Mockup shim of the Patternslib Base Pattern\n */\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n  __webpack_require__(/*! pat-base */ \"./.plone/++plone++static/components/patternslib/src/core/base.js\"),\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function(Base) {\n  'use strict';\n\n  var MockupBase = function MockupBaseWrapper() {\n    return Base.apply(this, arguments);\n  };\n  for (var key in Base) {\n    if (Base.hasOwnProperty(key)) {\n      MockupBase[key] = Base[key];\n    }\n  }\n  MockupBase.prototype = Base.prototype;\n  MockupBase.prototype.constructor = MockupBase;\n\n  MockupBase.extend = function() {\n    console.log(\n      \"Usage of the mockup-patterns-base pattern is deprecated and it will eventually be removed.\"+\n      \"Instead, use pat-base and explicitly set parser to 'mockup' when calling extend.\");\n    var child = Base.extend.apply(this, arguments);\n    child.prototype.parser = 'mockup';\n    return child;\n  };\n\n  return MockupBase;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./.plone/++resource++mockup/base/pattern.js?");

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/setimmediate/setImmediate.js?");

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/timers-browserify/main.js?");

/***/ })

}]);